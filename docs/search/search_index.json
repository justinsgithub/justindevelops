{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Study Documentation","text":""},{"location":"#objectives","title":"objectives","text":"<ul> <li>a site to optimize learning and work on weaknesses </li> <li>notes, code examples, and references to use in the future when working on projects</li> </ul>"},{"location":"#current-priorities","title":"current priorities","text":"<ol> <li>learn / practice Ruby in depth </li> <li>build ruby projects to add to new job portfolio</li> </ol>"},{"location":"#my-links","title":"my links","text":""},{"location":"#public-directory","title":"Public Directory","text":""},{"location":"#development-portfolio","title":"Development Portfolio","text":""},{"location":"#linkedin","title":"LinkedIn","text":""},{"location":"#twitter","title":"Twitter","text":""},{"location":"#github","title":"GitHub","text":""},{"location":"computer-science/acronyms/","title":"Tech Acronyms","text":""},{"location":"computer-science/acronyms/#tar","title":"tar","text":"<ul> <li>tape archive files</li> </ul>"},{"location":"computer-science/acronyms/#rest","title":"REST","text":"<ul> <li>REpresentational State Transfer</li> </ul>"},{"location":"computer-science/acronyms/#api","title":"API","text":"<ul> <li>Application Programming Interface</li> </ul>"},{"location":"computer-science/acronyms/#icann","title":"ICANN","text":"<ul> <li>Internet Corporation for Assigned Names and Numbers </li> </ul>"},{"location":"computer-science/acronyms/#urls","title":"URLS","text":"<ul> <li>Uniform Resource Locator</li> </ul>"},{"location":"computer-science/data-structures/","title":"Data Structures","text":"<ul> <li>data structures are like containers that hold multiple pieces of data</li> <li> <p>data structures give us a way to - </p> <ul> <li>organize data</li> <li>store data</li> <li>access data</li> </ul> </li> <li> <p>the amount of memory a data structure uses varies unlike primitive data types</p> </li> <li> <p>the amount of memory a data structure uses depends on factors such as - </p> <ul> <li>how they are allocated </li> <li>how they are initialized</li> <li>how they are maintained </li> </ul> </li> <li> <p>reference types are data store the address of a datatype in memory by using a pointer to reference it </p> </li> </ul>"},{"location":"computer-science/data-structures/#list-of-data-structures","title":"list of data structures","text":"<p>non-exhaustive</p> <ul> <li>arrays </li> <li>linked lists </li> <li>stacks</li> <li>queues </li> <li>hash table</li> <li>trees</li> <li>heaps</li> <li>graphs</li> </ul>"},{"location":"computer-science/data-structures/#organizing-data","title":"organizing data","text":"<ul> <li>just like organizing a room there are many different ways to organize data</li> <li>there are many factors that play a factor in planning a room's organization</li> <li>in a room we organize things based on the type of item it is </li> <li>a room will hold different types of items depending on what the room is used for </li> <li>we will also factor in the type of facility a room is in when we go to organize it </li> <li>another factor that might effect organizing a room is if it is a house or garage and the average weather at it's location</li> <li>this is the same type of complexity that goes into data structures</li> <li>data structures give us an easier way to assign variables and keep track of items as opposed to creating separate binding statements for each variable</li> </ul>"},{"location":"computer-science/data-structures/#strings","title":"strings","text":"<p>a non-primitive data type made up of the primitive character type </p> <ul> <li>a string is a data type made from chars</li> <li>since a string is made out of characters it is not considered a primitive data type</li> <li>a string is usually signified by surrounding text in quotes</li> <li>an array is commonly used in real life to name things </li> <li>strings are used to give us names as well as things like the title of a book </li> <li>the title of a book is made up of a string of individual characters</li> </ul>"},{"location":"computer-science/data-structures/#array","title":"array","text":"<ul> <li>a collection of elements </li> <li>each element is an item identified by an index / key</li> <li>this could be like a collection of books that are stored on a shelf</li> <li>each spot on the shelf is labeled with a number starting at 0</li> </ul>"},{"location":"computer-science/data-structures/#set","title":"set","text":"<ul> <li>a collection of unique items</li> <li>order does not matter</li> <li>none of the elements are duplicated</li> <li>a way of grouping things with a common property </li> <li>an example could be a list of clothing, fingers, userIDs</li> </ul>"},{"location":"computer-science/data-types/","title":"Data Types","text":""},{"location":"computer-science/data-types/#primitive-data-types","title":"primitive data types","text":"<ul> <li>a data types behavior may vary slighly between languages</li> <li>primitive data types each require a certain amount of fixed memory</li> <li>the fixed memory that makes up a primitive data type is the amount of 0s and 1s it uses</li> <li>a single 0 or a bit </li> <li>a boolean is represented by a single bit ( a 1 or a 0 )</li> <li>in boolean a 0 = False and a 1 = True</li> <li>numbers within the same datatype take up the same memory no matter if one is higher than the other</li> <li>all data breaks down to 0s and 1s </li> <li>programming languages abstract the 0s and 1s away from us </li> <li>primitive types can also be called basic or value types</li> <li>primitive types are a fixed size because their size does not depend on the value inside if them</li> <li>there are data types that can be built out of primitive data types</li> <li>strings are an example of a datatype built from a primitive type because they are made from chars</li> </ul>"},{"location":"computer-science/data-types/#primitive-data-type-list","title":"primitive data type list","text":"<ul> <li>byte</li> <li>short</li> <li>int</li> <li>long</li> <li>float</li> <li>double</li> <li>boolean</li> <li>char</li> </ul>"},{"location":"computer-science/data-types/#numbers","title":"numbers","text":"<ul> <li>the difference between number data types is the range of values they can store</li> </ul> type range bits short -32,768 to 32,767 16 int ~-2 billion to -2 billion 32 long -(263) to 263 64 float 7 decimal digits 32 double 16 decimal digits 64 signed negative or postive any unsigned postive double unsigned version"},{"location":"computer-science/data-types/#boolean-values","title":"boolean values","text":"<ul> <li>a boolean is a true or false value </li> <li>named after Goerge Boolean</li> <li>used perform yes / no logical operations </li> <li>we give decision making boolean values everyday</li> </ul>"},{"location":"computer-science/data-types/#characters","title":"characters","text":"<ul> <li>used for storing a single letter or non-number in code</li> </ul>"},{"location":"computer-science/digital-information/","title":"Digital Information","text":""},{"location":"computer-science/digital-information/#innovation-and-technology","title":"innovation and technology","text":""},{"location":"computer-science/digital-information/#history-and-innovation","title":"history and innovation","text":"<ul> <li>the first idea of a computer was created by Charles Babbage</li> <li>many of the concepts of computer logic today existed in Babbage's work back in the 19th century</li> <li>Ada Lovelace was considered the first programmer </li> <li>Alan Turing is largely credited with the birth of modern computer science</li> <li>Turing formalized the concepts of algorithm and computation using a general purpose computer called the turing machine</li> <li>all innovation goes back to the basics of computer science</li> <li>all future innovation will only exist because of work done today and in the past</li> </ul>"},{"location":"computer-science/digital-information/#impact-of-coding-and-programming","title":"impact of coding and programming","text":"<ul> <li>coding and programming are what allow all the hardware innovations that have been created, come alive</li> <li>the way that programming works with programming can happen at many levels </li> <li>to work with hardware you need to have a system that can work directly with the hardware components on your computer</li> <li>this can be processors, memory, or devices that are attached, through ports on your computer</li> <li>a software that does this is called the operating system </li> <li>the OS is the overall system that interfaces the software we work with everyday to the hardware that is in the machine </li> <li>API = Application Programming Interface</li> <li>to play a game on a computer, the operating system provides an API for how the game can interact with the hardware</li> <li>the OS defines what the game can and cannot do </li> <li>without the API, a game could do very bad things to the computer </li> <li>the API protects the system and creates a clearly defined way that programmers can work with hardware and other software</li> <li>makers of the operating system also provide a set of tools that allow developers to work with the system</li> <li>SDK = software development kit</li> <li> <p>SDKs help developers build applications that can be used on top of the operating system</p> </li> <li> <p>the SDKs include 3 basic parts (Code, Language, Compiler / Interpreter):</p> </li> <li> <p>code:</p> <ul> <li>prebuilt sets of code that do alot of the heavy work for you </li> <li>defines things like numbers </li> <li>arithmetic </li> <li>working with the file system </li> <li>user interface controls like buttons and windows </li> <li>navigation, such as keyboard and mouse</li> </ul> </li> <li> <p>programming language: </p> <ul> <li>tells the computer what to do when a user wants to run the app </li> </ul> </li> <li> <p>interpreter / compiler:</p> <ul> <li>takes the instructions that are created and when needed, instructs the operating system on what to do </li> <li>interprets / compiles the instructions into binary numbers that the computer can understand</li> <li>no matter what you are doing on a computer, it needs to be translated to binary numbers for computers to understand</li> </ul> </li> </ul>"},{"location":"computer-science/digital-information/#computer-communications","title":"computer communications","text":""},{"location":"computer-science/digital-information/#yes-and-no-answers-with-binary","title":"yes and no answers with binary","text":"<ul> <li>binary = a system with only two possible states (yes or no, on or off)</li> <li> <p>different ways to represent binary state: </p> <ul> <li>boolean: a value that contains one of two options, true or false</li> <li>numbers: 1 and 0, 1 represents on and 0 represents off </li> </ul> </li> <li> <p>binary information can be stored and communicated by using states of on or off</p> </li> <li>microchips have logic gates in them which uses electricity to determine the on and off signals</li> <li>storage devices can change and save binary states to be able to access them later</li> <li>networks can communicate by sending signals with on and off states defined within them </li> <li>a single binary state is called a bit, the smallest amount of storage you can measure </li> <li>using the basic bit unit, we can build larger and more complicated representations of information</li> <li>and create a way for us to take things that we recognize everyday and represent them using these tiny values called bits </li> </ul>"},{"location":"computer-science/digital-information/#binary-and-bits","title":"binary and bits","text":"<ul> <li>we can represent the binary states of on and off as numbers </li> <li>the binary number system only uses digits, 1 and 0 </li> <li>for a binary state of on, it is represented by a 1</li> <li>for a state of off, it is represented by a 0</li> <li>storing a single value does not make much sense on its own, you would have to store multiple values in a single row</li> <li>to do that you would create a string of them, and since they are all numbers, you are just creating a larger number with multiple digits or bits</li> <li>a grouping of 8 binary digits is called a byte</li> <li>a byte is a common measure of data we use everyday </li> <li>a kilobyte is 1,024 bytes</li> <li>a megabyte is 1,024 kilobytes</li> <li>a gigabyte is 1,024 megabytes</li> <li>a terabyte is 1,024 gigabyte</li> <li>on a computer you might have a drive that can store a terabyte of data </li> <li>a terabyte can contain almost 9 trillion bits, 9 trillion individual states of on and off </li> <li>each of these bits holds an on or off state that holds a tiny part of a larger piece of information</li> <li>whether it is a single number, a piece of text called a string, a document, photo, song, movie, or a computer program</li> <li>all these things we work with every day are translated into bits that are stored, transmitted, and translated by computers and networks </li> <li>the process of taking information that we recognize today, like a string of text, and converting it to a binary number is called encoding </li> <li>you are taking something that we recognize in a way that humans can understand it, and are finding a way to convert it using a specific process into a string of binary digits that can be transmitted, processed, and stored by a computer or network</li> <li>using that same process but in reverse, those binary digits can be converted back into the information that we work with every day </li> <li>this is called decoding, it reconstitutes the files that are transmitted or accessed and presents them to us in a format that we can recognize </li> <li>in order for the encoding and decoding process to work, the bits that contain these values need to be stored accessed, or transmitted</li> <li>the way this is done is developing a protocol, or set of rules, for how bits are transmitted, and defines the basis for how digital communications work</li> </ul>"},{"location":"computer-science/digital-information/#communicating-with-bits","title":"communicating with bits","text":"<ul> <li>we can translate information and code it as bits in a number of ways </li> <li>since bits represent states of on or off, which we represent as 1s and 0s, we can communicate those to other people </li> <li>bitrate is the number of bits that are transmitted each second</li> <li>when communicating bits, both sides of the communication need to agree speed and size of the communication, how the bits are being sent</li> </ul>"},{"location":"computer-science/digital-information/#digital-communication","title":"digital communication","text":"<ul> <li>there are 3 ways of communicating in bits when connecting to the internet:</li> <li> <p>radio</p> <ul> <li>Wi-Fi networks are based on radio waves that transmit binary states, based on alternating the radio waves that send information</li> <li>by encoding information into binary data, it is then translated into these varying radio waves and can be transmitted, received, and converted back to binary data, and decoded into its original format</li> <li>wifi and radio communications are great for short distances, but if you take your laptop to far from the hotspot the signal gets weaker until, at some point it isn't strong enough to reliably send information</li> <li>radio can also be noisy</li> <li>when you have one hotspot transmission don't encounter much interference</li> <li>but if you have multiple hotspots you can create a lot of radio noise that can create interference and break down the reliability of the network</li> <li>there are certain bands up and down the various radio frequencies that are reserved for different types of transmissions, such as satellite information, FM and AM radio, or for other types of communication </li> <li>hotspots use unique channels to reduce interference and noise, but there are still limitations</li> <li>because of these limitations radio is generally used as a way to connect individual devices to a network</li> </ul> </li> <li> <p>electrical</p> <ul> <li>other formats like electricity can support larger and more complex communication </li> <li>with electricity you can send electric pulses over wires that represent binary states </li> <li>an ethernet cable is based on electric transmission of data.</li> <li>data that is encoded into binary states and transmitted is then sent using these eletric pulses</li> <li>electric and wire communications are the foundation of much of digital communication, especially within a home or office </li> <li>for instance, while you might use Wi-Fi that uses radio waves to transmit data, the hotspots you connect to are wired in a complex network of transmission lines that use electricity</li> <li>electricity is used for large amount of communications </li> <li>electricity does have some limitations with speed and reliability, especially along great distances </li> <li>where electricity starts falling short is where optical comes in </li> </ul> </li> <li> <p>optical</p> <ul> <li>optical or light communications uses pulses of light sent along a cable of glass or plastic </li> <li>the speed of light, when sent through glass, can be about 2,000 kilometers per second (124,000 miles per second)</li> <li>glass has different limitations, mostly cost </li> <li>optical cables are much more expensive than cables based on electricity </li> <li>optical cables are generally used for the long haul communications across continents and oceans</li> </ul> </li> <li> <p>together, radio, electrical, and optical power digital communication across the globe and even outside of it </p> </li> <li>using special frequencies, we are able to send and receive digital information with satellites and probes, that we send to other planets in our solar system</li> <li>the further sats and probes go out, the longer it takes to get the information, which is why it can take months or even years to get all of the information recorded by an exploration probe visiting someplace in our solarsystem like Pluto and sending that information back to earth</li> <li>we represent how fast computers can send and receive information (bitrate) by measuring the bandwidth of the transmission, which is the theoretical maximum that a communication system can support </li> <li>bandwidth is represented at a specific bitrate</li> <li>if you are using a computer with a usb3 port, it has a bandwidth of 5 gigabits per second</li> <li>older Wi-Fi networks like 802.11b standard can transmit at 11 megabits per second </li> <li>newer Wi-Fi networks like 802.11ac can transmit at 1.3 gigabits per second, or 1300 megabits per second</li> <li>802.11b,g,n,ac are names used to find the types of wireless network</li> <li>Wi-Fi networks can form to a standard, so devices of different types can communicate together, but you need to have matching support on both ends </li> <li>an older laptop that can understand 802.11g networks will not understand anything from an 802.11ac network</li> <li>most Wi-Fi networks can transmit across multiple standards</li> <li>the last thing to consider with digital communications is the time it takes to get a message from one side of the globe to the other, this is called latency</li> <li>latency is usually measure in milliseconds, or 1,000th of a second</li> <li>if you are communicating in 2 directions, latency can be an issue, since the longer it takes for one side to communicate to the other, that is doubled if the other side needs to send information back in response</li> <li>the lower the latency, the faster 2-way communications can take place</li> <li>whether it is with light, electricity, or radio waves, all of the information we communicate and transmit is encoded as binary data and can reach anyone on the planet (any maybe even another planet)</li> </ul>"},{"location":"computer-science/digital-information/#number-systems","title":"number systems","text":""},{"location":"computer-science/digital-information/#abstraction-of-numbers","title":"abstraction of numbers","text":"<ul> <li>when we think of numbers, we think of digits, 0 - 9</li> <li>for example: 723, this number represents a value, or a count of something, it could be 723 dollars, 723 yards of yarn, 723 gallons of milk, the number tells us how much of something there is, but numbers can be represented in different ways and mean different things</li> <li>5 books, and V (roman numeral) books mean the same thing but are written completely differently </li> <li>Roman Numerals are another way of representing how much of something we have </li> <li>Roman Numerals follow a different set of rules using symbols like I,V,X,L,C, and M</li> <li>Roman Numerals are based on basic counting, starting at 1, symbols are added, and then at a certain point, the next largest symbol is used </li> <li> <p>numbers can be represented in different ways </p> </li> <li> <p>decimal number system</p> <ul> <li>we represent numbers using the decimal number system </li> <li>the decimal number system uses base 10, which is why there are 10 digits that we use for numbers</li> <li>the other key part of a number system is the fact that you can have multiple digits</li> <li>we can take the number 5 and represent that as a single digit, but the number 15 needs 2 digits</li> <li>the next number to the left represents 10 </li> <li>classic odometers represent a good visual way we can represent counting in decimal</li> <li>you can think of the first digit being multiplied by the power of 0 (n0)  </li> <li>n(0) equals n * 1</li> <li> <p>as you move to the left, you can take the exponent and increase it by 1 for as long as the number is</p> </li> <li> <p>decimal: </p> </li> </ul> 7 2 3 total 100*7 10*2 1*3 723 700 20 1*3 723 <ul> <li>octal: </li> </ul> 7 2 3 total 64*7 8*2 1*3 723 448 16 3 467 <ul> <li>hexadecimal: </li> </ul> 7 2 3 total 256*7 16*2 1*3 723 1792 32 3 1827 </li> <li> <p>hexadecimal numbers are often found in coding to represent colors</p> </li> <li> </li> <li> <p>when thinking about number systems, you have a few things that are the same:</p> <ul> <li>the base number which is the maximum range of possible digits</li> <li>multiple columns that are incremented exponentially the further you go to the left to make larger values, (the opposite applies as well, to make smaller numbers)</li> <li>with those rules you can apply them to any base number, including 2 </li> <li>base 2 is the basis of the binary number system, which serves as the foundational way computers store, communicate, and process information </li> </ul> </li> </ul>"},{"location":"computer-science/digital-information/#e5411c","title":"e5411c","text":"<ul> <li>each color(2 letters) need 1 byte to represent it, you would need 3 bytes per pixel</li> <li>the first 2 numbers represent red, the second 2 green, the third 2 blue</li> <li>this is controlling the amount of red, green, and blue light in each pixel </li> </ul>"},{"location":"computer-science/digital-information/#binary-numbers","title":"binary numbers","text":"<ul> <li>binary states are the basis of how computers store, process, and share information using states of on or off </li> <li>using the binary number system we can represent these states using a base 2 number system, using 0 and 1 </li> <li>using the rules of numbers systems we can create a system for what a binary digit looks like</li> <li>we have a maximum of 2 possible digits, 0 and 1</li> <li>we also have multiple columns that exponentially increases in value from right to left, based on 2, the base of the number system </li> </ul> binary number decimal values total of decimal values 0 0 0 1 1 1 10 1+0 2 11 2+1 3 100 4+0+0 4 101 4+0+1 5 110 4+2+0 6 111 4+2+1 7 1000 8+0+0+0 8 1001 8+0+0+1 9 1010 8+0+1+0 10 1010 8+0+1+1 11 1100 8+4+0+0 12 1110 8+4+2+0 14 1111 8+4+2+1 15 10000 16+0+0+0+0 16 <ul> <li>if the number ends in 0, it is even </li> <li>when the number is equal to a power of 2, we add a new column</li> </ul>"},{"location":"computer-science/digital-information/#how-to-figure-out-the-binary-representation-of-a-decimal-value-in-binary","title":"how to figure out the binary representation of a decimal value in binary:","text":"<pre><code>1. decimal-number = 39, binary-number = ?\n2. find the highest power of 2 less than decimal-number\n3. highest-power = 32\n4. divide highest-power by 2 until you get 1\n5. 32 / 2 = 16, 16 / 2 = 8, 8 / 2 = 4, 4 / 2 = 2, 2 / 1 = 1\n6. 5 divisions\n7. current-binary-number = 1 + 5 digits\n8. binary-number = current-binary-number = 100000\n9. current-decimal-number = previous-decimal-number - highest-power\n10. current-decimal-number = 7\n11. find the highest power of 2 below current-decimal-number\n12. highest-power = 4\n13. divide highest-power by 2 until you get 1 or 0 14. 4 / 2 = 2, 2 / 2 = 0\n15. 2 divisions\n16. current-binary-number = 1 + 2 digits\n17. current-binary-number = 100\n18. binary-number = previous-binary-number + current-binary-number = 10100\n19. current-decimal-number = previous-decimal-number - highest-power\n20. current-decimal-number = 3\n21. find the highest power of 2 below current-decimal-number\n22. highest-power = 2\n23. divide highest-power by 2 until you get 1 or 0 24. 2 / 2 = 0\n25. 1 division\n26. current-binary-number = 1 + 1 digits\n27. current-binary-number = 10\n28. binary-number = previous-binary-number + current-binary-number = 10110\n29. new-decimal-number = previous-decimal-number - highest-power\n30. current-decimal-number = 1\n31. find the highest power of 2 below current-decimal-number\n32. highest-power = 0\n33. divide highest-power by 2 until you get 1 or 0 34. 0 / 2 = 0\n35. 0 division\n36. current-binary-number = 0 + 1 digits\n37. current-binary-number = 01\n38. binary-number = previous-binary-number + current-binary-number = 10111\n\nbinary-number = 10111\n</code></pre> <ul> <li>this conversion process is the basis for all encoding</li> </ul>"},{"location":"computer-science/digital-information/#bit-size-and-values","title":"bit size and values","text":"<ul> <li>with binary numbers we can store numbers that we would ordinarily represent in decimal, in a format that the computer can store, send, or receive</li> <li>as we think about values, the more digits that are in the number, the larger the potential value</li> <li>a 2 bit number can store 4 different values </li> </ul> digits different values max value x 0 1 1 xx 00 01 10 11 3 xxx 000 001 010 011 100 101 110 111 15 <ul> <li>8 bit, 16 bit, 32 bit, 64 bit and higher are all representations of the number of digits that are available to store as a binary number </li> <li>an 8 bit column has 8 possible digits and a max value of 255, or 256 total values, including 0 </li> <li>28 = 256 </li> <li>216 = 65536</li> <li>232 = 4,294,967,296</li> <li>264 = 18 quintillion</li> </ul> 1 1 1 1 1 1 1 1 128 64 32 16 8 4 2 1 <ul> <li>using these bits, a computer can store values in memory </li> <li>a programmer needs to balance the storage requirements of their applications to the amount that is available to the program</li> <li>to help manage that, developers have different sizes and types of containers called variables that they can use to store information</li> <li>each variable type has a different bit size requirement, meaning that the variable has a limited size that the programmer can store values into </li> </ul>"},{"location":"computer-science/digital-information/#overflow","title":"overflow","text":"<ul> <li>when a computer sets aside a specific amount of memory to store a value, it does so based on the number of bytes that might be required </li> <li>overflow happens when the space reserved is too small for the value it is trying to store</li> <li>the first digit in a signed number is 1 for a positive number and 0 for a negative number </li> <li>this results in weird and unpredictable errors</li> <li>the y2k bug / year 2000 but happened because programmers were only storing the last 2 digits of years and assuming the 19, which obviously caused problems when 2000 hit </li> <li>now years are stored with 4 digits, which is going to cause more problems in the year 10000</li> <li>the number of seconds in 10000 will be 252288000000</li> <li>computers store dates using binary, often by counting the number of seconds that have elapsed since a specified date</li> <li>for many systems and programming languages, dates are stored as the amount of seconds since 12:00AM, January 1st, 1970 </li> <li> <p>the date gets stored in a 32-bit binary number </p> </li> <li> <p>Date: 2038-01-19 03:14:05 UTC</p> </li> <li>Binary: 01111111 11111111 11111111 11111010</li> <li>Decimal: 2147483642</li> <li>Date: 1900-01-19 03:14:05 UTC</li> </ul>"},{"location":"computer-science/digital-information/#encoding-and-sending-text","title":"encoding and sending text","text":""},{"location":"computer-science/digital-information/#ascii-and-unicode","title":"ASCII and Unicode","text":"<ul> <li>using binary we can represent values of different types in a format that is native to a computer </li> <li>we can also do this with text </li> <li>encoding is taking text and converting to a unique code, the reverse is decoding</li> <li>the encoding and decoding have to agree on a standard</li> <li>we use numbers to represent letters </li> <li>65 = A, 97 = a</li> <li>each number is converted to binary, 8 bits, 1 byte, 256 characters </li> <li>this encoding is called ASCII, American Standard Code for Information Interchange </li> <li>ASCII was first developed in the early 1960s</li> <li>over time the system expanded to include more characters</li> <li>at a certain point there were too many symbols or glyphs in the world to represent by 256 numbers, so ASCII was at it's limit</li> <li>a new standard called Unicode uses multiple bytes to represent thousands and thousands of symbols from languages all around the world</li> <li>the web is standardized on the UTF8 format, (8bit Unicode Transformation Format)</li> <li>UTF8 is backward compatible with ASCII </li> <li>each character is represented prefixed with a U and then followed by a 4 digit hexadecimal number (U + 0044 = D)</li> <li>4 hexadecimal numbers require 2 bytes to store them, or 16 bits</li> <li>using just 2 bytes, over 65,000 symbols can be encoded and decoded</li> <li>there currently 3 plane of Unicode being used and other plane that are not used or can be customized </li> <li>planes can go all the way up to plane 16</li> <li>all in all, Unicode can store 1,114,112 symbols(called code points)</li> </ul>"},{"location":"computer-science/digital-information/#encoding-formatted-text","title":"encoding formatted text","text":"<ul> <li>when we want certain parts of text formatted, we need to mark the start point and end point so the computer knows words / sections we want formatted </li> <li>we use different markers for different formats</li> </ul>"},{"location":"computer-science/digital-information/#working-large-data","title":"working large data","text":""},{"location":"computer-science/digital-information/#file-sizes-and-bytes","title":"file sizes and bytes","text":"<ul> <li>data has a unit of measure just like distance </li> <li>the smallest amount of storage is a single bit, a single 1 or 0, on or off </li> <li>we group bits into sets of 8 to make a byte</li> <li>the byte is the base form of measurement for data size, just like meter when we measure distance</li> <li>from this base size we can use prefixes to show magnitude of size</li> <li>measurement in data size is done in multiples of 1,024, instead of 1,000, to work with binary better </li> <li>kibibits is technically the accurate way to represent 1,024, but for the most part kilobyte is the same thing</li> <li>b = bit, KB = kilobyte</li> <li>1 kilobyte (KB) = 1,024 bytes = about 2-3 paragraphs of text </li> <li>1 megabyte(MB) = 1,024 kilobytes = about a 1,000 page book </li> <li>1 gigabyte(GB) = 1,024 megabytes = about 1,000 books with 1,000 pages each</li> <li>1 terabyte(TB) = 1,024 gigabytes = about 1,000,000 books with 1,000 pages each</li> <li>1 petabyte(PB) = 1,024 terabytes = over 1 quadrillion 125 trillion 899 billion 906 million bytes</li> <li>there is also exabyte, zettabyte, yottabyte</li> <li>bandwidth = how much information can be transferred within a particular time</li> <li>a common Ethernet connection can send about 1Gb(gigabits) / second (128 MB / second)</li> </ul>"},{"location":"computer-science/digital-information/#text-compression","title":"text compression","text":"<ul> <li>compression allows data to occupy a smaller amount of space, but at the same time preserve the original data through compression protocols that encode and decode the compressed file</li> <li>compression looks through a file for matching words / patterns / sentences and replaces it with a unique Unicode character</li> <li>you perform multiple rounds of compression, then finding matching patterns of the unique Unicode characters as well </li> </ul>"},{"location":"computer-science/digital-information/#encoding-images","title":"encoding images","text":"<ul> <li>the same encoding happens for images, but the program looks for patterns of matching pixels instead</li> <li>images that are based on pixels are called bitmaps</li> <li>for a picture which is HD resolution (1920px x 1080px) it is 2,073,600 pixels of data to store</li> <li>a HD res pic would require 6,220,800 bytes (about 5.9 megabytes) to store it </li> <li>4k is 4 times HD, so it is 3,840 x 2,160(8.2 million pixel or 24 million bytes or 23 megabytes)</li> <li>with real image files there is some additional information that is stored in them, like the software that was used to make them, the owner of the file, and other information stored inside them</li> <li>so actual images will be a little bit larger than the above dimensions</li> <li>a video that is showing 30 frames per second means 30 individual images are playing each second the video plays</li> <li>an HD video that is 1 minute long is 1800 individual images that are shown in that minute</li> <li>1 minute HD = 10.42 GBs (11 billion bytes)</li> <li>1 minute 4K = 41.71 GBs</li> <li> <p>above does not include audio </p> </li> <li> <p>Vectors are another way to store images </p> </li> <li>instead of storing individual pixels, vectors store pictures using points</li> <li>instead of pixels, the points on the boxes are encoded based on a coordinate system</li> <li>the result is a much smaller file since it only contains point information for the boxes</li> <li>Vector images can also scale easily and redraw the lines proportionally when you make the image bigger</li> <li>with a bitmap the information is not the same so the image gets distorted or pixilated if it gets too big</li> <li>the more complex you make your vector, the more data it requires </li> <li>you cannot really represent photographs in vector form</li> <li>web browsers and apps can work with both formats</li> <li>a web browser can worth with bitmap formats like JPEG, PNG, and GIF</li> <li>a web browser can also work with Vector formats like SVG</li> <li>both of these are ways a browser can decode image files and render them for you to see</li> </ul>"},{"location":"computer-science/digital-information/#image-compression-and-file-formats","title":"image compression and file formats","text":"<ul> <li>in theory there are an infinite number of colors you can create through mixing red green and blue light</li> <li>at a certain point people cannot tell the subtle difference between colors</li> <li>reducing color variations is one way to reduce the size of photographs and images</li> <li>one popular ways of doing this is the GIF format</li> <li>a GIF is based on a total number of 256 colors</li> <li>the image can use either a standard 256 color palette or it can select colors from the 24-bit RGB color space </li> <li>LZW is a lossless compression format</li> <li>lossless means it can reduce the file size further without degrading the visual quality of it </li> <li>JPEG is another image format  </li> <li>JPEG compression is lossy, as it compresses to reduce the file size, it cannot be uncompressed into the exact original format, it will lossy, or lose details as it is opened and displayed again  </li> <li>JPEG has a variable amount of compression that lets you trade off size for detail</li> <li>using the JPEG format you can define the amount of loss in detail when the image is compressed</li> <li>JPEG can have little to no loss of detail, or significant amounts</li> <li>PNG (Portable Network Graphics) is another format, which is an improved version of the GIF where pixels can contain 24-bit RGB color values, or 32-bit values which also include transparency, allowing images or content that appears behind it to show through the image</li> <li>all these formats are specific to representing images on screens </li> <li>there are other formats that are for print, photography and more</li> <li>in print color is stored by the amount of various types of inks that are use in the printing process </li> <li>unlike with light, pigment uses different colors to build the rainbow of colors that can be created with CMYK (cyan, magenta, yellow, black) as the primary colors</li> <li>for photography, camera sensors capture light information that isn't processed into specific colors</li> <li>photography formats, sometimes called RAW formats contain data, not pixels and need to be processed using software to create the color for each pixel</li> <li>the RAW file stores the radiometric characteristics of the picture, which can be things such as light intensity, color, and dynamic ranges within the subject captured by the sensor</li> <li>image files can vary in type, context, and format </li> <li>pixel images can rely on compression formats that can alter the balance between size and color or size and detail</li> <li>for screens it all comes down to how each format is decoded, to let the pixel know how much light to display</li> </ul>"},{"location":"computer-science/internet/","title":"Internet","text":"<ul> <li>the internet is not a strict set of rules, it is a design philosophy</li> </ul>"},{"location":"computer-science/internet/#internet-basics","title":"internet basics","text":""},{"location":"computer-science/internet/#how-the-internet-was-born","title":"how the internet was born","text":"<ul> <li>internet can be traced back to 1960's</li> <li>what we call the internet first started as a project for the United States government</li> <li>ARPANET = Advanced Research Projects Agency Network</li> <li>ARPANET was established in 1969 by the Department of Defense as a communication network </li> <li>in order for the network to work, it needed to have a way for information to be sent reliably from one point of the network to another</li> <li>the blocks of information that are sent are called packets, and they need to be transmitted multiple times, simultaneously</li> <li>to do this a set of rules needed to be created</li> <li>in the 1970's, Vint Cerf and Robert Kahn created 2 sets of rules to do exactly that</li> <li>the Transmission Control Protocol (TCP) and Internet Protocol (IP) TCP / IPas a communication network </li> <li>in 1982 TCP / IP was introduced as the standard networking protocols on the ARPANET which remained under the control of the government through the 1980's</li> <li>in 1990 Tim Berners-Lee created an application called World Wide Web (later renamed Nexus), at the European Organization for Nuclear Research, or CERN</li> <li>using a NeXT computer Berners-Lee created the first web browser that allowed a user to navigate through pages of information using links to connect phrases to additional pages</li> <li>with this browser Berners-Lee alos created the Hypertext Transfer Protocol (HTTP) and Hypertext Markup Language (HTML)</li> <li>Berners-Lee also created the very first web server called httpd</li> </ul>"},{"location":"computer-science/internet/#who-manages-the-internet","title":"who manages the internet?","text":"<ul> <li>nobody controls the internet</li> <li>a combination of government agencies, international groups, and companies in the private sector collaborate together to keep the fundamental technologies of the internet working </li> <li>these groups form the rules that define how all of the different systems work</li> <li>the internet is formed of multiple networks that all conform to the standard protocols of the internet TCP/IP</li> <li>some of these networks are owned by private companies like your internet service provider, universities, cell phone companies and others</li> <li>all these different networks need to have a way to tell one from the other </li> <li> <p>it is like having a bunch of airports, each airport is run by a different group of people: </p> <ul> <li>you need to have a way to know that if you are going from airport A to airport C that the pilot knows where they are going</li> <li>and that the airport you are going to knows to expect your arrival </li> <li>in the case of airports an agency known as the International Association or IATA developed a system of 3 letter codes that every airport throughout the world has adopted </li> <li>if you're at SFO and your bags and ticket have JFK on it, it knows that you are headed to New York City and every airport is aware of each other</li> </ul> </li> <li> <p>ICANN = Internet Corporation for Assigned Names and Numbers </p> </li> <li>URLS = Uniform Resource Locator</li> <li>the same happens on the internet, but instead of airports there are networks</li> <li>ICANN does the same thing, it manages the names or identifiers that are part of the internet like URLS</li> <li> <p>URLs are the phrases you know for websites, portions of a website name (called a domain) are managed by ICANN</p> </li> <li> <p>for example: </p> <ul> <li>a government website in the US typically ends in .gov</li> <li>commercial sites end in .com</li> <li>international sites have their own designation</li> <li>in the US it is google.com, but in Canada it is google.ca</li> <li>Amazon in the UK is amazon.co.uk</li> </ul> </li> <li> <p>there are a few international agencies called standards bodies, like the W3C and WHATWG that are groups of people that work to develop a universally adopted set of rules(called standards) that software and hardware companies can rely on to build products that will work with the technology</p> </li> <li> <p>many of these standards bodies have individuals from private companies, and they work to add new features to languages and rules of the internet</p> </li> <li>if a new company really wants to add a new feature to their browser but it is not part of the standard rules, they might add the feature in and tell their users and fans that this awesome new feature is available to them </li> <li>if they like it they might demand that other browsers adopt it and then push for it to become a standard<ul> <li>on the other side, some companies might want to push their solution over another</li> <li>so you have a situation where the makers of the browsers have alot of power in determining what goes into the rules, known as a specification(or spec)</li> </ul> </li> </ul>"},{"location":"computer-science/internet/#addressing-routing-information","title":"addressing &amp; routing information","text":""},{"location":"computer-science/internet/#sending-and-receiving-information","title":"sending and receiving information","text":"<ul> <li> <p>everything that we create on the computer is translated into digital information using bits</p> </li> <li> <p>every message, file, or stream of information is broken down into small chunks called packets </p> </li> <li> <p>when packets are sent on the internet they usually wil travel the network together</p> </li> <li> <p>each packet contains some important information inside of it called the header </p> <ul> <li> <p>first the packet says the IP where it came from (like the return address on an envelope)</p> </li> <li> <p>if there is an err sending the packet there is an IP to return to let the sender know it did not go through, or return to the sender and confirm the packet was sent </p> </li> <li> <p>the packets then says where it is going (like the address on an envelope)</p> </li> <li> <p>a packet also says how long it is by stating the number of bytes that are in the packet, this way we know if it is complete </p> </li> <li> <p>all the packets in a message are the same size, so we know if one is not the same size as the others, we know that we have lost some data </p> </li> <li> <p>we also need to know how many packets are in a message, each packet lives within its own set </p> </li> </ul> </li> </ul>"},{"location":"computer-science/internet/#internet-protocol-ip-address","title":"internet protocol &amp; IP address","text":"<ul> <li> <p>instead of a street address, address on the internet,use numbers</p> </li> <li> <p>the use of numbers as address is one of the core concepts of the internet and is called Internet Protocol (IP)</p> </li> <li> <p>each device on the internet has an address, called an IP address</p> </li> <li> <p>there is IPv4 and IPv6 </p> </li> <li> <p>IPv4 is 4 numbers seperated by periods from 0 to 255, allowing for over 4billion possible addresses on the internet</p> </li> <li> <p>each packet that is sent has the sender and receiver address in the header, store as IP addresses </p> </li> <li> <p>there are public addresses and private ones </p> </li> <li> <p>IANA = Internet Assigned Numbers Authority</p> </li> <li> <p>IANA determines what numbers and subsets are assigned to different groups</p> </li> <li> <p>within these groups there is the public IP you have on the internet, and a public on that you have on your local network </p> </li> <li> <p>the job of a router is to router data from the public address to the local device private addresses </p> </li> </ul>"},{"location":"computer-science/internet/#scaling-up-the-internet-from-ipv4-to-ipv6","title":"scaling up the internet from IPv4 to IPv6","text":"<ul> <li> <p>in 1995 an experimental stream protocol called IPv5 was designed but was never finalized </p> </li> <li> <p>in 1995 the IETF, Internet Engineering Task Force needed to create a new way to provide addresses on the internet that would expand beyond the 4 billion limit </p> <ul> <li> <p>the result was to increase the number of bits used to store and address </p> </li> <li> <p>IPv4 uses 32 bits, IPv6 uses 128 (340 undecillion unique addresses / 340 trillion trillion trillion ), more then the amount of atoms on the surface of the planet </p> </li> <li> <p>new operating systems support something called dual stack, where both IPv4 and IPv6 are supported at the same time, which allows device to work regardless if the hardware is updated or not </p> </li> </ul> </li> <li> <p>IPV6 is represented by binary bits, organized into 8 16 bit sections</p> </li> <li> <p>each 16bit block is converted to hexadecimal and is seperated with a colon </p> </li> </ul>"},{"location":"computer-science/internet/#domain-name-server-and-dns","title":"Domain Name Server and DNS","text":"<ul> <li> <p>a domain name is a sequence of phrases that map to a giant internet-wide databae of IP address </p> </li> <li> <p>when you enter a domain name in your browser, it gets sent to a DNS </p> </li> <li> <p>the DNS holds a cache of tons of domain names and their matching IP addresses </p> </li> <li> <p>the process of using a domain name to find an IP address is called domain name resolution </p> </li> <li> <p>the .$ part of internet names is called the top level domain </p> </li> <li> <p>the parts before the custom domain is called the subdomain </p> </li> </ul>"},{"location":"computer-science/internet/#routers-redirecting-requests","title":"routers &amp; redirecting requests","text":"<ul> <li> <p>routers are the signposts that packets use to travel across the internet and over private networks within an organization </p> </li> <li> <p>using the header information in data packets, routers read the information in the header to direct packets to go to the right location </p> </li> <li> <p>when you send data from your computer, it first gets sent to the router, the router reads the header to figure out where to send it </p> <ul> <li> <p>the data could either be sent to the internet or another local devic on the network</p> </li> <li> <p>when you send data to the internet, it gets sent to your ISP and then to its destination </p> </li> </ul> </li> <li> <p>routers have a component called a configuration table, which is a set of commands that defines how the router works </p> </li> </ul>"},{"location":"computer-science/internet/#packets-fault-tolerance","title":"packets &amp; fault tolerance","text":"<ul> <li> <p>messages are broken down into small pieces of data called a packet</p> </li> <li> <p>a packet consists of about a kilobyte of information, but if you are sending a long email, an audio file, or an image, that would require that the data is broken down into dozens or even hundreds of packets, or more </p> </li> <li> <p>these chains of packets will rarely stay together as a group and will break apart and take different paths along the internet</p> </li> <li> <p>the <code>ping</code> command sends packets to a server and then requests the server to send the information back </p> </li> <li> <p>using a ping you can test how long it takes to reach or ping a server and if any packets are lost along the way </p> </li> <li> <p>fault tolerance = being able to navigate through various conditions on the internet </p> </li> <li> <p>if there are problems with certain points on the network, the internet is able reroute packets </p> </li> <li></li> </ul>"},{"location":"computer-science/internet/#reliability-and-tcp","title":"reliability and TCP","text":"<ul> <li> <p>when hundreds or thousands of packets are transmitted from 1 location to another, they can take different paths based on changing network conditions and other factors</p> </li> <li> <p>when packets get to a destination they are unorganized and sometimes not complete, so the messages need audited and reviewed in order to put it together the right way</p> </li> <li> <p>TCP = transmission control protocol </p> </li> <li> <p>TCP uses a process where it looks at all the packets in a message and checks them</p> </li> <li> <p>using the header information in each packet, it knows how many there are, how large they should be, and in which order the packets should be in</p> <ul> <li> <p>using this check list it is able to rearrange the packets, if it finds that a packet does not match the expected size or other characteristic, it is discarded and using the header information again, sends a request back to the sender for a specific package to be resent </p> </li> <li> <p>after assembly the packets received, if TCP finds that packets are missing, it goes back to the sender and asks for the items o be resent</p> </li> <li> <p>after TCP verifies that all the packets are accounted for, are in the right order, and are free of any issues, it certifies the data and the packets are merged together to recreate the original file that was on the sender's device </p> </li> </ul> </li> <li> <p>for most transmissions on the internet, the TCP method is used, which is why the IP and TCP protocols are referred to as a single item TCP/IP</p> </li> <li> <p>TCP places reliability in a higher priority than speed or latency</p> </li> <li> <p>for instances where reliability isn't as important, but speed is, there is another protocol called UDP</p> </li> <li> <p>UDP = User Diagram Protocol</p> </li> <li> <p>UDP does not do the extensive reliability checks that TCP performs, but because of this it can send information at faster rate </p> </li> </ul>"},{"location":"computer-science/internet/#web-servers","title":"web servers","text":""},{"location":"computer-science/internet/#identifying-a-server-with-urls","title":"identifying a server with URLs","text":"<ul> <li> <p>A records and CNAME records store rules for how domain names are translated to IP addresses </p> </li> <li> <p>A records are for pointing a domain name at the IP address of webserver </p> </li> <li> <p>A record = address record</p> </li> <li> <p>CNAME records are for redirecting domain names to a different domain</p> </li> </ul> <p>CNAME record = canonical name record</p>"},{"location":"computer-science/internet/#http-and-requests","title":"HTTP and requests","text":"<ul> <li> <p>HTTP = HyperText Transfer Protocol</p> </li> <li> <p>a daemon is a program that runs on a server and runs in the background and does not require any human interaction at all </p> </li> <li> <p>the daemon for most web servers is the HTTPd program, or HTTP daemon</p> </li> <li> <p>HTTPd does 1 thing, listens to requests that are routed to the server </p> </li> </ul>"},{"location":"computer-science/internet/#hypertext-and-html","title":"hypertext and HTML","text":"<ul> <li>HTML = HyperText Markup Language</li> </ul>"},{"location":"computer-science/internet/#remembering-requests-with-cookies","title":"remembering requests with cookies","text":"<ul> <li> <p>the time that you are on a site is called a session </p> </li> <li> <p>browser cookies store information about your sessions to make it easier to work with various websites and save settings or things in your shopping cart</p> </li> </ul>"},{"location":"computer-science/internet/#securing-requests-with-ssl-and-tls","title":"securing requests with SSL and TLS","text":"<ul> <li> <p>when you send information over the internet, it is publicly visible by default </p> </li> <li> <p>SSL = Secure Sockets Layer, early version of security, created by Netscape</p> </li> <li> <p>TLS = Transport Layer Security </p> </li> <li> <p>TLS performs a few basic things:</p> <ul> <li> <p>it creates and verifies a connection from the client to the server</p> </li> <li> <p>it then creates and verifies the connection from the server to the client </p> </li> <li> <p>this is called handshaking, when you shake hands, both hands need to reach out and grasp the other, so the greeting is verified by both sides</p> </li> <li> <p>when the handshake happens, TLS then encrypts the data that is being sent in both directions</p> </li> <li> <p>when it encrypts the message it is still able to preserve the header of the packets that will be used to transport the data since this all still needs to work on the TCP/IP protocol</p> </li> </ul> </li> <li> <p>authentication is done using a security certificate </p> </li> <li> <p>a certificate is granted by a known security entity that verifies that the companies, servers, and networks are who they say they are</p> </li> <li> <p>on that certificate it defines:</p> <ul> <li>the domain name that is allowed to use the certificate </li> <li>a public key that is used to encrypt the message </li> <li>the company that owns it </li> <li>when it was issued</li> <li>when it expires</li> </ul> </li> <li> <p>using the above information you are able to trust the certificate and send private information confidently between your computer and a server on the internet</p> </li> </ul>"},{"location":"computer-science/internet/#encryption","title":"encryption","text":""},{"location":"computer-science/internet/#caesars-cypher-and-keys","title":"Caesar's cypher and keys","text":"<ul> <li> <p>messages that are transmitted over the internet using protocols like TCP/IP are visible to the rest of the network </p> </li> <li> <p>so any message could be intercepted and read as you request and send information </p> </li> <li> <p>servers that handle sensitive information or products that want to offer greater encryption, such as messaging apps, online shopping services, and banking applications, need to offer a way to encrypt </p> </li> <li> <p>one of the earliest ways of encryption was called Ceasars cipher, invented by Julius Ceaser</p> </li> </ul>"},{"location":"computer-science/internet/#improving-security-with-longer-keys","title":"improving security with longer keys","text":"<ul> <li> <p>the more bits we add to a key, the more complex it becomes to solve </p> </li> <li> <p>for a long time keys on the internet were based on 128 bits </p> </li> <li> <p>using this each message as was decoded and transported over TCP/IP, via thousands or millions of packets, was considered secure </p> </li> <li> <p>with 128 bit keys there are 2 to the 128 power (339 decillion) combinations possible in the key, even then incredibly powerful computers were still able to crack security certificates that had 128-bit keys </p> </li> <li> <p>today there are 3 standard bit sizes for keys, 128-bit, 196-bit, 256-bit </p> </li> <li> <p>AES = Advanced Encryption standard</p> </li> <li> <p>AES is a standard for how electronic data is encrypted in the United States and is recognized throughout the world </p> </li> <li> <p>AES is based on a cipher called the Rijndael, in this cipher, information is organized in a 4-by-4 matrix of bytes, and each matrix has a unique key that either substitutes values, shifts rows, or mixes columns to scramble the message </p> </li> <li> <p>each one offers a greater level of security than the other, but as computers get more and more advanced, faster and smarter , new ways to secure information will need to be created to make sure that your information is safe </p> </li> </ul>"},{"location":"computer-science/internet/#symmetric-and-asymmetric-keys","title":"symmetric and asymmetric keys","text":"<ul> <li> <p>simple keys like Ceasars cipher require that both sides of the message agree and will be applied to the message before it is sent, this is called symmetric Security </p> </li> <li> <p>symmetric security works fine in situations where you have exchanged that information in private, but in the case of the internet, it wouldn't work </p> </li> <li> <p>if i want to establish a security key with a server, if i want to let that server know what the key is, i would need to send it to the server over an unsecure connection, so anyone could read what the security key is, and then potentially use it to intercept messages and crack them later on</p> <ul> <li> <p>the trick to make this work is to have two keys </p> </li> <li> <p>one that the sender uses to encrypt and send information, but is not able to be used to decrypt it </p> </li> <li> <p>the other is a key that is only on the receiver's end, and can be used to decrypt all the information that it receives, this is called asymmetric security </p> </li> <li> <p>as a sender encrypts and sends information, even if someone is able to find a key, it can be used to decrypt it, since the key works in only one way </p> </li> <li> <p>the receiver with the second key can be used to decrypt all the messages </p> </li> </ul> </li> <li> <p>cryptography and advanced mathematics make it possible to have a single master key that can be used to decrypt multiple messages, while having multiple other keys that can be used to encrypt content, these are called public keys and private keys </p> </li> <li> <p>public keys can be exchanged and shared, but they work only in one way </p> </li> <li> <p>the private key is the only way a message can be decrypted, but it is never shared since it could be used to crack any coded messages sent to the server </p> </li> <li> <p>when you are working with the internet and use secure servers using AES security keys and certificates, these are based on asymmetric security, where there are public keys that are used to encode information, and a private key, used to decode and decipher encrypted messages sent to the server </p> </li> </ul>"},{"location":"computer-science/programming/","title":"Programming Principals","text":"<ul> <li>computers are useless unless they are told exactly what to do </li> <li>since the beginning of computers, there has always been the need for someone to tell it what to do </li> <li>this is where programmers come in </li> <li>programmers take a set up steps or jobs that need to be done by a computer and convert it from our language to their language</li> </ul>"},{"location":"computer-science/programming/#control-computers-with-code","title":"control computers with code","text":""},{"location":"computer-science/programming/#history-of-programming","title":"history of programming","text":"<ul> <li>in the early 1840's Charles Babbage proposed a machine called the Analytical Engine</li> <li>it was only a proposal, no actual machine was built</li> <li>one inventive woman by the name of Ada Lovelace decided to write an article that provided detailed instructions on how to represent Bernoulli numbers, a recursive equation based in number theory on the Analytical Engine</li> <li>this article is considered the very first computer program</li> <li> <p>since then the devices that can be programmed went from: </p> <ul> <li>theoretical to physical</li> <li>manual to automatic</li> <li>analog to digital</li> </ul> </li> <li> <p>with each evolutionary step, the way we program computers needed to evolve as well</p> </li> <li>with the birth of main frame computers, data processing required instructions to be sent to the machine and interpret the instructions from the programmer</li> <li>this was then applied to data to organize and analyze it </li> <li>instructions were entered through a keyboard, but without a monitor, so everything was done through printouts on paper </li> <li>if you look carefully at text encodings, and at some programming languages, you'll see things like carriage return or print that are carryovers from those printer days from decades ago </li> <li>as computers got smaller and more powerful more languages were created </li> <li>languages were also created to serve specific types of projects and industries like mathematics and science, data storage and graphics</li> <li>today we work with programming language that can serve many different purposes </li> <li>a programmer often needs to use multiple programming languages to get a project completed</li> <li>as languages have evolved they have become specialized to complete specific tasks</li> <li>as a programmer you will use the best languages for specific tasks and combine them together to create your project</li> <li>the programming languages you learn today will continue to evolve and change in the future</li> <li>with future waves of new technology new languages with be developed to allow programmers to drive even more innovation</li> </ul>"},{"location":"computer-science/programming/#forms-of-programming","title":"forms of programming","text":"<ul> <li>as programming as evolved over the decades, the types of programming you can do have changed as well </li> <li>depending on what you want to do there are different types or forms of programming languages that work in different ways</li> <li>machine, assembly, interpreted, compiled </li> <li>imperative, OOP, functional, scripting</li> <li>JS is an example of an interpreted language </li> <li>C is an example of a compiled language</li> <li>Java and C# are examples of OOP languages</li> <li>Haskell, Scala, F# are examples of functional languages</li> <li>SQL and R is for data</li> <li>powershell, perl, and bash are examples of scripting languages</li> </ul>"},{"location":"computer-science/programming/#define-actions-using-code","title":"define actions using code","text":""},{"location":"computer-science/programming/#work-with-values-and-variables","title":"work with values and variables","text":"<ul> <li>when a programmer needs to store a value a variable is used</li> <li>when a variable is defined, the computer allocates the space needed to store a variable of a certain type </li> <li>sometimes the programmer defines what the type is that needs to be stored, like an integer</li> <li>the computer can then sometimes infer what type is needed based on the value that needs to be stored </li> <li> <p>when you define a certain type, it can only store that type of value </p> </li> <li> <p>you can take a variable and then assign its value to another variable</p> <ul> <li>some languages copy the value from one variable to another, so that their are now 2 unique values</li> <li>other languages tell a variable to point to a value that is stored in memory, so if one of those variables changes, it changes in two places</li> </ul> </li> </ul>"},{"location":"computer-science/programming/#use-functions-to-repeat-actions","title":"use functions to repeat actions","text":"<ul> <li>functions are groups of actions that a programmer defines and gives a name</li> <li>while variables are named values, functions are named actions</li> <li>the steps that take place in a program and the order they go in are called the program flow </li> <li>functions are the generic name for named groupings of code</li> <li>functions can be used in different ways throughout programming and they form the basic organization of your code </li> </ul>"},{"location":"computer-science/programming/#break-down-tasks","title":"break down tasks","text":"<ul> <li>part of a programmers job is to take complicated jobs and break them down into individual steps that cannot be broken down any further </li> <li>it is like looking at water and then drilling down to the molecules and then the atoms that form it </li> <li>you dive down to the smallest element that forms the basis of the object</li> <li>now take that principal and apply it to an action</li> <li>we take for granted so many steps that are part of a group of actions</li> <li>as a programmer you need to be as accurate and literal as possible with your code</li> <li>breaking down actions into smaller actions is critical to being successful</li> <li>with each function you write like take out the trash you need to define each statement or action that needs to happen within that to fulfill everything you expect and for the action, to be executed correctly</li> <li>when you breakdown a process or a task put yourself in someone else's shoes to see if the steps you outline make sense, if not add the clarity and details you need to make it fool proof to get the desired results</li> </ul>"},{"location":"computer-science/programming/#customize-functions-with-parameters","title":"customize functions with parameters","text":"<ul> <li>when we create functions we take actions and group them together and give them a name</li> <li>we can then call those actions using the function name and run them as often as we need in our code </li> <li>sometimes we want to customize the steps a little bit based on information we might have </li> <li>parameters allow us to used different variable inside our function, like if we needed a sales tax variable to change bases on state, we could use a parameter for it</li> </ul>"},{"location":"computer-science/programming/#variables-and-scope","title":"variables and scope","text":"<ul> <li>when we create variables we need them to hold values during our program, but how long do we need them to stick around? </li> <li>as we build programs we can define how long we want to use variables, using Scope</li> <li>Scope defines how long a variable and the memory that is used to store it, is kept and how it's available for the program</li> <li>one obvious instance of when the variable is not available anymore is when the program closes, when the program stops it releases</li> <li>all the memory that it used and frees it for other programs or systems to use</li> <li>inside of our program, if we create a variable, we can access it using the name</li> <li>on our code if we create a variable and then call a function or method, the variable is available to that method since it was already created </li> <li>if we enter into a function and create a variable inside of it, as soon as that function is complete the variable is thrown away, including the name and value</li> <li>a variable created inside a function, it is scoped to that function </li> <li>if a variable is created outside a function, and then a function changes it that variable, it changes for the entire program, it would be scoped outside of the function, and can apply to a larger portion of a program</li> <li>anything you create in a function will be gone when you have finished it </li> <li>you need to consider when and where you create your variables</li> <li>variable scope is an important part of knowing how to work with variables as you build more complex programs and code </li> </ul>"},{"location":"computer-science/programming/#return-values-from-functions","title":"return values from functions","text":"<ul> <li>functions, sometimes called methods, are tools for programmers to take common actions and to group them to call using a function name </li> <li>with a function you can send in values for it to use and perform actions on it </li> <li>you often need to get information out of a function </li> <li>because of variable's scope, any variable you create inside of it will be thrown away when the function is finished</li> <li>you need to have a way to return a value from the function when it is called</li> <li> <p>there are 3 ways to work with a value: </p> <ol> <li>use a literal, a literal is a value itself without any name or container, it is simply the value, like answer = 5*5, the 5s are literals</li> <li>use a variable, that variable has a value, and can be assigned to another variable, like secondAnswer = answer</li> <li>the third is with a function or method, you essentially use it like a variable or literal, but to do this you need to have a return value, like answerPlusFive = function(answer) {return answer + 5}</li> </ol> </li> </ul>"},{"location":"computer-science/programming/#work-with-an-api","title":"work with an API","text":"<ul> <li>as a programmer you are building rules for how to program</li> <li>you and potentially others will use these rules to build out your program over time  </li> <li> <p>examples of these rules: </p> <ul> <li>you create variables that can store certain types of values </li> <li>you create functions that perform certain actions and functions that require parameters</li> <li>you create functions that return values of certain types</li> <li>you create functions that are a combination of these</li> </ul> </li> <li> <p>with all of these mixed together you are creating a set of rules that a programmer will work with in the program</p> </li> <li>you are creating an interface, or API</li> <li>API = Application Programming Interface</li> <li>as you make more advanced programs your API will expand and get more complex</li> <li> <p>as a programmer you are doing 2 things at once:</p> <ul> <li>you are defining steps that you want the program to perform with the hardware</li> <li>you are defining the rules that you will use to build your program at the same time </li> </ul> </li> <li> <p>you start off building the private API for your Application </p> </li> <li>as you get more sophisticated with your programming and coding skills you can build a public API that others can use for their own apps and programs</li> </ul>"},{"location":"computer-science/programming/#repeat-actions-and-test-for-conditions","title":"repeat actions and test for conditions","text":""},{"location":"computer-science/programming/#capture-input-from-the-user","title":"capture input from the user","text":"<ul> <li>as a programmer you will create code that will have your program listen for events</li> <li>you will define what that event is (touch swipe pressure-change temperature-change location click)</li> <li>your program will perform actions based on defined events </li> <li>the specifics on how you do this will vary slightly based on input type </li> <li>some input happens while the program runs and happens in parallel to other things</li> <li>other types of input require that the program stops and waits for you to provide input to continue </li> <li>the first type of input is called synchronous input, where the program and input capturing happen in parallel</li> <li>the other type of input is called asynchronous, where the program must wait for input from you to in order to continue </li> <li>based on the type of program you are creating and the type of device it is for will define how you will create code for your user interaction</li> </ul>"},{"location":"computer-science/programming/#manage-different-variable-types","title":"manage different variable types","text":"<ul> <li>as you program you will be working with values of all kinds, but often you will find that things will not match up, and you will need to juggle different variable types to get your code to work</li> <li>there are different ways your program can manage differences between value types </li> <li>some ways are automatic and some you have to do yourself</li> <li>with some languages the variables are dynamically typed </li> <li>dynamically typed means that they adjust to whatever is assigned to them </li> <li>with dynamically types languages, a variable that is assigned as an unsigned integer can become a string if one is assigned to it </li> <li>sometimes a value does not match a variable type </li> <li>some languages may automatically convert that the best it can to match the variable type, like null to false</li> <li>sometimes you need to make the conversion explicit</li> <li>with some languages you need to manually convert from one type to another </li> <li>programming languages have functions and methods that can take a value and return it as a different type </li> <li>usually the tool that you are using for coding can help you see what your variable types are, but sometimes that is not possible</li> <li>in many languages there are methods that tell you what your types are, so you can make the right conversions</li> <li>it is important to remember, types do not just apply to functions and methods as well </li> <li>the parameters that define what data goes into the functions and the return values are all based on specific types</li> <li>any value, either a literal, variable, expression or function will need to be managed as you work with your program</li> </ul>"},{"location":"computer-science/programming/#create-conditional-tests","title":"create conditional tests","text":"<ul> <li>computers process in binary, yes no, 1 0 </li> <li>in programming you need to think in binary</li> <li>Boolean is a special datatype designed for this, and use equality operators</li> <li>there are 6 equality operators to choose from in programming</li> <li><code>==</code> = checks if values are equal</li> <li><code>!=</code> = checks if values are not equal</li> <li><code>&gt;</code> = checks if value is greater than other value</li> <li><code>&lt;</code> = checks if value is less than other value</li> <li><code>&gt;=</code> = checks if value is greater than or equal other value</li> <li> <p><code>&lt;=</code> = checks if value is less than or equal other value</p> </li> <li> <p>if else statements create more complex tests</p> </li> </ul>"},{"location":"computer-science/programming/#build-compound-conditional-tests","title":"build compound conditional tests","text":"<ul> <li>or = will be true if either condition is true</li> <li>and = will be true if both conditions are true</li> <li>not = returns the opposite of what the above tests would return</li> </ul>"},{"location":"computer-science/programming/#loops-arrays","title":"loops arrays","text":"<ul> <li>while loop = performs an action while a certain condition is true (or not true)</li> <li>do while loop = will run the action at least once then perform while loop </li> <li>for loop = perform an action for a specified count or amount of something</li> <li>array = one of the most basic ways to collect values as a single unit / collection in programming</li> <li>it is common to loop through arrays</li> </ul>"},{"location":"computer-science/programming/#objects-and-oop","title":"objects and OOP","text":""},{"location":"computer-science/programming/#everything-is-an-object","title":"everything is an object","text":"<ul> <li>in many languages, objects are the foundation</li> <li>in OOP languages, everything is considered an object</li> <li>objects consist of names, actions, characteristics</li> </ul>"},{"location":"computer-science/programming/#everything-is-a-class","title":"everything is a class","text":"<ul> <li>with objects everything can be defined as having characteristics, actions, and names</li> <li>to program with these, we need to have some framework or scaffolding to build objects from </li> <li>we do this using classes </li> <li>a class is a set of rules that define how a category of objects or a class of objects, look, behave, and take customization through various values and settings</li> <li> <p>within a class you define 4 things, called class members:</p> <ul> <li>class name </li> <li>properties</li> <li>methods</li> <li>constructor</li> </ul> </li> <li> <p>class members define the basic structure of a class</p> </li> <li>classes are a blueprint for objects</li> <li>you don't use a class directly, you create instances of classes</li> <li>defining a class is like creating a stack of sticky notes where every page is the same </li> <li>the sticky notes are templates that will define all the instances you create on that class </li> <li>when you take the top note off the stack you are instantiating the class <ul> <li>you are creating an instance of the class that you can use in your program</li> <li>when you instantiate a class you give the instance a unique name, an instance name</li> <li>when you create an instance and give it a name you also trigger the constructor </li> <li>the special constructor function is where you define what needs to get setup when you create the instance</li> <li>sometimes you need to set some properties or execute a method to configure part of the instance</li> <li>since it is function you can set it up to accept a value </li> <li>generally a constructor doesn't return any value, but an instance of the class </li> </ul> </li> </ul>"},{"location":"computer-science/programming/#work-with-existing-classes-and-objects","title":"work with existing classes and objects","text":"<ul> <li>as a programmer you will work with prebuilt classes that are part of the programming language and SDK (software development kit) that you will be working with </li> <li>when you create an instance of a class, you instantiate it and the code in the constructor runs</li> <li>the constructor is helpful if you need to set things up in the instance when it runs </li> <li> <p>when you work with an instance you will access properties and methods inside it, defined by the class, using the instance name</p> </li> <li> <p>a static property is the same for all properties </p> </li> <li>an example could be a count that tracks the total of all instances created from that class</li> <li>a constructor could bump that count up by 1</li> </ul>"},{"location":"computer-science/programming/#make-your-own-classes-and-objects","title":"make your own classes and objects","text":"<ul> <li>when you create a class with a property, you are by default making is accessible to everyone </li> <li>you do not always want to give unrestricted public access to your properties</li> <li>you can take members of a class and make them either private or public</li> <li>public means that anyone can access them <ul> <li>they can access properties like any other variable and public methods like any function</li> </ul> </li> <li>private properties are available only within the instance and they are hidden from anything outside of the class </li> <li>private properties can be accessed with getters and setters</li> </ul>"},{"location":"computer-science/programming/#extend-classes","title":"extend classes","text":"<ul> <li>when you create a class you are not limited to just that class, you can add properties and methods to it </li> </ul>"},{"location":"computer-science/programming/#use-polymorphism-using-interfaces","title":"use polymorphism using interfaces","text":"<ul> <li>an interface is a tool in OOP that allows you to categorize classes</li> <li>this allows you to say that anything that uses this interface, includes its methods</li> <li>when you create a variable it has to have a type</li> <li>you either define a type or it is inferred by the value that is being assigned to it </li> <li>when you have a variable that has a type you define the type based on a class</li> <li>since everything is a class that means an integer, Boolean, string, and anything else to define a variable are also classes</li> <li>if we create a variable that accepts integers we are typing that variable using the integer class </li> <li>we can type variables to be any object we want, including objects based on classes that we create ourselves</li> <li>you can type variables to interfaces instead of classes which works better in some scenarios</li> <li>this is the basis of polymorphism</li> <li>using object oriented programming, class hierarchy, and polymorphism programmers have built tons of rules and recommendations on how to create code called best practices and design patterns</li> </ul>"},{"location":"computer-science/programming/#beyond-programming","title":"beyond programming","text":""},{"location":"computer-science/programming/#debug-problems","title":"debug problems","text":"<ul> <li>there are a few ways you can go about fixing problems</li> <li>you can print out things in your code as it runs to see what is happening and pinpoint where things went wrong</li> <li>there are also tools you can use to control how your code runs</li> <li>many IDEs have a special debugging mode that allows you to interactively run your code line by line</li> <li>you can also do this with browsers using their built in developer modes</li> <li>another way is to create code for catching errors and handling them more gracefully, maybe by prompting the user for different input</li> <li>an exception is an error that a programmer can use to adjust their code</li> </ul>"},{"location":"computer-science/programming/#refactor-code-to-make-improvements","title":"refactor code to make improvements","text":"<ul> <li>coding is an iterative process, you may have to come back to code months later to adjust it, and wonder what you were thinking when you wrote it </li> <li>you maybe learned a new practice that makes the code better, or you overlooked something when you first wrote it </li> <li>when you update your code to make it work better, you are refactoring it </li> <li>refactoring is a common practice with programming</li> <li>as you add new capabilities to your programs, you will revisit and update older code</li> <li> <p>the trick with refactoring is to make sure that any changes you make won't have adverse effects on the rest of your program</p> </li> <li> <p>refactoring is not about fixing errors or crashes, it's about improving already working code in some way</p> </li> <li>there are 3 reasons why you may want to refactor your code</li> <li> <p>the first reason to refactor is to improve performance: </p> <ul> <li>sometimes based on the types of data you work with, your program might require a lot of memory or processing power</li> <li>refactoring your code to be more efficient with resources can make you programs faster </li> </ul> </li> <li> <p>second reason is to support new features:</p> <ul> <li>as you add new capabilities to your project, you might have existing sections of code that need to be updated to better support the code you add to your program</li> </ul> </li> <li> <p>the third reason to refactor your code is to improve readability:</p> <ul> <li>sometimes when you write your code it might make sense to you, but going back and cleaning things up like variable names, method names, and adding comments can make your code easier for others to understand and work with </li> </ul> </li> <li> <p>refactoring existing code is a common practice for any programmer, and keeps your code working its best and makes you a better programmer along the way </p> </li> </ul>"},{"location":"computer-science/programming/#save-progress-and-work-with-others","title":"save progress and work with others","text":"<ul> <li>working as a developer is an iterative process, as you add more capabilities to your project and re-factor existing code, you will want to keep a history of your progress</li> <li> <p>sometime changes you make do not quite work out and you need a way to go back in time to an earlier point and restore from an earlier version</p> <ul> <li>using code repositories are the main way your are able to do that </li> <li>one of the most popular methods is Git and GitHub, which is used to manage your code and work with others collaboratively on a project </li> </ul> </li> <li> <p>code repositories are essentially snapshots in time, the capture your code at a certain point called a \"commit\"</p> <ul> <li>when you finish editing your code you perform a commit that saves that point in time and the state of the code in the repository</li> <li>you provide a description and then that is saved into the repository</li> <li>as you continue to make changes even if you make additional commits, if you ever need to go back to another point, you can restore code from an earlier point in time</li> </ul> </li> <li> <p>you can create a branch in code repositories</p> </li> <li> <p>branches are points in the life of your code that you break the development up into 2 parts</p> <ul> <li>one reason could be that you are getting ready to build the next major version of your product, but you need to keep the existing version around to fix bugs and issues that might crop up while you are developing the new version</li> <li>when you are ready to release your new version, you can then manage both versions of code or merge back if you need to </li> </ul> </li> <li> <p>code repositories allow you to work collaboratively with others </p> </li> <li>coding projects can become really big and often too large for a single person to manage</li> <li>with a code repository, you can have multiple people work with different sections of code<ul> <li>when they commit their code, you will get a notification that your project has been updated by another person</li> <li>you can then compare or diff between what you have and the new code to you see if you need if you need to refactor anything that you have been working on </li> </ul> </li> </ul>"},{"location":"computer-science/programming/#build-iteratively-using-agile-development","title":"build iteratively using agile development","text":"<ul> <li>agile means that the product is designed and built over multiple phases</li> <li>with each phase work goes into adding functionality or features that either the end user can use or you need to have in place before you can do other work</li> <li> <p>each phase, sometimes called a sprint, is planned independently from one another  </p> <ul> <li>a roadmap brings it all together and plots out all the sprints that are required to release the product to market </li> </ul> </li> <li> <p>as programmer you will learn that agile is use for many projects</p> </li> </ul>"},{"location":"computer-science/programming/#create-for-multiple-platforms","title":"create for multiple platforms","text":"<ul> <li>as a programmer you will build programmers and apps for customers and users </li> <li>not all of your users might be the same </li> <li>consider they might be using different OS, devices, or browsers</li> <li>you need to plan for this reality by planning to build for multiple platforms</li> <li>there are 2 ways to make apps for multiple platforms</li> <li> <p>the first is to use first-party tools</p> <ul> <li>these are tools technologies and programming languages that are created by the makers of the operating system and ecosystem</li> <li>these tools come from companies such as google microsoft and apple</li> <li>although these tools are different the programming languages for each of them are very similar (c-sharp java swift) and are based on the same principals</li> </ul> </li> <li> <p>the alternative is to use 3rd party tools that can build applications for multiple platforms at the same time </p> <ul> <li>some of these are based on web technologies, like Cordova, while others are based on other platforms like Xamarin or Unity with C-sharp, .net</li> <li>the advantage of these is that you only need to learn 1 set of tools or technologies </li> <li>but you do trade off some platform specific-capabilities </li> </ul> </li> <li> <p>the important thing is that when learning programming you should keep in mind that you will be targeting many, many people and not all of these people will have the same devices or software</p> </li> <li>as developer you need to plan on reaching as many people as you can with your project and that may require building for multiple platforms</li> </ul>"},{"location":"computer-science/terms/","title":"Technical Terms","text":""},{"location":"computer-science/terms/#explanations","title":"explanations","text":""},{"location":"computer-science/terms/#mutability","title":"mutability","text":"<ul> <li>mutability is the ability for some set or piece of data to change</li> <li>a mutable piece of data can be changed such as the day of the week</li> </ul>"},{"location":"computer-science/terms/#immutability","title":"immutability","text":"<ul> <li>immutability is the inability for some set or piece of data to change</li> <li>an immutable piece of data cannot be changed such as the number of hours in a day </li> </ul>"},{"location":"computer-science/terms/#reassignment","title":"reassignment","text":"<ul> <li>some data can be reassigned but not technically changed  </li> <li>an example of reassignment but not mutability is someone who legally changes their name</li> <li>their birthname cannot actually be changed, but their name variable is assigned a new value</li> </ul>"},{"location":"computer-science/terms/#ascii-text","title":"ASCII text","text":"<ul> <li>there are many ways to represent information on a computer</li> <li>all methods involve defining a relationship between the information and some numbers that will be used to represent it </li> <li>computers only understand numbers and all data is converted to numeric representation</li> <li>some of these representation systems are very complex (such as compressed video files) and others are rather simple </li> <li>one of the earliest and simplest is called ASCII text </li> <li>ASCII (pronounced \"As-Key\") is short for American Standard Code for Information Interchange </li> <li>this is a simple encoding scheme that was first used on Teletype machines to map keyboard characters to numbers</li> <li>text is a simple one-to-one mapping of characters to numbers and it is very compact</li> <li>fifty characters of text translates to fifty bytes of data </li> </ul>"},{"location":"computer-science/terms/#operand","title":"operand","text":"<ul> <li>the number in a math problem that is getting operated on</li> </ul>"},{"location":"computer-science/terms/#quick-references","title":"quick references","text":""},{"location":"computer-science/HTTP/headers/","title":"HTTP Headers","text":""},{"location":"computer-science/HTTP/headers/#overview","title":"overview","text":"<ul> <li>HTTP is stateless</li> <li>this means if the client, or server,or both, need information about the state of the other (or any other info), we have to send that info along with our request or response </li> <li>this is what HTTP headers are for </li> <li>An HTTP header is a human-readable name-value pair, separated by colons, added to the HTTP request or response, which can be used to pass standard or custom information back and forth between the client and server</li> <li>a request can contain as many headers as are needed, each separated by a line-break</li> <li> <p>if you wanted to send a POST request to a CMS to create a new resource, you would first have to authenticate yourself to prove to the server that you have the correct authorization to create new resources, in it's most basic form, this type of authentication is done by sending an authentication header, with basic authentication information, a username and password</p> <ul> <li><code>Authorization: Basic ouagnagf98u983u4ng308ving4==</code></li> </ul> </li> <li> <p>in the real world, the username password combo is Base64 encoded, to ensure it does not get misunderstood at a text a string, when passed to the server</p> </li> </ul>"},{"location":"computer-science/HTTP/headers/#cookies","title":"cookies","text":"<ul> <li>if the server wants or needs the client to remember where its has been or what state it is in, like what video and how far in a client is while watching online content, it can use a set cookie header, to give the client a cookie, a small piece of data</li> <li>the next time the client visits the server it sends the cookie back, and the server brings the client to the right state, cookies like this are used everywhere on the web</li> <li>cookies are the reason why news and social media sites seem to remember where you have been and why you stay logged into sites </li> <li>even after you have closed the tab or the browser </li> <li>you may have seen warnings on some sites, telling you they use cookies to track you, this is what they are talking about</li> <li>you can see what cookies a website has sent to your browser, by looking at the cookies in the application section in your developer tools </li> <li>if you are worried about cookies stored in your browser, you can delete them by clearing the browser data</li> <li>this will log you out of any site using cookies, and will make your browser \"forget\" where it has been </li> <li>it does not actually forget anything but it forgets the cookies</li> </ul>"},{"location":"computer-science/HTTP/headers/#header-information","title":"header information","text":"<ul> <li>headers are also often used to provide information about the client or the server </li> <li>this can be anything, such as data and time information about the request / response pair </li> <li>it can be a user agent header identifying the client </li> <li>it can be server header identifying the software being used by the server</li> <li>proxy information </li> <li>security information </li> <li>cross origin resource sharing information</li> <li>with HTTP/2 and other modern technologies, we are also seeing new headers come online </li> <li>these new headers include Link, which allows us to use server Push, to push files to the client before they are requested</li> </ul>"},{"location":"computer-science/HTTP/headers/#viewing-http-headers","title":"viewing HTTP headers","text":"<ul> <li>the easiest way to see HTTP headers is through the browser developer tools</li> <li>developer tools rely on the browser to generate requests</li> <li>if you need to send custom request headers to a server to test the response, you can do so using a REST client</li> </ul>"},{"location":"computer-science/HTTP/headers/#rest","title":"REST","text":"<ul> <li>representational state transfer is a set of rules that describe how data is transferred and managed between clients and servers</li> <li>the entire web is a giant RESTful API, and you can use a REST client to interface with it </li> <li>for our purposes, a REST client is a request-only user agent that allows us to create custom request headers, send them off to a server, and inspect the response </li> <li>postman and vscode extension are REST client tools</li> </ul>"},{"location":"computer-science/HTTP/headers/#cache","title":"cache","text":""},{"location":"computer-science/HTTP/headers/#overview_1","title":"overview","text":"<ul> <li>if the server wants a client to cache(to save some data for a specific period of time), it can send one or several cache headers</li> <li>these headers tell the browser what files to save and whether cached files should be updated, and for how long they should be kept</li> <li>caching files can dramatically improve website performance, because you are not sending as many files back and forth every time you reload a page </li> <li>BUT, when files are cached in the browser, the browser will not receive any new versions of those files, until those cached files are either cleared or have expired</li> </ul>"},{"location":"computer-science/HTTP/headers/#details","title":"details","text":"<ul> <li>on your website you may have contents that are rarely updated, like your JS and CSS files</li> <li>content that is sometimes updated such as pages</li> <li>content that is updated all the time, like the front page or a new section of an information site </li> <li>both servers and clients can tell the other party to cache (literally store store for later) any files they send through HTTP</li> <li>once cached, these files will be used instead of downloading fresh ones and cannot be overwritten from the server, </li> <li>this dramatically speeds up the site and performance</li> <li>you can provide specific instructions on how long to cache the files for and under what circumstances the cached files can be overwritten </li> <li>this is all done using the cache control header </li> </ul>"},{"location":"computer-science/HTTP/headers/#cache-control","title":"cache-control","text":"<ul> <li>most commonly cache-control is used to store files in the browser to speed up future visits to the same address </li> <li>it does this by storing the files and then just using the stored files instead of downloading new ones</li> <li> <p>this done using the cache-control max-age directive</p> </li> <li> <p>the below example says please store this file for one year and use it instead of requesting to download a fresh copy during that time </p> </li> </ul> <pre><code>Cache-Control: max-age: 31536000\n</code></pre>"},{"location":"computer-science/HTTP/headers/#cache-request-directives","title":"cache request directives","text":"<pre><code>Cache-Control:\n    max-age=&lt;seconds&gt;\n    max-stale[=&lt;seconds&gt;]\nmin-fresh=&lt;seconds&gt;\n    no-cache\n    no-store\n    no-transform\n    only-if-cached\n</code></pre>"},{"location":"computer-science/HTTP/headers/#cache-response-directives","title":"cache response directives","text":"<pre><code>Cache-Control:\n    must-revalidate    no-cache\n    no-store\n    no-transform\n    public\n    private\n    proxy-revalidate\n    max-age=&lt;seconds&gt;\n    s-maxage=&lt;seconds&gt;\n</code></pre>"},{"location":"computer-science/HTTP/http-essentials/","title":"HTTP Essentials","text":"<ul> <li>Hypertext transfer protocol, a protocol used to transfer hypertext</li> <li>in this context, a protocol is a system of rules that allow communication between different entities, such as computers</li> <li>hypertext is a somewhat outdated word for text that is displayed on a computer screen, which contains links to other texts (web documents)</li> <li> <p>HTTP is the set of rules that servers and web browsers use to transfer web documents back and forth, which is why every URL starts with HTTP</p> </li> <li> <p>the core component of HTTP is the request-response pair</p> </li> </ul>"},{"location":"computer-science/HTTP/http-essentials/#http-headers","title":"HTTP headers","text":"<ul> <li>when requests and responses are sent back and forth over HTTP, we can include HTTP headers with additional information</li> <li>these headers can include:         - what type of client sent the request          - server configuration          - time and date of the response         - how long the client should store the data         - what format the data is in          - the cookies used to track sessions</li> </ul>"},{"location":"computer-science/HTTP/http-essentials/#seeing-http-in-action","title":"seeing HTTP in action","text":"<ul> <li>anytime you load something in a web browser, you are seeing HTTP work </li> <li>when using a web browser you are not actually seeing what is really happening because the browser puts a nice User Interface on top of all the code stuff happening behind the scenes</li> <li>to see what is happening behind the scenes, you need to use the browser's developer tools</li> </ul>"},{"location":"computer-science/HTTP/http-essentials/#developer-tools","title":"developer tools","text":"<ul> <li>open developer tools </li> <li>go to the network tab</li> <li>this tool can capture all the network traffic, between the browser and the server and display it to you</li> <li>the tool does not always do this by default because it uses a lot of resources</li> <li>once you've opened the network tab, make sure all is checked, and then hit reload for the page</li> <li>all the files that the browser requested from the server will be displayed</li> <li>in the transferred column you can see which files have been cached by the computer</li> <li>you can click on any of these files and see the full transaction that took place</li> <li> <p>you will see: </p> <pre><code>- the URL that was requested by the browser\n- the request method, GET majority of the time\n- the remote IP address that the URL resolved to - the status code for the response\n- the HTTP version that was used\n- request headers - response headers\n</code></pre> </li> <li> <p>to run more in depth tests on response and request headers, you can use a dedicated rest client to do so</p> <ul> <li>with these applications you can send custom request headers as plain text and get the responses back as plain text to inspect, without having to deal with the browser interface</li> </ul> </li> </ul>"},{"location":"computer-science/HTTP/http-essentials/#http-flow","title":"HTTP flow","text":"<ul> <li>imagine the whole web as a library, and you are a client looking for information</li> <li>in this library, each row in a shelf is a website </li> <li>each site / row can carry a bunch if different books (information, documents, images, audio, stylesheets, js sheets, etc.)</li> <li>when you want to see what is on one of these websites / rows, you go to the librarian and make a HTTP protocol request</li> <li>can i get the stuff from row #3?</li> <li>this request is received and handled by the librarian (representing servers on the web), who goes to the cubby, gathers up the relevant pieces that match your request, and hands them back with a response status</li> </ul>"},{"location":"computer-science/HTTP/http-essentials/#flow-of-all-http-transactions","title":"flow of all HTTP transactions","text":"<ol> <li> <p>the browser opens a TCP connection to the server </p> <ul> <li>this ensures data can be sent back and forth over the network and that the data sent from one end is put together the same way at the other end </li> <li>if the connection happens over HTTPS, TLS certificates are exchanged to ensure only the computer and the server can encrypt and decrypt the transmitted data</li> <li>this prevents anyone from being able to eaves drop on the conversation between the client and server, and steal the data they are transmitting</li> </ul> </li> <li> <p>the browser sends an HTTP message</p> <ul> <li>this message always contains an HTTP method like GET, PUT, DELETE, etc.</li> <li>the message also always contains a URL pointing at the requested resource</li> <li>the message can also contain headers like cookies, or authentication data </li> <li>the header can also contain data if the browser is submitting data to the server using the post, put, or patch methods</li> </ul> </li> <li> <p>the server performs the requested actions and sends a response back to the browser</p> <ul> <li>this response will contain a HTTP status message indicating what happened </li> <li>the response will include headers with information about the response </li> <li>the response will also return the data that was requested </li> <li>the returned data could be an HTML document, stylesheet, JS file, image, or any other type of content used in a standard website</li> </ul> </li> <li> <p>once the response is full received, the TCP connection is closed</p> <ul> <li>since HTTP is stateless we are now back to a clean state</li> </ul> </li> <li> <p>in most scenarios the HTTP transaction between a browser and a server is to receive a web document for a page or a view</p> </li> <li>this document typically holds links to CSS and JS files as well as referenced elements like images</li> <li>each of these items is fetched from their server and brought into the browser using the same HTTP flow</li> </ol>"},{"location":"computer-science/HTTP/http-essentials/#http2-multiplexing-server-push","title":"HTTP/2 multiplexing + server push","text":"<ul> <li>HTTP2 allows multiplexing, meaning multiple transactions can take place over the same TCP connection at the same time</li> <li>this new protocol also allows the server to push the data to the browser</li> <li>pushing data to the browser means if the browser requests a specific document, the server can say \"this document depends on these other files, so i will push them to you at the same time\"</li> <li>this improves performance and reduces the load time for webpages and views significantly</li> </ul>"},{"location":"computer-science/HTTP/http-essentials/#http2-vs-http11","title":"HTTP/2 vs HTTP/1.1","text":"<ul> <li>when people talk about HTTP they often refer to HTTPS and HTTP/2</li> <li>just like other technology HTTP is constantly evolving and improved to be better, stronger, faster</li> <li>the page is referring to HTTP/2</li> <li>HTTP/2 is relatively new in web terms, and as of 04/03/18 powers between 70-80% of all transactions over web</li> <li>the older protocol HTTP/1.1 is still alive and is also the fallback protocol anytime HTTP/2 fails, which means you will encounter HTTP/1.1 from time to time now and in the future</li> <li> <p>HTTP/2:         - is faster and more secure and uses compression algorithms to speed up requests         - allows for multiplexing, which means multiple files are sent over a connection at the same time         - requires an encrypted connection between the client and server through HTTPS</p> </li> <li> <p>HTTP/1.1         - uncompressed headers         - transfers only 1 file at a time over a connection         - no default encryption</p> </li> <li> <p>in an ideal world every HTTP transactions would be encrypted over a HTTPS connection using the HTTP/2 protocol</p> </li> <li>in the real world most HTTP transactions will be done using HTTPS over HTTP/2 and when that does not work they will fall back on unencrypted HTTP/1.1, which while slower still gets the job done fine</li> </ul>"},{"location":"computer-science/HTTP/http-essentials/#core-principals","title":"core principals","text":""},{"location":"computer-science/HTTP/http-essentials/#plain-language-human-readable","title":"Plain Language &amp; Human Readable","text":"<ul> <li>when you see a HTTP request or response you can read it out loud and understand what it is saying, even if you don't really know how the technology works</li> <li>for example, all HTTP request methods use simple human words (GET, POST, PUT, DELETE, CONNECT, HEAD)</li> <li>you do not need to know anything about computers or networks do get an idea of what the above verbs mean</li> </ul>"},{"location":"computer-science/HTTP/http-essentials/#stateless-protocol","title":"stateless protocol","text":"<ul> <li>this means each request sent over the protocol is unique, and no request is connected to another request</li> <li>in other words, HTTP has no memory of other requests</li> <li>if you go to a webpage with a photo gallery slideshow and it will show you the first picture, reload the page and it will show you the first picture again because HTTP has no memory if you making that first request</li> <li>this means users cannot go through sequences of content using multiple requests</li> <li>to fix this, HTTP allows sessions, which are stored states shared between the browser and the server</li> <li>if a user is flipping through a photo gallery, the browser and server can exchange information about where the visitor is in the sequence by passing information back and forth in the form of cookies</li> <li>reload a page and your browser sends a cookie to server that says \"last time we spoke, we were looking at the 3rd picture\"</li> <li>HTTP is stateless, but it is not session-less</li> </ul>"},{"location":"computer-science/HTTP/http-essentials/#requestresponse-pairs","title":"request/response pairs","text":"<ul> <li>HTTP works based on request / response pairs</li> <li>every action performed on HTTP starts with a request using one of the HTTP methods</li> <li>every action performed on HTTP ends with a response containing an HTTP status code, saying what happened to the request, along with data like headers, and content</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/","title":"HTTP terminology","text":""},{"location":"computer-science/HTTP/http-terminology/#browser","title":"browser","text":"<ul> <li>application used to access and navigate HTML documents </li> <li>browsers have many varieties aside from the normal visual browser</li> <li>other browser varieties include text-to-speech browsers, audio browsers, text-only browsers, vr, ar, mr, xr</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#user-agent","title":"user agent","text":"<ul> <li>application acting on behalf of the user </li> <li>literally an agent of the user that is typically in a browser</li> <li>commonly referred to as a client application</li> <li>normally the browser but not always, could be middleware for example</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#tcp","title":"TCP","text":"<ul> <li>short for Transmission Control Protocol</li> <li>one of the main internet protocols used by the World Wide Web, email, File Transfer Protocol, and remote administration</li> <li>when you connect to a service over the internet, you are probably using a TCP connection</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#ip","title":"IP","text":"<ul> <li>short for Internet Protocol</li> <li>the protocol actually used to transfer data between computers over a network</li> <li>every device connected to the internet as a dedicated IP address</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#url","title":"URL","text":"<ul> <li>short for Uniform Resource Locator </li> <li>an address pointing at a resource on the web </li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#dns","title":"DNS","text":"<ul> <li>short for domain name server </li> <li>DNS catalogs all domain name URLs and points them to the IP addresses of servers</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#resource","title":"resource","text":"<ul> <li>the file or files available on a server when following a URL</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#server","title":"server","text":"<ul> <li>computer on the internet running some form of data storage and sharing application, most commonly a web server application</li> <li>HTTP is a client-server protocol, meaning a client / user-agent / browser sends a request to the server and the server serves responses back to the client</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#proxy","title":"proxy","text":"<ul> <li> <p>dictionary definition</p> <pre><code>1. One appointed or authorized to act for another, especially a person appointed to vote as one wishes at a meeting.\n2. The authority to act for another.\n3. The written authorization to act in place of another.\n</code></pre> </li> <li> <p>software or hardware service acting as a middle person between clients and servers </p> </li> <li>proxies are often used when the IP address of a server needs to be hidden, or when a client or server sits behind some kind of network barrier like a firewall</li> <li>the proxy is quite literally a proxy, handing data back and forth between the client and server</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#request-response-pairs","title":"request-response pairs","text":"<ul> <li>clients and servers communicate over HTTP using request-response pairs</li> <li>a request is sent and a response is returned </li> <li> <p>the client request contains:</p> <pre><code>- a request method, describing what action is requested\n- an address pointing to a resource - other information about the client\n- if a client is trying to send information to the server, that information is also packaged in the request as a payload\n</code></pre> </li> <li> <p>the response is literally a response to the request, it contains:</p> <pre><code>- a status response code explaining what happened\n- information about how the response was handled\n- any data requested if the response was successful\n</code></pre> </li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#header","title":"header","text":"<ul> <li> <p>requests and responses use HTTP headers to: </p> <pre><code>- pass information back and forth\n- identify themselves \n- explain what they want\n</code></pre> </li> <li> <p>every request and response as a header and some also have payloads (the data that is transferred)</p> </li> <li>the header contains metadata about the request facilitating communication between clients and servers </li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#http-request-method-verb","title":"HTTP request method / verb","text":"<ul> <li>every HTTP request contains a method(a verb) explaining what action the sender wants to perform on the resource</li> <li>the request methods include:         - GET to get something         - PUT to put something         - UPDATE to update something          - DELETE to delete something</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#status-response-code","title":"Status Response Code","text":"<ul> <li>the header of a HTTP response always contains a status response code </li> <li>numerical code in the 100 to 500 range describing what type of response the server sent back to the client</li> <li>different number ranges are used for different types of responses:          - 100s for information          - 200s for success          - 300s for redirection          - 400s for client error          - 500s for server error </li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#cache","title":"cache","text":"<ul> <li> <p>dictionary definitions:</p> <pre><code>1. An amount of goods or valuables, especially when kept in a concealed or hard-to-reach place.\n2. The concealed or hard-to-reach place used for storing a cache.\n3. A fast storage buffer in the central processing unit of a computer.\n</code></pre> </li> <li> <p>method for storing data on the client or the server to speed up performance</p> </li> <li>literally store data for a length of time to speed up transfers and performance</li> <li>for example, when you visit a regular website, your browser will likely download the CSS files for that website once, and then cache it in it's memory so when you navigate to the next page or come back to the site later, you don't have to re-download that CSS file</li> <li> <p>websites and web servers can instruct clients to:             - cache files          - clear cached files          - update specific cached files</p> </li> <li> <p>this is done through instructions passed in a cache header </p> </li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#stateless","title":"stateless","text":"<ul> <li>HTTP is stateless, meaning every request and response is unique, and no state is stored</li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#cookie","title":"cookie","text":"<ul> <li>used to create stateful HTTP sessions, and notify the client and server what state each other is in</li> <li>string of data passed back and forth between the client and server to create a stateful session </li> <li>this is how once you have logged into a website, you stay logged in </li> </ul>"},{"location":"computer-science/HTTP/http-terminology/#session","title":"session","text":"<ul> <li>clients and servers can share information about states by passing information back and forth, creating a session</li> <li>when you login to a website, you typically stayed logged in </li> <li>this happens because the server has placed a cookie in your browser, in it's cache</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/","title":"Requests and Responses","text":"<ul> <li>the core component of HTTP is the request-response pair</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#anatomy-of-a-url","title":"anatomy of a URL","text":"<ul> <li>to get access to information on the web, you need to know the address of that information </li> <li>this is what the Uniform Resource Locator is for</li> <li>URL is a human-readable address describing where on the web a particular resource is located</li> <li> <p>a URL has two main parts: </p> <ol> <li>a protocol declaration, such as https:// </li> <li>a URN, Universal Resource Name, which provides the location of the resource</li> </ol> </li> <li> <p>the protocol declaration states how we are accessing the resource, using the http methods and transport layer</p> </li> <li> <p>the URN itself has different pieces: </p> <ol> <li>the host name, such as example.com, which is registered at a DNS (domain name service), which points to a dedicated server IP address somewhere on the web</li> <li>next we have the implied and invisible connection port, stating which port we want to connect with on the server, for HTTP connections the default port is 80, for HTTPS the default is 443</li> <li>after the host and port is the resource path, which is the file location within the server </li> <li>lastly is an optional URL query such as https://example.com/search?q=my-search</li> </ol> </li> <li> <p>if the server uses the default port we do not see the port declared</p> </li> <li>if the server uses another port or we want to access another port, like 3000, that port can be declared using a colon, like localhost:8080</li> <li>the default names for web documents are index.html and default.htm or something similiar</li> <li>if we request a folder without a file specification, the server and browser automatically look for the default-named files</li> <li>if we are looking for something else, like contact.html or about.html, it needs to be requested specifically</li> <li>URL queries start with a ? and multiple can be strung together using an ampersand &amp;</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#http-methods","title":"HTTP methods","text":"<ul> <li>every request sent over the HTTP protocol includes a method, aka a verb</li> <li>this method tells the server what type of action we want to perform with the request</li> <li>there are a limited set of these methods available and some are more used than others</li> <li>for standard web transactions, we typically only use 3 (GET, POST, and DELETE)</li> <li>the above 3 are not the only methods available to use</li> <li> <p>methods include:</p> <pre><code>- GET \n- POST \n- PUT \n- PATCH \n- DELETE\n- HEAD \n- OPTIONS \n- TRACE\n</code></pre> </li> <li> <p>each of the HTTP methods has it's own request / response pair </p> </li> <li>some methods require more information than others</li> <li>to send data to the server, we have 3 different methods (POST PUT PATCH)</li> <li>there are also 3 different methods to get data from server, without really touching the content(HEAD OPTIONS TRACE)</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#get","title":"GET","text":"<ul> <li>the most frequently used HTTP method is GET</li> <li>it is also the most simple</li> <li>a GET request for a public resource only needs the method and the URL to work</li> <li>if the resource sits behind a security layer, the request typically also needs an authorization header, containing an encrypted username and password pair, and may require a cookie containing an authentication token</li> <li>if a get request if successful, a 200 OK HTTP status is returned, along with the requested data</li> <li>if a GET request does not work, the 404 Not Found status is returned, telling you the resource literally cannot be found at this address</li> <li>if the user does not have the correct access authorization,a 405 Not Allowed status is returned and if the resource is blocked by the server a 403 forbidden status is returned</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#post","title":"POST","text":"<ul> <li>used for sending data to server</li> <li>is the one used most often, as it is the one used whenever you submit a form on a webpage</li> <li>a POST request asks the server to create a new resource, and give it an id for future retrieval</li> <li>because POST requests make changes to the server, they typically need an authorization header</li> <li>a successful POST request returns a 201 Created HTTP status, along with a link to the new resource ID, and a response header</li> <li>if the resource requested from a POST request already exists, the server returns a 409 conflict status</li> <li>if the POST request resource is sent to a resource that cannot create new resources then you get a 404 Not Found HTTP status in return</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#put","title":"PUT","text":"<ul> <li>used to update a some or all contents of a resource with the contents of a request</li> <li>like POST, PUT typically requires an authorization header</li> <li>unlike POST, which just contains the contents of a resource, a PUT request contains the ID of a resource and the new content to be updated / added to that resource</li> <li>if the resource already exists, the existing contents in the resource are replaces with the contents in the PUT request</li> <li>if no resource with this ID exists, the server will in some cases allow a new resource to be created, or you will get an error message</li> <li>a successful PUT request returns a 200 OK status</li> <li>if there is no content on the server a 204 No Content status is returned </li> <li>if the id does not match an existing resource, a 404 Not Found status is returned</li> <li>if a PUT request is sent to a resource that cannot be updated, a 405 Method Not Allowed status is returned</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#patch","title":"PATCH","text":"<ul> <li>used to modify an existing resource</li> <li>while PUT updates a resource by replacing content, PATCH can carry along instructions on how to modify the existing resource, without necessarily replacing data </li> <li>PATCH also typically requires an authorization header and returns the same status as PUT</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#delete","title":"DELETE","text":"<ul> <li>deletes a specified resource</li> <li>a DELETE request must contain the id for the resource and an authorization header</li> <li>if you try to delete a resource you are not allowed to delete, you'll get a 405 Method Not Allowed Status</li> <li>what actually happens on a server when you send a DELETE request varies from server to server</li> <li>in some cases you delete a database entry</li> <li>in other cases you change the status of a database entry, without actually removing content </li> <li>it all depends on the design of the server you are interacting with </li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#head","title":"HEAD","text":"<ul> <li>returns just the HEAD section of the response </li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#options","title":"OPTIONS","text":"<ul> <li>returns a description of the communication options for the target resource</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#trace","title":"TRACE","text":"<ul> <li>creates a loop back of the request message, effectively telling the client where the request ended up </li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#http-status-codes","title":"HTTP status codes","text":"<ul> <li>anytime you send a HTTP request to a server you will get a response, even if the response is that something went wrong </li> <li>this response starts with a HTTP status code, explaining what happened on the server and how your request was handled </li> <li>the client can use these status codes to identify successes and failures and automatically respond with next steps</li> <li>the HTTP response status codes are split into 5 main groupings to (100 200 300 400 500) codes </li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#1xx-information","title":"1xx information","text":"<ul> <li>informational and rarely encountered </li> <li>used to inform the client of the status of the server </li> <li>102 Processing tells the client to wait for the server to finish</li> <li>100 Continue tells the client the server has received the request headers and is ready for the rest of the request body</li> <li>the last one is typically encountered when sending POST requests with a large data body</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#2xx-success","title":"2xx success","text":"<ul> <li>status codes of the 2xx format are success messages</li> <li>these are common codes including 200 OK</li> <li>200 OK means the request was successful </li> <li>201 Created means the request was successful and a new resource was create</li> <li>204 No Content means the server processed the request but returned no content</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#3xx-redirection","title":"3xx redirection","text":"<ul> <li>indicates redirection </li> <li>the client is provided with a new URL to follow to get the requested resource </li> <li>301 Moved Permanently which tells the client \"use this new URI for all future request\"</li> <li>302 Found which technically means \"resource temporarily redirected to this other URI\", but is most often used to mean \"the response to this resource is actually found at this other URI\", which is the real job of 303 See Other</li> <li>303 See Other ^ </li> <li>307 Temporary redirect </li> <li>308 Permanent redirect</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#4xx-client-error","title":"4xx client error","text":"<ul> <li>signal client errors</li> <li>400 Bad request = the request is either malformed or too large or something similar</li> <li>401 Unauthorized = the client lacks proper authentication to access the resource </li> <li>403 Forbidden = the request is refused by the server, typically because the client is not logged in or does not have the correct permissions</li> <li>404 Not found = the resource doesn't exist</li> <li>405 Method not allowed = means the HTTP verb / request method, such as \"POST\" was used on a resource that can only receive a certain method like GET</li> </ul>"},{"location":"computer-science/HTTP/requests-responses/#5xx-server-error","title":"5xx server error","text":"<ul> <li> <p>signal server errors </p> </li> <li> <p>500 internal server error, meaning something went wrong on the server </p> </li> <li>502 bad gateway, meaning the server acts as a literal gateway or proxy and received an invalid response from wherever it was trying to connect to </li> <li>503 service unavailable, encountered when a server is overloaded, or temporarily unavailable or something else goes wrong</li> </ul>"},{"location":"creative/camera-basics/","title":"Camera Basics","text":""},{"location":"creative/camera-basics/#primary-features","title":"Primary Features","text":"<ul> <li>shutter speed, ISO, aperture</li> </ul>"},{"location":"creative/camera-basics/#iso","title":"ISO","text":"<ul> <li>cameras / film / sensor sensitivity to light</li> <li>a measure of sensitivity to light</li> <li>set the ISO first and then set the shutter and aperture</li> <li>as the ISO setting is raised higher, the image appears to be brighter and the background becomes more \"fuzzy\"</li> <li>the background \"fuzziness\" is referred to as being noisy</li> <li>for best practices, you want to keep the ISO as low as possible, and then you use your shutter and aperture to give you a good exposure</li> <li>keeping the ISO low will give you nice, smooth, rich colors and low noise</li> </ul>"},{"location":"creative/camera-basics/#aperture","title":"aperture","text":"<ul> <li>the measurement of how open or close the iris in the lens is </li> <li>allows more or less light to come through </li> <li>controls your depth of field </li> <li>some lenses go as small as 1-2 inches depth of field as opposed to others which give you as wide of field as you could need, such as covering mountain ranges, valleys, etc </li> <li>phone cameras come with a very wide depth of field</li> <li>aperture is controlled by an F-stop number</li> <li>F-stop is a measurement of the distance of the opening of the aperture to the inner edge of the diameter of the lens </li> <li>the lower the F-stop number the more open it is </li> <li>the more open it is / lower F-stop number is, the more shallow the depth of field</li> <li>a lower F-stop can put an object more in focus from the background </li> <li>a higher F-stop puts an object more even with the background, which would not be ideal for something like a personal photo shoot in a downtown city</li> <li>lowering the F-stop can make a picture of a crowd become a picture of a single person </li> </ul>"},{"location":"creative/camera-basics/#shutter-speed","title":"shutter speed","text":"<ul> <li>the slower the shutter speed, the more it allows light to be absorbed by the lens </li> <li>a faster shutter speed is what you would use when it is bright and sunny outside and you do not want your image to be over exposed or blown out </li> <li>when someone is shaking their head, a fast shutter speed will make their face appear as if they were not moving, a slow shutter speed will make it look like they were moving and look blurry</li> <li>1 / 400 of a second is generally fast enough to stop human motion, if someone is running it would capture them mid stride and catch a clear image that make it look like they were posing </li> </ul>"},{"location":"creative/camera-basics/#av-tv-a-s","title":"AV / TV / A / S","text":"<ul> <li>aperture value / time value / aperture / shutter</li> <li>adjusts the settings for said values on the camera</li> <li>allows camera to automatically calculate aperture based on shutter speed or type of shot you are trying to get </li> </ul>"},{"location":"creative/emojis/","title":"Emojis","text":""},{"location":"creative/emojis/#smileys","title":"smileys","text":"<p>\ud83d\ude00 \ud83d\ude03 \ud83d\ude04 \ud83d\ude01 \ud83d\ude06 \ud83d\ude05 \ud83d\ude02 \ud83e\udd23 \ud83e\udd72 \u263a\ufe0f  \ud83d\ude0a \ud83d\ude07 \ud83d\ude42 \ud83d\ude43 \ud83d\ude09 \ud83d\ude0c \ud83d\ude0d \ud83e\udd70 \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \ud83d\ude0b \ud83d\ude1b \ud83d\ude1d \ud83d\ude1c \ud83e\udd2a \ud83e\udd28 \ud83e\uddd0 \ud83e\udd13 \ud83d\ude0e \ud83e\udd78 \ud83e\udd29 \ud83e\udd73 \ud83d\ude0f \ud83d\ude12 \ud83d\ude1e \ud83d\ude14 \ud83d\ude1f \ud83d\ude15 \ud83d\ude41 \u2639\ufe0f  \ud83d\ude23 \ud83d\ude16 \ud83d\ude2b \ud83d\ude29 \ud83e\udd7a \ud83d\ude22 \ud83d\ude2d \ud83d\ude24 \ud83d\ude20 \ud83d\ude21 \ud83e\udd2c \ud83e\udd2f \ud83d\ude33 \ud83e\udd75 \ud83e\udd76 \ud83d\ude31 \ud83d\ude28 \ud83d\ude30 \ud83d\ude25 \ud83d\ude13 \ud83e\udd17 \ud83e\udd14 \ud83e\udd2d \ud83e\udd2b \ud83e\udd25 \ud83d\ude36 \ud83d\ude10 \ud83d\ude11 \ud83d\ude2c \ud83d\ude44 \ud83d\ude2f \ud83d\ude26 \ud83d\ude27 \ud83d\ude2e \ud83d\ude32 \ud83e\udd71 \ud83d\ude34 \ud83e\udd24 \ud83d\ude2a \ud83d\ude35 \ud83e\udd10 \ud83e\udd74 \ud83e\udd22 \ud83e\udd2e \ud83e\udd27 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd11 \ud83e\udd20 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83e\udd21 \ud83d\udca9 \ud83d\udc7b \ud83d\udc80 \u2620\ufe0f \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83c\udf83 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e</p>"},{"location":"creative/emojis/#people-and-fantasy","title":"people and fantasy","text":"<p>\ud83d\udc76 \ud83d\udc67 \ud83e\uddd2 \ud83d\udc66 \ud83d\udc69 \ud83e\uddd1 \ud83d\udc68 \ud83d\udc69\u200d\ud83e\uddb1 \ud83e\uddd1\u200d\ud83e\uddb1 \ud83d\udc68\u200d\ud83e\uddb1 \ud83d\udc69\u200d\ud83e\uddb0 \ud83e\uddd1\u200d\ud83e\uddb0 \ud83d\udc68\u200d\ud83e\uddb0 \ud83d\udc71\u200d\u2640\ufe0f \ud83d\udc71 \ud83d\udc71\u200d\u2642\ufe0f \ud83d\udc69\u200d\ud83e\uddb3 \ud83e\uddd1\u200d\ud83e\uddb3 \ud83d\udc68\u200d\ud83e\uddb3 \ud83d\udc69\u200d\ud83e\uddb2 \ud83e\uddd1\u200d\ud83e\uddb2 \ud83d\udc68\u200d\ud83e\uddb2 \ud83e\uddd4 \ud83d\udc75 \ud83e\uddd3 \ud83d\udc74 \ud83d\udc72 \ud83d\udc73\u200d\u2640\ufe0f \ud83d\udc73 \ud83d\udc73\u200d\u2642\ufe0f \ud83e\uddd5 \ud83d\udc6e\u200d\u2640\ufe0f \ud83d\udc6e \ud83d\udc6e\u200d\u2642\ufe0f \ud83d\udc77\u200d\u2640\ufe0f \ud83d\udc77 \ud83d\udc77\u200d\u2642\ufe0f \ud83d\udc82\u200d\u2640\ufe0f \ud83d\udc82 \ud83d\udc82\u200d\u2642\ufe0f \ud83d\udd75\ufe0f\u200d\u2640\ufe0f \ud83d\udd75\ufe0f \ud83d\udd75\ufe0f\u200d\u2642\ufe0f \ud83d\udc69\u200d\u2695\ufe0f \ud83e\uddd1\u200d\u2695\ufe0f \ud83d\udc68\u200d\u2695\ufe0f \ud83d\udc69\u200d\ud83c\udf3e \ud83e\uddd1\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf73 \ud83e\uddd1\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf93 \ud83e\uddd1\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udfa4 \ud83e\uddd1\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfeb \ud83e\uddd1\u200d\ud83c\udfeb \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfed \ud83e\uddd1\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddd1\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbc \ud83e\uddd1\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udd27 \ud83e\uddd1\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd2c \ud83e\uddd1\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83c\udfa8 \ud83e\uddd1\u200d\ud83c\udfa8 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83d\ude92 \ud83e\uddd1\u200d\ud83d\ude92 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc69\u200d\u2708\ufe0f \ud83e\uddd1\u200d\u2708\ufe0f \ud83d\udc68\u200d\u2708\ufe0f \ud83d\udc69\u200d\ud83d\ude80 \ud83e\uddd1\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc69\u200d\u2696\ufe0f \ud83e\uddd1\u200d\u2696\ufe0f \ud83d\udc68\u200d\u2696\ufe0f \ud83d\udc70\u200d\u2640\ufe0f \ud83d\udc70 \ud83d\udc70\u200d\u2642\ufe0f \ud83e\udd35\u200d\u2640\ufe0f \ud83e\udd35 \ud83e\udd35\u200d\u2642\ufe0f \ud83d\udc78 \ud83e\udd34 \ud83e\udd77 \ud83e\uddb8\u200d\u2640\ufe0f \ud83e\uddb8 \ud83e\uddb8\u200d\u2642\ufe0f \ud83e\uddb9\u200d\u2640\ufe0f \ud83e\uddb9 \ud83e\uddb9\u200d\u2642\ufe0f \ud83e\udd36 \ud83e\uddd1\u200d\ud83c\udf84 \ud83c\udf85 \ud83e\uddd9\u200d\u2640\ufe0f \ud83e\uddd9 \ud83e\uddd9\u200d\u2642\ufe0f \ud83e\udddd\u200d\u2640\ufe0f \ud83e\udddd \ud83e\udddd\u200d\u2642\ufe0f \ud83e\udddb\u200d\u2640\ufe0f \ud83e\udddb \ud83e\udddb\u200d\u2642\ufe0f \ud83e\udddf\u200d\u2640\ufe0f \ud83e\udddf \ud83e\udddf\u200d\u2642\ufe0f \ud83e\uddde\u200d\u2640\ufe0f \ud83e\uddde \ud83e\uddde\u200d\u2642\ufe0f \ud83e\udddc\u200d\u2640\ufe0f \ud83e\udddc \ud83e\udddc\u200d\u2642\ufe0f \ud83e\uddda\u200d\u2640\ufe0f \ud83e\uddda \ud83e\uddda\u200d\u2642\ufe0f \ud83d\udc7c \ud83e\udd30 \ud83e\udd31 \ud83d\udc69\u200d\ud83c\udf7c \ud83e\uddd1\u200d\ud83c\udf7c \ud83d\udc68\u200d\ud83c\udf7c \ud83d\ude47\u200d\u2640\ufe0f \ud83d\ude47 \ud83d\ude47\u200d\u2642\ufe0f \ud83d\udc81\u200d\u2640\ufe0f \ud83d\udc81 \ud83d\udc81\u200d\u2642\ufe0f \ud83d\ude45\u200d\u2640\ufe0f \ud83d\ude45 \ud83d\ude45\u200d\u2642\ufe0f \ud83d\ude46\u200d\u2640\ufe0f \ud83d\ude46 \ud83d\ude46\u200d\u2642\ufe0f \ud83d\ude4b\u200d\u2640\ufe0f \ud83d\ude4b \ud83d\ude4b\u200d\u2642\ufe0f \ud83e\uddcf\u200d\u2640\ufe0f \ud83e\uddcf \ud83e\uddcf\u200d\u2642\ufe0f \ud83e\udd26\u200d\u2640\ufe0f \ud83e\udd26 \ud83e\udd26\u200d\u2642\ufe0f \ud83e\udd37\u200d\u2640\ufe0f \ud83e\udd37 \ud83e\udd37\u200d\u2642\ufe0f \ud83d\ude4e\u200d\u2640\ufe0f \ud83d\ude4e \ud83d\ude4e\u200d\u2642\ufe0f \ud83d\ude4d\u200d\u2640\ufe0f \ud83d\ude4d \ud83d\ude4d\u200d\u2642\ufe0f \ud83d\udc87\u200d\u2640\ufe0f \ud83d\udc87 \ud83d\udc87\u200d\u2642\ufe0f \ud83d\udc86\u200d\u2640\ufe0f \ud83d\udc86 \ud83d\udc86\u200d\u2642\ufe0f \ud83e\uddd6\u200d\u2640\ufe0f \ud83e\uddd6 \ud83e\uddd6\u200d\u2642\ufe0f \ud83d\udc85 \ud83e\udd33 \ud83d\udc83 \ud83d\udd7a \ud83d\udc6f\u200d\u2640\ufe0f \ud83d\udc6f \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udd74 \ud83d\udc69\u200d\ud83e\uddbd \ud83e\uddd1\u200d\ud83e\uddbd \ud83d\udc68\u200d\ud83e\uddbd \ud83d\udc69\u200d\ud83e\uddbc \ud83e\uddd1\u200d\ud83e\uddbc \ud83d\udc68\u200d\ud83e\uddbc \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udeb6 \ud83d\udeb6\u200d\u2642\ufe0f \ud83d\udc69\u200d\ud83e\uddaf \ud83e\uddd1\u200d\ud83e\uddaf \ud83d\udc68\u200d\ud83e\uddaf \ud83e\uddce\u200d\u2640\ufe0f \ud83e\uddce \ud83e\uddce\u200d\u2642\ufe0f \ud83c\udfc3\u200d\u2640\ufe0f \ud83c\udfc3 \ud83c\udfc3\u200d\u2642\ufe0f \ud83e\uddcd\u200d\u2640\ufe0f \ud83e\uddcd \ud83e\uddcd\u200d\u2642\ufe0f \ud83d\udc6d \ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 \ud83d\udc6c \ud83d\udc6b \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69 \ud83d\udc91 \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69 \ud83d\udc8f \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udec2</p>"},{"location":"creative/emojis/#clothing-and-accessories","title":"clothing and accessories","text":"<p>\ud83e\uddf3 \ud83c\udf02 \u2602\ufe0f \ud83e\uddf5 \ud83e\udea1 \ud83e\udea2 \ud83e\uddf6 \ud83d\udc53 \ud83d\udd76 \ud83e\udd7d \ud83e\udd7c \ud83e\uddba \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83e\udde3 \ud83e\udde4 \ud83e\udde5 \ud83e\udde6 \ud83d\udc57 \ud83d\udc58 \ud83e\udd7b \ud83e\ude74 \ud83e\ude71 \ud83e\ude72 \ud83e\ude73 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83e\udd7e \ud83e\udd7f \ud83d\udc60 \ud83d\udc61 \ud83e\ude70 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \ud83e\udde2 \u26d1 \ud83e\ude96 \ud83d\udc84 \ud83d\udc8d \ud83d\udcbc</p>"},{"location":"creative/emojis/#gestures-and-body-parts","title":"gestures and body parts","text":"<p>\ud83d\udc4b \ud83e\udd1a \u270b \ud83d\udd96 \ud83d\udc4c \ud83e\udd0c \ud83e\udd0f \u270c\ufe0f  \ud83e\udd1e \ud83e\udd1f \ud83e\udd18 \ud83e\udd19 \ud83d\udc48 \ud83d\udc49 \ud83d\udc46 \ud83d\udd95 \ud83d\udc47 \u261d\ufe0f \ud83d\udc4d \ud83d\udc4e \u270a \ud83d\udc4a \ud83e\udd1b \ud83e\udd1c \ud83d\udc4f \ud83d\ude4c \ud83d\udc50 \ud83e\udd32 \ud83e\udd1d \ud83d\ude4f \u270d\ufe0f \ud83d\udc85 \ud83e\udd33 \ud83d\udcaa \ud83e\uddbe \ud83e\uddb5 \ud83e\uddbf \ud83e\uddb6 \ud83d\udc63 \ud83d\udc42 \ud83e\uddbb \ud83d\udc43 \ud83e\udec0 \ud83e\udec1 \ud83e\udde0 \ud83e\uddb7 \ud83e\uddb4 \ud83d\udc40 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83e\ude78</p>"},{"location":"creative/emojis/#animals-and-nature","title":"animals and nature","text":"<p>\ud83d\udc36 \ud83d\udc31 \ud83d\udc2d \ud83d\udc39 \ud83d\udc30 \ud83e\udd8a \ud83d\udc3b \ud83d\udc3c \ud83d\udc3b \u2744\ufe0f  \ud83d\udc28 \ud83d\udc2f \ud83e\udd81 \ud83d\udc2e \ud83d\udc37 \ud83d\udc3d \ud83d\udc38 \ud83d\udc35 \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc12 \ud83d\udc14 \ud83d\udc27 \ud83d\udc26 \ud83d\udc24 \ud83d\udc23 \ud83d\udc25 \ud83e\udd86 \ud83e\udd85 \ud83e\udd89 \ud83e\udd87 \ud83d\udc3a \ud83d\udc17 \ud83d\udc34 \ud83e\udd84 \ud83d\udc1d \ud83e\udeb1 \ud83d\udc1b \ud83e\udd8b \ud83d\udc0c \ud83d\udc1e \ud83d\udc1c \ud83e\udeb0 \ud83e\udeb2 \ud83e\udeb3 \ud83e\udd9f \ud83e\udd97  \ud83e\udd82 \ud83d\udc22 \ud83d\udc0d \ud83e\udd8e \ud83e\udd96 \ud83e\udd95 \ud83d\udc19 \ud83e\udd91 \ud83e\udd90 \ud83e\udd9e \ud83e\udd80 \ud83d\udc21 \ud83d\udc20 \ud83d\udc1f \ud83d\udc2c \ud83d\udc33 \ud83d\udc0b \ud83e\udd88 \ud83d\udc0a \ud83d\udc05 \ud83d\udc06 \ud83e\udd93 \ud83e\udd8d \ud83e\udda7 \ud83e\udda3 \ud83d\udc18 \ud83e\udd9b \ud83e\udd8f \ud83d\udc2a \ud83d\udc2b \ud83e\udd92 \ud83e\udd98 \ud83e\uddac \ud83d\udc03 \ud83d\udc02 \ud83d\udc04 \ud83d\udc0e \ud83d\udc16 \ud83d\udc0f \ud83d\udc11 \ud83e\udd99 \ud83d\udc10 \ud83e\udd8c \ud83d\udc15 \ud83d\udc29 \ud83e\uddae \ud83d\udc15 \ud83e\uddba \ud83d\udc08 \ud83d\udc08 \ud83e\udeb6 \ud83d\udc13 \ud83e\udd83 \ud83e\udda4 \ud83e\udd9a \ud83e\udd9c \ud83e\udda2 \ud83e\udda9  \ud83d\udc07 \ud83e\udd9d \ud83e\udda8 \ud83e\udda1 \ud83e\uddab \ud83e\udda6 \ud83e\udda5 \ud83d\udc01 \ud83d\udc00 \ud83d\udc3f \ud83e\udd94 \ud83d\udc3e \ud83d\udc09 \ud83d\udc32 \ud83c\udf35 \ud83c\udf84 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83e\udeb5 \ud83c\udf31 \ud83c\udf3f \u2618\ufe0f \ud83c\udf40 \ud83c\udf8d \ud83e\udeb4 \ud83c\udf8b \ud83c\udf43 \ud83c\udf42 \ud83c\udf41 \ud83c\udf44 \ud83d\udc1a \ud83e\udea8 \ud83c\udf3e \ud83d\udc90 \ud83c\udf37 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf38 \ud83c\udf3c \ud83c\udf3b \ud83c\udf1e \ud83c\udf1d \ud83c\udf1b \ud83c\udf1c \ud83c\udf1a \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf19 \ud83c\udf0e \ud83c\udf0d \ud83c\udf0f \ud83e\ude90 \ud83d\udcab \u2b50\ufe0f \ud83c\udf1f \u2728 \u26a1\ufe0f \u2604\ufe0f \ud83d\udca5 \ud83d\udd25 \ud83c\udf08 \u2600\ufe0f</p>"},{"location":"creative/emojis/#food-and-drink","title":"food and drink","text":"<p>\ud83c\udf4f \ud83c\udf4e \ud83c\udf50 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf49 \ud83c\udf47 \ud83c\udf53 \ud83e\uded0 \ud83c\udf48 \ud83c\udf52 \ud83c\udf51 \ud83e\udd6d \ud83c\udf4d \ud83e\udd65 \ud83e\udd5d \ud83c\udf45 \ud83c\udf46 \ud83e\udd51 \ud83e\udd66 \ud83e\udd6c \ud83e\udd52 \ud83c\udf36 \ud83e\uded1 \ud83c\udf3d \ud83e\udd55 \ud83e\uded2 \ud83e\uddc4 \ud83e\uddc5 \ud83e\udd54 \ud83c\udf60 \ud83e\udd50 \ud83e\udd6f \ud83c\udf5e \ud83e\udd56 \ud83e\udd68 \ud83e\uddc0 \ud83e\udd5a \ud83c\udf73 \ud83e\uddc8 \ud83e\udd5e \ud83e\uddc7 \ud83e\udd53 \ud83e\udd69 \ud83c\udf57 \ud83c\udf56 \ud83e\uddb4 \ud83c\udf2d \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83e\uded3 \ud83e\udd6a \ud83e\udd59 \ud83e\uddc6 \ud83c\udf2e \ud83c\udf2f \ud83e\uded4 \ud83e\udd57 \ud83e\udd58 \ud83e\uded5 \ud83e\udd6b \ud83c\udf5d \ud83c\udf5c \ud83c\udf72 \ud83c\udf5b \ud83c\udf63 \ud83c\udf71 \ud83e\udd5f \ud83e\uddaa \ud83c\udf64 \ud83c\udf59 \ud83c\udf5a \ud83c\udf58 \ud83c\udf65 \ud83e\udd60 \ud83e\udd6e \ud83c\udf62 \ud83c\udf61 \ud83c\udf67 \ud83c\udf68 \ud83c\udf66 \ud83e\udd67 \ud83e\uddc1 \ud83c\udf70 \ud83c\udf82 \ud83c\udf6e \ud83c\udf6d \ud83c\udf6c \ud83c\udf6b \ud83c\udf7f \ud83c\udf69 \ud83c\udf6a \ud83c\udf30 \ud83e\udd5c \ud83c\udf6f \ud83e\udd5b \ud83c\udf7c \ud83e\uded6 \u2615\ufe0f \ud83c\udf75 \ud83e\uddc3 \ud83e\udd64 \ud83e\uddcb \ud83c\udf76 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83c\udf77 \ud83e\udd43 \ud83c\udf78 \ud83c\udf79 \ud83e\uddc9 \ud83c\udf7e \ud83e\uddca \ud83e\udd44 \ud83c\udf74 \ud83c\udf7d \ud83e\udd63 \ud83e\udd61 \ud83e\udd62 \ud83e\uddc2</p>"},{"location":"creative/emojis/#activity-and-sports","title":"activity and sports","text":"<p>\u26bd\ufe0f \ud83c\udfc0 \ud83c\udfc8 \u26be\ufe0f \ud83e\udd4e \ud83c\udfbe \ud83c\udfd0 \ud83c\udfc9 \ud83e\udd4f \ud83c\udfb1 \ud83e\ude80 \ud83c\udfd3 \ud83c\udff8 \ud83c\udfd2 \ud83c\udfd1 \ud83e\udd4d \ud83c\udfcf \ud83e\ude83 \ud83e\udd45 \u26f3\ufe0f \ud83e\ude81 \ud83c\udff9 \ud83c\udfa3 \ud83e\udd3f \ud83e\udd4a \ud83e\udd4b \ud83c\udfbd \ud83d\udef9 \ud83d\udefc \ud83d\udef7 \u26f8 \ud83e\udd4c \ud83c\udfbf \u26f7 \ud83c\udfc2 \ud83e\ude82 \ud83c\udfcb\ufe0f\u200d\u2640\ufe0f \ud83c\udfcb\ufe0f \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f \ud83e\udd3c\u200d\u2640\ufe0f \ud83e\udd3c \ud83e\udd3c\u200d\u2642\ufe0f \ud83e\udd38\u200d\u2640\ufe0f \ud83e\udd38 \ud83e\udd38\u200d\u2642\ufe0f \u26f9\ufe0f\u200d\u2640\ufe0f \u26f9\ufe0f \u26f9\ufe0f\u200d\u2642\ufe0f \ud83e\udd3a \ud83e\udd3e\u200d\u2640\ufe0f \ud83e\udd3e \ud83e\udd3e\u200d\u2642\ufe0f \ud83c\udfcc\ufe0f\u200d\u2640\ufe0f \ud83c\udfcc\ufe0f \ud83c\udfcc\ufe0f\u200d\u2642\ufe0f \ud83c\udfc7 \ud83e\uddd8\u200d\u2640\ufe0f \ud83e\uddd8 \ud83e\uddd8\u200d\u2642\ufe0f \ud83c\udfc4\u200d\u2640\ufe0f \ud83c\udfc4 \ud83c\udfc4\u200d\u2642\ufe0f \ud83c\udfca\u200d\u2640\ufe0f \ud83c\udfca \ud83c\udfca\u200d\u2642\ufe0f \ud83e\udd3d\u200d\u2640\ufe0f \ud83e\udd3d \ud83e\udd3d\u200d\u2642\ufe0f \ud83d\udea3\u200d\u2640\ufe0f \ud83d\udea3 \ud83d\udea3\u200d\u2642\ufe0f \ud83e\uddd7\u200d\u2640\ufe0f \ud83e\uddd7 \ud83e\uddd7\u200d\u2642\ufe0f \ud83d\udeb5\u200d\u2640\ufe0f \ud83d\udeb5 \ud83d\udeb5\u200d\u2642\ufe0f \ud83d\udeb4\u200d\u2640\ufe0f \ud83d\udeb4 \ud83d\udeb4\u200d\u2642\ufe0f \ud83c\udfc6 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \ud83c\udfc5 \ud83c\udf96 \ud83c\udff5 \ud83c\udf97 \ud83c\udfab \ud83c\udf9f \ud83c\udfaa \ud83e\udd39 \ud83e\udd39\u200d\u2642\ufe0f \ud83e\udd39\u200d\u2640\ufe0f \ud83c\udfad \ud83e\ude70 \ud83c\udfa8 \ud83c\udfac \ud83c\udfa4 \ud83c\udfa7 \ud83c\udfbc \ud83c\udfb9 \ud83e\udd41 \ud83e\ude98 \ud83c\udfb7 \ud83c\udfba \ud83e\ude97 \ud83c\udfb8 \ud83e\ude95 \ud83c\udfbb \ud83c\udfb2 \u265f \ud83c\udfaf \ud83c\udfb3 \ud83c\udfae \ud83c\udfb0 \ud83e\udde9</p>"},{"location":"creative/emojis/#flags","title":"flags","text":"<p>\ud83c\udff3\ufe0f \ud83c\udff4 \ud83c\udfc1 \ud83d\udea9 \ud83c\udff3\ufe0f\u200d\ud83c\udf08 \ud83c\udff3\ufe0f\u200d\u26a7\ufe0f \ud83c\udff4\u200d\u2620\ufe0f \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddf1 \ud83c\udde9\ud83c\uddff \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddff \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddf7 \ud83c\uddee\ud83c\uddf4 \ud83c\uddfb\ud83c\uddec \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddee \ud83c\uddf0\ud83c\udded \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\udde6 \ud83c\uddee\ud83c\udde8 \ud83c\udde8\ud83c\uddfb \ud83c\udde7\ud83c\uddf6 \ud83c\uddf0\ud83c\uddfe \ud83c\udde8\ud83c\uddeb \ud83c\uddf9\ud83c\udde9 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\uddf4 \ud83c\uddf0\ud83c\uddf2 \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddee \ud83c\udded\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddec \ud83c\uddf8\ud83c\uddfb \ud83c\uddec\ud83c\uddf6 \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddf0 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\uddeb \ud83c\uddf5\ud83c\uddeb \ud83c\uddf9\ud83c\uddeb \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddea \ud83c\udde9\ud83c\uddea \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddf5 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf5 \ud83c\udf8c \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf4 \ud83c\uddf0\ud83c\uddff \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddee \ud83c\uddfd\ud83c\uddf0 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddec \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddfe \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf6 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddfa \ud83c\uddfe\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfd \ud83c\uddeb\ud83c\uddf2 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\uddff \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\udde8 \ud83c\uddf3\ud83c\uddff \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddeb \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\uddfe \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddea \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddfc\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddee \ud83c\uddec\ud83c\uddf8 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddff\ud83c\udde6 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddea\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf0 \ud83c\udde7\ud83c\uddf1 \ud83c\uddf8\ud83c\udded \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf5\ud83c\uddf2 \ud83c\uddfb\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddff \ud83c\uddf8\ud83c\uddea \ud83c\udde8\ud83c\udded \ud83c\uddf8\ud83c\uddfe \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddff \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\uddfb \ud83c\uddfb\ud83c\uddee \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\udde6 \ud83c\udde6\ud83c\uddea \ud83c\uddec\ud83c\udde7 \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\uddfa \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfc\ud83c\uddeb \ud83c\uddea\ud83c\udded \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc</p>"},{"location":"creative/emojis/#newer-emojis","title":"newer emojis","text":"<p>\ud83e\udd72 \ud83e\udd78 \ud83e\udd0c \ud83e\udd0c\ud83c\udffb \ud83e\udd0c\ud83c\udffc \ud83e\udd0c\ud83c\udffd \ud83e\udd0c\ud83c\udffe \ud83e\udd0c\ud83c\udfff \ud83e\udec0 \ud83e\udec1 \ud83e\udd77 \ud83e\udd35\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffb\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffc\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffd\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffe\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udfff\u200d\u2640\ufe0f \ud83e\udd35\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffb\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffc\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffd\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffe\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udfff\u200d\u2642\ufe0f \ud83d\udc70\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffb\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffc\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffd\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffe\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udfff\u200d\u2640\ufe0f \ud83d\udc70\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffb\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffc\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffd\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffe\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udfff\u200d\u2642\ufe0f \ud83d\udc69\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf7c \ud83e\uddd1\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf7c \ud83d\udc68\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf7c \ud83e\uddd1\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf84 \ud83e\udec2 \ud83d\udc08\u200d\u2b1b \ud83e\uddac \ud83e\udda3 \ud83e\uddab \ud83d\udc3b\u200d\u2744\ufe0f \ud83e\udda4 \ud83e\udeb6 \ud83e\uddad \ud83e\udeb2 \ud83e\udeb3 \ud83e\udeb0 \ud83e\udeb1 \ud83e\udeb4 \ud83e\uded0 \ud83e\uded2 \ud83e\uded1 \ud83e\uded3 \ud83e\uded4 \ud83e\uded5 \ud83e\uded6 \ud83e\uddcb \ud83e\udea8 \ud83e\udeb5 \ud83d\uded6 \ud83d\udefb \ud83d\udefc \ud83e\ude84 \ud83e\ude85 \ud83e\ude86 \ud83e\udea1 \ud83e\udea2 \ud83e\ude74 \ud83e\ude96 \ud83e\ude97 \ud83e\ude98 \ud83e\ude99 \ud83e\ude83 \ud83e\ude9a \ud83e\ude9b \ud83e\ude9d \ud83e\ude9c \ud83d\uded7 \ud83e\ude9e \ud83e\ude9f \ud83e\udea0 \ud83e\udea4 \ud83e\udea3 \ud83e\udea5 \ud83e\udea6 \ud83e\udea7 \ud83c\udff3\ufe0f\u200d\u26a7\ufe0f \ud83d\ude2e\u200d\ud83d\udca8 \ud83d\ude35\u200d\ud83d\udcab \ud83d\ude36\u200d\ud83c\udf2b\ufe0f \u2764\ufe0f\u200d\ud83d\udd25 \u2764\ufe0f\u200d\ud83e\ude79 \ud83e\uddd4\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffb\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffc\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffd\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffe\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udfff\u200d\u2640\ufe0f \ud83e\uddd4\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffb\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffc\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffd\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffe\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udfff\u200d\u2642\ufe0f \ud83d\udc91\ud83c\udffb \ud83d\udc91\ud83c\udffc \ud83d\udc91\ud83c\udffd \ud83d\udc91\ud83c\udffe \ud83d\udc91\ud83c\udfff \ud83d\udc8f\ud83c\udffb \ud83d\udc8f\ud83c\udffc \ud83d\udc8f\ud83c\udffd \ud83d\udc8f\ud83c\udffe \ud83d\udc8f\ud83c\udfff \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe</p>"},{"location":"creative/emojis/#non-emoji-symbols","title":"non-emoji symbols","text":"<p>\u2722 \u2723 \u2724 \u2725 \u2726 \u2727 \u2605 \u2606 \u272f \u2721\ufe0e \u2729 \u272a \u272b \u272c \u272d \u272e \u2736 \u2737 \u2735 \u2738 \u2739 \u2192 \u21d2 \u27f9 \u21e8 \u21fe \u27be \u21e2 \u261b \u261e \u2794 \u279c \u2799 \u279b \u279d \u279e \u2660\ufe0e \u2663\ufe0e \u2665\ufe0e \u2666\ufe0e \u2664 \u2667 \u2661 \u2662 \u265a \u265b \u265c \u265d \u265e \u265f \u2654 \u2655 \u2656 \u2657 \u2658 \u2659 \u2680 \u2681 \u2682 \u2683 \u2684 \u2685 \ud83c\udca0 \u2688 \u2689 \u2686 \u2687 \ud80c\udc00 \ud80c\udc01 \ud80c\udc02 \ud80c\udc03 \ud80c\udc04 \ud80c\udc05 \ud80c\udc06 \ud80c\udc07 \ud80c\udc08 \ud80c\udc09 \ud80c\udc0a \ud80c\udc0b \ud80c\udc0c \ud80c\udc0d \ud80c\udc0e \ud80c\udc0f \ud80c\udc10 \ud80c\udc11 \ud80c\udc12 \ud80c\udc13 \ud80c\udc14 \ud80c\udc15 \ud80c\udc16 \ud80c\udc17 \ud80c\udc18 \ud80c\udc19 \ud80c\udc1a \ud80c\udc1b \ud80c\udc1c \ud80c\udc1d</p>"},{"location":"creative/seo-fundamentals/","title":"SEO Fundamentals","text":""},{"location":"creative/seo-fundamentals/#overview-of-seo","title":"overview of SEO","text":""},{"location":"creative/seo-fundamentals/#what-is-seo","title":"what is SEO?","text":"<ul> <li>the process of making improvements on and off your website in order to gain more exposure in search engine results </li> <li>more exposure in SEO will lead to more visitors finding you for the right reasons</li> <li> <p>SEs try to find and understand all the content out there on the internet</p> <ul> <li>quickly deliver relevant and authoritative results based on any phrase the user might be searching for </li> </ul> </li> <li> <p>when user searches for California Hotels, SE wants to show list of results relevant to the topic of Cali hotels</p> </li> <li>SE analyze all pages ever visited and pick out pages they believe are most relevant</li> <li> <p>relevance is determined by things such as how your content is written and implemented in code, as well as how other websites around the internet are linking to you </p> <ul> <li>all of this is stuffed into a very complex and very proprietary index.</li> <li>uses complex algorithms to rank and display all of those webpages in order of relevance to that phrase that the user just typed in, such as Cali Hotels</li> </ul> </li> <li> <p>SE makes clear distinctions between content that is for Cali Hotels and content that is for Cali Resorts</p> </li> <li>SE understand quite a bit about semantic and thematic connections between words and concepts</li> <li>SE knows that the search dog crates is relevant to a site selling pet carriers</li> <li>SE also takes authority very seriously, is your website a trusted place that the Engine wants to show their users?</li> <li>one way SE determine how safe you are is evaluating how many websites link to you </li> <li>this is measure by links and sentiment (product reviews and such)</li> <li>links are like a vote on the internet, links from more trusted sites are valued more</li> <li>fake links are very bad for SEO</li> </ul>"},{"location":"creative/seo-fundamentals/#reading-search-engine-results-pages-serp","title":"reading search engine results pages (SERP)","text":"<ul> <li>paid listings are actual advertisements</li> <li>a typical SERP will have 10 organic results that link out to different webpages<ul> <li>sometimes referred to as the 10 blue links, each include at least a headline, description, and visible URL</li> <li>also return things like videos and maps, we now have blended results</li> </ul> </li> </ul>"},{"location":"creative/seo-fundamentals/#setting-seo-expectations","title":"setting SEO expectations","text":"<ul> <li>SEO is a bit different from other marketing strategies</li> <li>patience is a virtue, especially with SEO</li> <li>approach SEO as a long term process that builds long term value</li> <li>there is a reason the \"rank #1 in google scams\" are called scams (they are scams)</li> <li> <p>it takes time to:</p> <ul> <li>develop and execute on your strategy</li> <li>research your keywords and understand their intent</li> <li>create valuable and useful content</li> <li>attract relevant links and authority signals</li> <li>resolve any technical issues with your site</li> <li>never ending process, always work to be done</li> </ul> </li> <li> <p>SE algos frequently change and your SEO work needs to keep up with them</p> </li> </ul>"},{"location":"creative/seo-fundamentals/#how-seo-affects-your-business","title":"how SEO affects your business","text":"<ul> <li>intent = motivation behind a search </li> <li>what people search for and the words they choose when making their query says a lot about their intent, or what actions they want to take at a specific moment in time</li> <li>one of the biggest benefits of SEO is the ability to actually measure your results</li> <li>you can use your website analytics data to find out exactly how successful you are in acquiring search engine users <ul> <li>you can see if those users actions are inline with your business goals</li> <li>you can evaluate the effectiveness of your content in attracting and advancing the user through your sales flow</li> <li>you can measure what they do and do not do on your website and beyond</li> <li>by attaching real dollars and cents to users actions that began with a simple search, you will be able to truly measure return on investment from your SEO channel</li> </ul> </li> </ul>"},{"location":"creative/seo-fundamentals/#why-you-need-a-keyword-research-plan","title":"why you need a keyword-research plan","text":"<ul> <li>before you optimize your website you need to know what your are optimizing for </li> <li>keywords = search terms that people enter into search engines</li> <li> <p>formal keyword research is the foundational piece in SEO, that will help you understand what people are typing in the search engines </p> </li> <li> <p>keyword research:</p> <ul> <li>the intent of those keywords </li> <li>frequency </li> <li>relevance to business objectives</li> <li>how competitive the terms will be to try to rank for (car would be a highly competitive and not the best choice)</li> </ul> </li> </ul>"},{"location":"creative/seo-fundamentals/#how-to-research-keywords","title":"how to research keywords","text":""},{"location":"creative/seo-fundamentals/#tools-to-help-you-analyze-keywords","title":"tools to help you analyze keywords","text":""},{"location":"creative/seo-fundamentals/#understanding-keyword-attributes","title":"understanding keyword attributes","text":""},{"location":"creative/seo-fundamentals/#understanding-keyword-distribution","title":"understanding keyword distribution","text":""},{"location":"creative/seo-fundamentals/#ongoing-keyword-evaluation","title":"ongoing keyword evaluation","text":""},{"location":"creative/seo-fundamentals/#keywords-foundation-of-seo","title":"keywords: foundation of SEO","text":""},{"location":"creative/seo-fundamentals/#content-optimization","title":"content optimization","text":"<p>how search engines and people view web pages</p>"},{"location":"creative/seo-fundamentals/#technical-seo","title":"technical SEO","text":""},{"location":"creative/seo-fundamentals/#long-term-content-planning","title":"long-term content planning","text":""},{"location":"creative/seo-fundamentals/#link-building-strategies","title":"link-building strategies","text":""},{"location":"creative/seo-fundamentals/#measuring-seo-effectiveness","title":"measuring SEO effectiveness","text":""},{"location":"creative/seo-fundamentals/#ecommerce","title":"ecommerce","text":"<p>local and mobile SEO considerations</p>"},{"location":"creative/writing-blogs/","title":"Blog Tips","text":"<ul> <li>must serve the readers</li> <li>using list formatted paragraphs are a good choice, makes it scan-able and more digestible for readers, and easier to write for the author</li> <li>use numbered paragraphs or bullet points depending on the topic</li> <li>can use subheads to break up post </li> </ul>"},{"location":"creative/writing-blogs/#blogging-best-practices","title":"blogging best practices","text":"<ul> <li>have integrity</li> <li>maintain high standards with what you publish</li> <li>keep truth and accuracy</li> <li>get your facts straight </li> <li>verify information </li> <li>take responsibility for mistakes</li> <li>keep fairness</li> <li>give credit where it's due and cite sources of information</li> <li>consider the long term impacts of anyone who may be affected by your posts</li> <li>be a truthful, fair and authentic writer</li> </ul>"},{"location":"creative/writing-blogs/#cta-calls-to-action","title":"CTA, calls to action","text":"<ul> <li>in the art of conversation, you cannot just talk about yourself </li> <li>blog posts are no different even though your end of the conversation may go on longer</li> <li>offer points of engagement for readers, (CTA)</li> <li>a CTA is u an invitation for your readers to do something</li> <li>a CTA could be a link to another site to do something, a pitch to buy your product, as to follow you on social media, request for them to donate to a charity</li> <li>blogs with CTA have much higher engagement rates than blogs without </li> <li>CTAs are usually best put at the end of a post, asking readers an ending question is also a good way to produce engagement</li> </ul>"},{"location":"creative/writing-blogs/#reasons-people-read-a-blog","title":"reasons people read a blog","text":"<ul> <li>it offers something we want or need at that moment</li> <li>it is useful to us in someway</li> <li>informative and helpful</li> <li>educational </li> <li>challenges you</li> </ul>"},{"location":"creative/writing-blogs/#not-reasons-people-read-a-blog","title":"not reasons people read a blog","text":"<ul> <li>they don't read because the writer love to hear themselves talk</li> <li>it's a self-serving rant </li> <li>it's a diary  </li> <li>not because it's some meta gazing view on a topic</li> </ul>"},{"location":"creative/writing-blogs/#blog-voice","title":"blog voice","text":"<ul> <li>strive to have a unique voice </li> <li>its not just what you say but how you say it </li> <li>\"voice is the distinct personality, style, or point of view of a piece or writing\"</li> <li>conviction is contagious</li> </ul>"},{"location":"creative/writing-blogs/#writing-passionate-posts","title":"writing passionate posts","text":"<ul> <li>write passionate posts, but do not rant</li> <li>choose a clear point</li> <li>develop a well organized argument</li> </ul>"},{"location":"creative/writing-blogs/#how-to-develop-your-voice","title":"how to develop your voice","text":"<ul> <li>read other blogs and see what you like and what works well for other writers</li> <li>experiment with different styles to see what fits you </li> </ul>"},{"location":"creative/writing-blogs/#ask-yourself","title":"ask yourself","text":"<ul> <li>what would audience find useful</li> <li>how can I help readers          - achieve a common goal         - understand a complex issue         - soothe a worry         - teach them to feel better about themselves          - teach them something to improve their lives in someway          - laugh </li> </ul>"},{"location":"creative/writing-blogs/#how-to-optimize-blog","title":"how to optimize blog","text":"<ul> <li>become a search engine optimization expert (seo)</li> <li>practice writing attention grabbing headlines</li> <li>learn to write quickly and efficiently </li> <li>use today's news to help direct readers attention to posts, stay current and fresh</li> <li>post predictably and consistently</li> <li>post as often as you can commit to posting compelling content on a regular basis</li> <li>write down ideas in notes as potential future posts</li> <li>use eye catching pictures and videos to keep readers attention on the post</li> <li>one study shows one picture for every 350 words</li> </ul>"},{"location":"creative/writing-blogs/#be-knowledgable","title":"be knowledgable","text":"<ul> <li>everyone is a relative expert in something</li> <li>random politics, cooking, areas of well-being</li> <li>how-tos, easy to follow numbered lists are good ways of presenting knowledge</li> <li>a good idea to show readers how or why you are an expert on a subject</li> <li>a tagline at end of post is a good place to put description of self and qualifications or experience</li> <li>explain complex words in a simple way</li> <li>ensure accuracy on posts, even on the smallest details</li> <li>double check facts and site articles and sources when needed</li> <li>stick to a clear and concise point in your blog post</li> </ul>"},{"location":"creative/writing-blogs/#how-to-stay-focused-on-topic","title":"how to stay focused on topic","text":"<ul> <li>write headline first </li> <li>use a list of bullet points</li> <li>don't just blurt stream of conscience onto page</li> </ul>"},{"location":"creative/writing-blogs/#length-of-blog-post","title":"length of blog post","text":"<ul> <li>as long as it needs to be to make your argument / point</li> <li>word count should be determined on what you have to say</li> <li>word count also depends on how clearly and concisely you can say it</li> <li>the average person reads between 150 - 300 words per minute</li> <li>people spend 3-5 minutes reading a post</li> <li>450 - 1,500 words per post</li> <li>shorter posts of around 300 generate more comments</li> <li>longer posts of 1,000 - 1,500 get more media shares</li> <li>longer posts up to 2,500 get better search rankings</li> <li>google search engine favors a low bounce rate, meaning readers stay on your page longer</li> </ul>"},{"location":"creative/writing-blogs/#dealing-with-criticism","title":"dealing with criticism","text":"<ul> <li>remember it takes courage to write a blog</li> <li>monitor and learn from comments</li> <li>do not engage with trolls</li> <li>recognize the privilege of having a blog</li> </ul>"},{"location":"linux/code-snips/","title":"Handy Code Snips","text":""},{"location":"linux/code-snips/#find-paths-containing-word","title":"find paths containing WORD","text":"<pre><code>ls -R | grep WORD\n</code></pre>"},{"location":"linux/command-line/","title":"Linux Command Line","text":""},{"location":"linux/command-line/#quick-linux-intro","title":"quick Linux intro","text":"<ul> <li>Linux broadly refers to a free, open-source operating system first released by Linus Torvalds in 1991</li> <li>Linux is really just the name of the kernel</li> <li>a kernel allows software to communicate with a computers hardware</li> <li>Linux was inspired by Unix, which in turn was inspired by MINIX</li> <li>Linux is free software under the GPL (GNU General Public License)</li> <li>all Linux systems run a version of the Linux kernel</li> <li>most Linux systems use the same set of core tools called the GNU coreutils</li> <li>the combination of these tools and the kernel are referred to as GNU/Linux</li> <li>Linux distributions are operating systems that include the kernel and various other software</li> <li>Distribution maintainers make choices about how their distributions are configured and what tools they provide</li> <li> <p>many distributions are related to each other:</p> <ul> <li>Arch, Debian, Red Hat, Slackware, and others</li> <li>we choose a distro based on many factors</li> </ul> </li> <li> <p>Debian:</p> <ul> <li>Ubuntu  </li> <li>Linux mint  </li> <li>Elementary OS  </li> <li>Kali Linux</li> </ul> </li> <li> <p>all distributions differ in various ways </p> </li> <li>the command line or shell is common to all of them </li> <li> <p>the Bash shell is very widely used and widely available</p> </li> <li> <p>Red Hat:</p> <ul> <li>CentOS</li> <li>Fedora</li> <li>Red Hat Enterprise Linux</li> </ul> </li> </ul>"},{"location":"linux/command-line/#unix","title":"Unix","text":""},{"location":"linux/command-line/#what-is-unix","title":"what is Unix?","text":"<ul> <li>an operating system</li> <li>created around 1970 by AT&amp;T employees working at Bell Labs</li> <li>many of the Bell Labs employees were involved in the design of a mainframe operating system called MULTICS</li> <li>MULTICS = Multiplex Information and Computing Service</li> <li>back around 1970 mainframes were expensive, so users were granted timesharing slots to do their work, often by logging in from a remote terminal with less computing power </li> <li>MULTICS was designed to manage that remote login, timesharing process</li> <li>MULTICS became a large and complex project and Bell Labs decided to pull out of it</li> <li>the employees who worked on it still liked the projects goals, so like as side project, they worked on building a smaller and simpler version</li> <li>their first version only supported a single user, so as a play on the name MULTICS, they called it UNICS</li> <li>UNICS = Uniplexed Information and Computing Service</li> <li>UNICS became able to support multiple users and was renamed Unix (not an acronym anymore)</li> <li>at this point Unix was now a main frame operating system being used by Bell Labs</li> <li>2 events gave Unix a big boost in popularity</li> <li>in 1972 Unix was rewritten in the C programming language</li> <li>prior operating systems were typically written in Assembly, a very low-level programming language</li> <li>Assembly requires code to be written for specific computer hardware</li> <li>Assembly is very fast but it is not portable, if you wanted to take your operating system to new hardware, you had to rewrite portions of your code</li> <li>The C programming language language was originally designed to write programs for the Unix operating system</li> <li>C is a low level language, but not as low level as Assembly, and so the programs are easier to write, and they are hardware-independent </li> <li>the developers liked C and decided to rewrite the whole Unix operating system using it, so Unix became portable to other hardware</li> <li>the next important event is the spread of Unix outside of AT&amp;Ts Bell Labs</li> <li>a court order in an antitrust case forbid AT&amp;T from entering the computer software business, so AT&amp;T could not sell the Unix operating system, but they could give it away  </li> <li>if you wrote to AT&amp;T and asked for a copy of Unix, they would give you a free license, and send you all the source code</li> <li>free high-quality software was very attractive to government agencies, corporations, and especially universities, who'd bought these expensive mainframe computers </li> <li>Unix spread quickly and in 1975 programming was taking off and students at universities were learning to program on mainframe computers using Unix</li> <li>those students went on to work at corporations and software companies, and took their fondness of Unix with them</li> <li>since then Unix has grown an improved </li> </ul>"},{"location":"linux/command-line/#branches-and-improvements","title":"branches and improvements","text":"<ul> <li>the first public version of Unix in 1975 is often referred to as System 5</li> <li>over time more branches have been released and that still continues today </li> <li>one of the most famous of these is the Berkeley Software Distribution (BSD)</li> <li>Linux is open source and comes in many variations, such as Red Hat, CentOS, Debian, Ubuntu, Kali, Gentoo</li> </ul>"},{"location":"linux/command-line/#command-line-basics","title":"command-line basics","text":""},{"location":"linux/command-line/#what-is-the-command-line","title":"what is the command line?","text":"<ul> <li>allows us to interact with programs using text commands</li> <li>command-line programs can read text inputs and output text to the screen </li> <li>command-line programs can read and write from files and the network </li> <li>Bash is a widely used shell or command-line interpreter</li> <li>Bash was released in 1989 and is named Bourne Again SHell</li> <li>Bash builds on earlier shells, like Bourne shell and Thompson shell</li> <li>Many other shells are available, offering varying features</li> <li>Bash is widely available on Linux</li> <li>command-line interface (CLI) is any place we can enter text commands</li> <li>a shell is a piece of software that interprets typed commands and runs them</li> <li>terminal is a software that a shell program runs inside of</li> <li>these terms are easily confused with each other </li> </ul>"},{"location":"linux/command-line/#command-structure","title":"command structure","text":"<ul> <li>command option(s) argument(s)</li> <li>commands are programs that are available on a system</li> <li>when we run a command, the system takes a specific action</li> <li>many commands have short names in order to save typing</li> <li>command names can seem tricky at first</li> <li>many aspects of the command line are all about efficiency</li> <li>commands are programs that take a particular action</li> <li>options tell the command how to operate, changing the behavior of the command</li> <li>options often begin with a dash or minus sign (like -e or -s)</li> <li>options are often represented by one letter or number</li> <li>most commands offer more than 1 option</li> <li>options can be used together </li> <li>arguments tell the command what to operate on </li> <li>this could be files, directories, urls, etc </li> </ul>"},{"location":"linux/command-line/#write-commands-in-a-shell-at-the-prompt","title":"write commands in a shell at the prompt","text":"<ul> <li>F11 makes terminal full screen </li> <li>spacing matters </li> <li>spelling command names matters</li> <li>misspelled commands usually will just fail </li> <li>mistyped options or arguments can cause unexpected outcomes or data loss</li> <li>always double check what you've typed before you run a command</li> <li>most commands are programs installed</li> <li>many common utilities come from the GNU coreutils </li> <li>the system provides ways for us to find programs</li> </ul>"},{"location":"linux/command-line/#finding-help-for-commands","title":"finding help for commands","text":"<ul> <li>Albert Einstein was credited with saying he didn't keep certain technical information in his mind because it was readily available in books</li> <li>you do not have to memorize everything</li> <li>the command man opens the manual pages</li> <li>manual pages are the built-in documentation for commands</li> <li>the highlighted line at bottom of terminal will show what line your cursor is on</li> <li>many commands also have the --help option to get help for the command </li> <li>help command outputs help for Bash</li> <li>apropos searches through installed programs that can be used as commands and searches their descriptions for text that you provide as an argument</li> <li>apropos list will show all options for commands that perform some type of list action or that perform actions on some type of list item</li> </ul>"},{"location":"linux/command-line/#helpful-keyboard-shortcuts-in-the-terminal","title":"helpful keyboard shortcuts in the terminal","text":"<ul> <li> <p><code>^ = ctrl</code></p> </li> <li> <p>tab completion:</p> <ul> <li>automatically completes a file, command, or folder name</li> <li>makes guesses based on the contents of the path</li> </ul> </li> <li> <p>text navigation shortcuts:</p> <ul> <li>ctrl a = move to beginning of line</li> <li>ctrl e = move to end of line</li> <li>ctrl left = move backward a word at a time</li> <li>ctrl right = move forward a word at a time</li> <li>ctrl u = delete from cursor to line start </li> <li>ctrl k = delete from cursor to line end</li> <li>ctrl shift c = copy selected text to clipboard</li> <li>ctrl shift v = paste selected text from clipboard</li> <li>up / down arrow = scroll previous commands </li> <li>ctrl r = search command history, ctrl r again cycles through search results</li> <li>ctrl c = cancel command</li> </ul> </li> <li> <p>long commands or long series of commands can wrap at the window boundary, but these are still considered one line</p> </li> <li>a line is any text we type at the command prompt before pressing return</li> </ul>"},{"location":"linux/command-line/#files-directories-permissions","title":"files, directories, permissions","text":""},{"location":"linux/command-line/#linux-file-system","title":"Linux file system","text":"<ul> <li>file determines a file type </li> <li>stat displays a files status</li> <li>in a Linux system everything is thought of as a file</li> <li> <p>we organize these files into directories which are sometimes called folders </p> </li> <li> <p>how directories are organized: </p> <ul> <li>working at the command line we will often need to refer to files and directories that represent the input, output, or the configurations for commands we use</li> <li>we also need to know where commands are located on the system</li> <li>on a Linux system files and directories are part of the file system, which defines the way the data is represented on the system's storage media</li> <li>the file system keeps track of and represents files on the system's storage</li> <li>Most Linux distributions follow the FHS (Filesystem Hierarchy Standard) </li> <li>the FHS defines where certain kinds of files are stored on the file system </li> <li>having files like configurations, programs, or binaries and so on in predictable locations is important to the operability to the software across Linux distributions</li> </ul> </li> <li> <p>each Linux system only has one file system and everything else, directories, external hard drives, network shares, and so on are represented within it </p> </li> </ul>"},{"location":"linux/command-line/#understanding-file-paths","title":"understanding file paths","text":"<ul> <li>in order to refer to locations on the filesystem we use a path, a string of text that represents a file or directory within the file system</li> </ul>"},{"location":"linux/command-line/#navigating-the-file-system","title":"navigating the file system","text":"<ul> <li>use backslash or quotes to refer to folders or files with space in them </li> <li>ls -R recursively lists directories and subdirectories</li> </ul>"},{"location":"linux/command-line/#copy-move-delete-files-and-directories","title":"copy move delete files and directories","text":"<ul> <li>cp = copy files, cp -R = copy directories</li> <li>mv = move or rename files</li> <li>wildcards are characters that stand for or represent patterns in text</li> <li> <ul> <li>= any number of characters</li> </ul> </li> <li>? = one character</li> <li><code>mv dir1/* dir2</code> = moves all files from dir1 to dir2</li> <li><code>mv dir1/*txt dir2</code> = moves all files ending in txt to dir2</li> <li><code>mv dir1/*.css dir2</code> = moves all files ending in .css to dir2</li> <li>rm = remove file</li> <li>rm file?.txt  = removes any file starting with file and ending with .txt, that has 1 letter in between (file1.txt files.txt filer.txt file%.txt)</li> </ul>"},{"location":"linux/command-line/#find-files-from-the-command-line","title":"find files from the command line","text":"<ul> <li> <p>the find command:</p> <ul> <li>finds files </li> <li>find ~/ -name \"text*\" = finds all files &amp; dirs with a name starting in text starting from our home dir</li> <li>find ~/ -name \"*t*\" will find everything with t in the name</li> </ul> </li> </ul>"},{"location":"linux/command-line/#understand-user-roles-and-sudo","title":"understand user roles and sudo","text":"<ul> <li> <p>multiuser environment:</p> <ul> <li>older systems didn't have the concept of separate users</li> <li>who ever used the system was the system admin and could do whatever they want</li> <li>modern systems allow multiple users with there own private files</li> </ul> </li> <li> <p>su $USERNAME = switch user to $USERNAME, will need to provide password</p> </li> <li>root / superuser is like the admin of the system and can make any changes to the system</li> <li>sudo allows normal users with the proper privileges to make admin changes</li> <li>sudo -k = turns off superuser privileges</li> <li>sudo -s = logs into root shell </li> </ul>"},{"location":"linux/command-line/#understand-file-permissions","title":"understand file permissions","text":"<ul> <li>file permissions are the way we tell the system which users and groups of users are allowed to access any given file and in what ways</li> <li> <p>when a user tries to access a file, the system consults the permission mode of a file and only allows the user access if they are permitted to have it </p> </li> <li> <p>the sequence of letters breaks down into 3 sections</p> </li> <li>the first section represents the user designated as owner of the file</li> <li> <p>the second section represents a group</p> <ul> <li>a group is a collection of users for whom we can define specific access to the file</li> </ul> </li> <li> <p>the third section represents the access to the file for all other users who are not the files owner or in the group designated in the group section</p> </li> <li> <p>each of the sections in the 9 letters breaks down into 3 letters</p> </li> <li>rwx = read write execute</li> <li><code>r--</code> = someone can modify the contents of a file but not modify it or execute it</li> <li><code>-w-</code> = someone can make changes to a file but not read the contents or execute it</li> <li><code>--x</code> = someone can run the file, as in a command or program, but not read or write it</li> <li>d may be included at the beginning of the 9 letters to signify a directory</li> <li>l may be included to signify the file is a link</li> </ul> <pre><code>rwxrwxrwx file1\n\nrwxr-xr-x file2\n</code></pre> <ul> <li>chmod = changes the permission mode string</li> <li>chown = changes the owner of a file</li> <li> <p>chgrp = changes the group of a file</p> </li> <li> <p>chmod can be used in different ways</p> </li> <li> <p>octal notation: </p> <ul> <li>uses 3 values to represent rwx, such as (755 644 777)</li> </ul> read(4) write(2) execute(1) result user r w x 7 group r - x 5 others r - x 5 read(4) write(2) execute(1) result user r w x 7 group r - x 5 others r - - 4 read(4) write(2) execute(1) result user r w x 7 group r w x 7 others r w x 7 </li> <li> <p>octal table: </p> octal value mode 0 --- 1 --x 2 -w- 3 -wx 4 r-- 5 r-x 6 rw- 7 rwx </li> <li> <p>symbolic notation: </p> <ul> <li>uses a shorthand for user, group, others, and all (a=r g+w o-x)</li> </ul> read(r) write(w) execute(x) mode user(u) + + x u+rwx group(g) = g=r others(o) - o-rwx all(a) = = = a=rwx </li> <li> <p><code>+</code> adds permission</p> </li> <li><code>-</code> removes permission</li> <li> <p><code>=</code> resets permissions to match new mode (removes previous mode)</p> </li> <li> <p>octal symbolic comparison table: </p> octal value symbolic value result 777 a=rwx rwxrwxrwx 755 u=rwx, g=rx, o=rx rwxr-xr-x 644 u=rw, g=r, o=r rw-r--r-- 700 u=rwx, g-rwx, o-rwx rwx------ </li> <li> <p>using octal notation is similar to using symbolic = all the time</p> original mode symbolic value result rw-r--r-- +x rwxr-xr-x rwxrwxrwx g=w, o=r rwx-w-r-- rwxr----- g+w, o+r rwxrw-r-- rwxrwxrwx a-x rw-rw-rw- </li> </ul>"},{"location":"linux/command-line/#modify-file-permissions","title":"modify file permissions","text":"<ul> <li>there is no single standard on default permissions in users home directory and they vary by distro</li> <li>755, 644, 700 are common</li> </ul>"},{"location":"linux/command-line/#create-hard-and-symbolic-links","title":"create hard and symbolic links","text":"<ul> <li>links are files that reference other files</li> <li>used to avoid having multiple copies of the same file in different places</li> <li> <p>we keep 1 file in 1 location, and then add a little pointer or link to other places where we want the file to appear</p> </li> <li> <p>2 types of links, hard links and soft / symbolic links</p> </li> <li>a hard link points to specific data (by inode) on the disk</li> <li>a soft link or symbolic link (symlink) points to another file</li> <li>the 2 types of links work in different ways </li> </ul> <p><pre><code>ln -s source-file.txt source-file-link.txt\n</code></pre> - if you edit source-file-link.txt you would be editing source-file.txt as well  - of either file is moved, the link will break and source-file-link.txt will no longer point to source-file.txt - source-file-link.txt would hold in memory a relative path to source-file.txt, so if either file moves, the relative path is no longer accurate</p> <pre><code>ln -s /home/user/absolute-path.txt soft-link.txt\n</code></pre> <ul> <li>if we use an absolute path, source-file-link.txt can be moved anywhere and it will still appropriately point to source-file.txt, but moving the source-file.txt would still break the link</li> </ul> <pre><code>ln source-file2.txt file2-hard-link.txt\n</code></pre> <ul> <li>all files are pointers to a spot in memory which actually contains the data</li> <li>a hard link creates another pointer to the data that the first file is pointing at </li> </ul>"},{"location":"linux/command-line/#tasks-tools","title":"tasks &amp; tools","text":""},{"location":"linux/command-line/#unix-philosophy","title":"Unix philosophy","text":"<ul> <li>tools should do 1 thing and do it well </li> <li>in this case, doing something well means being a well behaved citizen of the ecosystem of tools that operate using text interfaces</li> <li>the tool should expect to take in a file or stream and output text in a reasonable format once it's done processing or doing whatever action that particular tool does</li> <li>this philosophy suggests that we shouldn't have tools that try to do too much</li> <li>we don't want 1 single tool or program that reads files and separates the text into another file and renames the file and compresses it into an archive when it's done, or one that tries to do everything anyone could possibly want to do </li> <li>tools should be designed to be used together in different ways </li> <li>the standard GNU coreutils follow this pattern</li> <li>we do not want to think of these tools as multifunction swiss army knives</li> <li>we want to think of these tools as a well-stocked kitchen of chef's tools</li> <li>we can open a can with a little Swiss Army Knife attachment, or try to chop a tomato with a tiny blade, but none of these tools would do a job particularly well, we want tools that will give us the ability to make meals we are proud of and that can work together easily and be used in different combinations to do whatever we need</li> <li>think of an assembly line where 1 machine does 1 task and the passes on to the next specialized machine, rather than 1 robot doing different tasks on the same item, it would not be nearly as efficient </li> <li>having separate dedicated tools allows us to pick appropriate tools from our toolbox to do exactly what we need to do </li> <li>we want to be able to incorporate the right tools into doing a task as flexibly as possible</li> </ul>"},{"location":"linux/command-line/#using-pipes","title":"using pipes","text":"<ul> <li>pipes take the output of 1 command and send it to another</li> <li>think of commands as little processing units that do 1 particular thing and pipes as connections between those units </li> <li>we can use pipes to take the output of the cat command and then instead of displaying the text on the screen, pass the result to the sort command</li> </ul> <pre><code>cat users.txt | sort -u | ...\n</code></pre> <ul> <li> <p>the pipe character is represented by a vertical bar</p> </li> <li> <p>below pipes hello to wc and tells use there is 1 line, 1 word, and 6 characters</p> </li> <li>wc counts the invisible newline (\\n) character that is at the end of every new line in a text file</li> </ul> <pre><code>echo hello | wc\n1       1       6\n</code></pre> <ul> <li>you can pipe anything to anything else and usually it will do what you expect</li> </ul>"},{"location":"linux/command-line/#cat-head-tail-less","title":"cat head tail less","text":"<ul> <li> <p>cat: </p> <ul> <li>concatenate means to link together</li> <li>can be used to output text file contents to the screen or to another program</li> </ul> </li> <li> <p>head, tail: </p> <ul> <li>view lines from the beginning or end of a file</li> <li>head my-file.txt = outputs first 10 lines of file</li> <li>head -n5 my-file.txt = outputs first 5 lines of file</li> <li>less my-file.txt = outputs last 10 lines of file</li> <li>less -n5 my-file.txt = outputs last 5 lines of file</li> </ul> </li> <li> <p>less:</p> <ul> <li>displays text one page or screenful at a time and provides navigation controls</li> </ul> </li> </ul> <pre><code>cat -n text.txt  | tail -n5\n     9  saf\n    10  asdf\n    11  asd\n    12  f\n    13  asd\n</code></pre> <pre><code>tail -n5 text.txt | cat -n 1  saf\n     2  asdf\n     3  asd\n     4  f\n     5  asd\n</code></pre>"},{"location":"linux/command-line/#search-with-grep","title":"search with grep","text":"<ul> <li>grep = get regular expression</li> <li>grep command searches files for matching patterns</li> <li>match patterns can be regular expressions</li> <li>-n will output line numbers as well </li> <li>-i will make search insensitive</li> <li>-v will only output lines NOT matching our search</li> </ul> <pre><code>1:the purple dog\n4:the moon 5:i am the blah\n8:the 10:what in the world 11:i am the 12:of the year\n13:the 1 14:the 2\n16:the 5\n</code></pre> <ul> <li>grep -E \"[jklo]\" test.txt = finds all lines containing either j k l or o</li> <li>grep -E \"\\w{9,}\" test.txt = finds all lines containing words with 9 or more characters</li> </ul>"},{"location":"linux/command-line/#awk-sed-sort","title":"awk sed sort","text":"<ul> <li> <p>one of the tasks of a system administrator, systems analyst, scientist, or programmer is to make use of data from various logs or outputs</p> </li> <li> <p>awk:</p> <ul> <li>is commonly used to extract specific text from a file according to a rule</li> <li>awk programs can be written from the command line or stored in a file </li> </ul> </li> <li> <p>sed:</p> <ul> <li>a stream editor</li> <li>excels at changing data as it flows through a command pipeline, or in place in a file</li> </ul> </li> <li> <p>we can use either tool in a command pipeline or just by themselves</p> </li> </ul> <pre><code>cat random-users.txt               \nName    Id    Team \nScott   314   Purple\nAnanti  991   Orange\nJian    3127  Purple \nMiguel  671   Green\nWes     1337  Orange\nAnne    556   Green\n</code></pre> <pre><code>awk '{print $2}' random-users.txt\nId\n314\n991\n3127\n671\n1337\n556\n</code></pre> <pre><code>awk '{print $2 \"\\t\" $1}' random-users.txt\nId  Name\n314 Scott\n991 Ananti\n3127 Jian\n671 Miguel\n1337 Wes\n556 Anne\n</code></pre> <pre><code>awk '{print $2 \"\\t\" $1}' random-users.txt | sort -n\nId  Name\n314 Scott\n556 Anne\n671 Miguel\n991 Ananti\n1337 Wes\n3127 Jian\n</code></pre> <pre><code>sed s/Orange/Red/ random-users.txt \nName    Id    Team \nScott   314   Purple\nAnanti  991   Red\nJian    3127  Purple \nMiguel  671   Green\nWes     1337  Red\nAnne    556   Green\n</code></pre> <pre><code>sort random-users.txt             \nAnanti  991   Orange\nAnne    556   Green\nJian    3127  Purple \nMiguel  671   Green\nName    Id    Team \nScott   314   Purple\nWes     1337  Orange\n</code></pre> <pre><code># sorting second column by first character\nsort -k2 random-users.txt\nWes     1337  Orange\nJian    3127  Purple \nScott   314   Purple\nAnne    556   Green\nMiguel  671   Green\nAnanti  991   Orange\nName    Id    Team </code></pre> <pre><code>sort -k2 -n random-users.txt\nName    Id    Team \nScott   314   Purple\nAnne    556   Green\nMiguel  671   Green\nAnanti  991   Orange\nWes     1337  Orange\nJian    3127  Purple </code></pre> <ul> <li>rev = prints text in reverse sequence </li> <li>tac = concatenates or displays files in reverse</li> <li>tr = translates or modifies individual characters according to arguments</li> </ul>"},{"location":"linux/command-line/#tar-and-zip-archives","title":"tar and zip archives","text":"<ul> <li>in the early days of computer systems and still today, data that needed to be archived for safe keeping was recorded to back-up tapes and stored in a closet or basement (or ideally in a more suitable and secure location)</li> <li>in order to store files on a linear medium like tape, files are recorded to the tape 1 after another, in sequence, like songs on an audio cassette </li> <li>instead of using a tape, we can also create a file that contains other files in this sequence</li> <li>.tar = tape archive files</li> <li>.tar files are common for distributing, sharing, and archiving files on linux systems</li> <li>it is much easier (in many ways), to send 1 large file than several small files</li> <li>.tar files often do not involve any compression, but there are ways to incorporate compression into a .tar file </li> <li>compression tries to reduce the size of a file using some mathematical tricks</li> <li>if using compression with a tar archive, you will often see that the file is named with and extension to indicate what kind of compression is being used</li> <li>compressed formats = .tar.gz, .tgz, .tar.bz2, + others</li> <li>.tar.gz, .tgz = a tar file with g-zipped compression</li> <li>.tar.bz2 = a tar file with b-zipped compression</li> </ul> <pre><code>tar -cvf new-tar.tar my-folder\n\n# -c option says create an archive\n# -v option tells tar to be verbose\n# -f options tells tar to output the tar to specified file name\n</code></pre> <pre><code>tar -caf new-gz-tar.tar.gz my-folder\n\n# -a option says use compression method specified by file extension (.gz)\n</code></pre> <pre><code>tar -caf new-bz-tar.tar.bz2 my-folder\n\n# works with other compression methods such as b-zipped as well\n</code></pre> <pre><code>tar -xf my-tar.tar.gz -C tar-directory\n\n# unpacks tar to specified directory\n</code></pre> <ul> <li>the zip and unzip commands can create and open compressed data archive files called zip files</li> <li>the zip format is more cross platform friendly</li> </ul> <pre><code>zip -r my-zip.zip my-folder\n\n# -r option to zip directory and all files inside\n</code></pre> <pre><code>unzip my-zip.zip\n</code></pre> <pre><code>unzip my-zip.zip -d my-zip-directory\n</code></pre>"},{"location":"linux/command-line/#output-redirection","title":"output redirection","text":"<ul> <li>text in a shell travels through 1 of 3 streams</li> <li>text can be redirected to the screen or to files</li> </ul> stream number usage standard input(stdin) 0 text input standard output(stdout) 1 text output standard error(stdin) 2 error text <pre><code>ls\nCNAME  code-examples  deploy.sh  docs  mkdocs.yml  README.md  requirements.txt  src  venv\n</code></pre> <pre><code>ls &gt; std-output.txt\n</code></pre> <pre><code>ls fake-file        \nls: cannot access 'fake-file': No such file or directory\n</code></pre> <pre><code>ls fake-file &gt; std-output.txt        \nls: cannot access 'fake-file': No such file or directory\n</code></pre> <pre><code>ls fake-file 2&gt; std-err.txt        </code></pre> <pre><code>&gt;std-err.txt # erases std-err.txt contents \n</code></pre> <ul> <li><code>&gt;</code> replaces content in file</li> <li><code>&gt;&gt;</code> adds to content in file</li> </ul>"},{"location":"linux/command-line/#environment-variables-and-path","title":"environment variables and PATH","text":"<ul> <li>env = look at environment variables, such as PATH</li> <li>echo $PATH = outputs PATH variable</li> <li>PATH = a list of files or directories where the shell looks for commands / programs / scripts</li> <li>which = shows location of specified command</li> <li>we can modify where the system looks for executables</li> <li>sometimes when adding software we might want to add the path to that software (like nvm, cargo)</li> <li>we can edit PATH in ~/.bash_profile ~/.bashrc ~/.zshrc among other places</li> </ul>"},{"location":"linux/command-line/#more-advanced-topics","title":"more advanced topics","text":""},{"location":"linux/command-line/#linux-distribution-info","title":"Linux distribution info","text":"<ul> <li>find files with distribution release information</li> </ul> <pre><code>ls -l /etc/*release\n-rw-r--r-- 1 root root 104 Aug  4 07:53 /etc/lsb-release\nlrwxrwxrwx 1 root root  21 Jan  5 09:33 /etc/os-release -&gt; ../usr/lib/os-release\n</code></pre> <pre><code>cat /etc/lsb-release           DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=20.04\nDISTRIB_CODENAME=focal\nDISTRIB_DESCRIPTION=\"Ubuntu 20.04.3 LTS\"\n</code></pre> <pre><code>cat /etc/os-release NAME=\"Ubuntu\"\nVERSION=\"20.04.3 LTS (Focal Fossa)\"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=\"Ubuntu 20.04.3 LTS\"\nVERSION_ID=\"20.04\"\nHOME_URL=\"https://www.ubuntu.com/\"\nSUPPORT_URL=\"https://help.ubuntu.com/\"\nBUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\nPRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\nVERSION_CODENAME=focal\nUBUNTU_CODENAME=focal\n</code></pre> <ul> <li>uname = find version of linux kernel in use</li> </ul> <pre><code>uname -a          \nLinux justin-HP-Laptop-15-dw1xxx 5.11.0-46-generic #51~20.04.1-Ubuntu SMP Fri Jan 7 06:51:40 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre> <pre><code>uname -r\n5.11.0-46-generic\n</code></pre>"},{"location":"linux/command-line/#hardware-and-disk-information","title":"hardware and disk information","text":"<ul> <li>memory information</li> </ul> <pre><code>free -h total        used        free      shared  buff/cache   available\nMem:          3.6Gi       1.9Gi       153Mi       271Mi       1.6Gi       1.2Gi\nSwap:         2.0Gi       862Mi       1.2Gi\n</code></pre> <ul> <li> <p>cat /proc/cpuinfo = output processor resources</p> </li> <li> <p>df = report file system disk space usage</p> </li> </ul> <pre><code>df -h \nFilesystem      Size  Used Avail Use% Mounted on\nudev            1.8G     0  1.8G   0% /dev\ntmpfs           374M  1.7M  372M   1% /run\n/dev/sda2       117G   54G   58G  49% /\ntmpfs           1.9G     0  1.9G   0% /dev/shm\ntmpfs           5.0M  4.0K  5.0M   1% /run/lock\ntmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup\n/dev/loop2       56M   56M     0 100% /snap/core18/2253\n/dev/loop1      128K  128K     0 100% /snap/bare/5\n/dev/loop4       56M   56M     0 100% /snap/core18/2284\n/dev/loop0      218M  218M     0 100% /snap/code/85\n/dev/loop3       62M   62M     0 100% /snap/core20/1270\n/dev/loop5      100M  100M     0 100% /snap/core/11993\n/dev/loop6      165M  165M     0 100% /snap/gnome-3-28-1804/161\n/dev/loop7       33M   33M     0 100% /snap/snapd/12704\n/dev/loop8      128K  128K     0 100% /snap/hello-world/29\n/dev/loop9       29M   29M     0 100% /snap/muccadoro/3\n/dev/loop10      99M   99M     0 100% /snap/neovide/120\n/dev/loop11      72M   72M     0 100% /snap/lunatask/8\n/dev/loop12     128K  128K     0 100% /snap/software-boutique/54\n/dev/loop13      66M   66M     0 100% /snap/gtk-common-themes/1519\n/dev/loop14      44M   44M     0 100% /snap/snapd/14295\n/dev/loop15      11M   11M     0 100% /snap/nvim/1722\n/dev/loop16      64M   64M     0 100% /snap/pomotroid/6\n/dev/sda1       511M  5.3M  506M   2% /boot/efi\ntmpfs           374M   80K  374M   1% /run/user/1000\n</code></pre> <ul> <li>lshw = list hardware</li> </ul>"},{"location":"linux/command-line/#package-manager","title":"package manager","text":"<ul> <li>apt search tree = searches for all packages with tree in name or description</li> <li>apt show tree = shows information for package tree</li> </ul>"},{"location":"linux/directories/","title":"Linux Directory Structure","text":""},{"location":"linux/directories/#root-dir-table","title":"root dir table","text":"directory description / the root directory where everything begins /bin contains binaries (programs) that must be present for the system to boot and run /boot contains the Linux kernel, initial RAM disk image (for drivers needed at boot time), and the boot loader /dev this is a special directory that contains device nodes /etc directory contains all of the system-wide configuration files /home in normal configurations each user is given a directory here /lib contains shared library files used by the core system programs /lost+found used in the case of a partial recovery from a file system corruption event /media contains the mount points for removable media such as USB drives that are mounted automatically at insertion /mnt contains mount points for removable devices that have been mounted manually /opt used to install \u201coptional\u201d software commercial software products that might be installed on the system /proc virtual file system maintained by the Linux kernel where the \u201cfiles\u201d it contains are peepholes into the kernel itself /root This is the home directory for the root account /sbin contains \u201csystem\u201d binaries for programs that perform vital system tasks that are generally reserved for the superuser /tmp intended for the storage of temporary / transient files created by various programs /usr contains programs and support files used by regular users and executable programs installed by the Linux distribution /usr/lib The shared libraries for the programs in /usr/bin /usr/local where programs that are not included with the distribution but are intended for systemwide use are installed /usr/sbin Contains more system administration programs /usr/share /usr/bin programs shared data like default configuration files and screen backgrounds /usr/share/doc documentation files for installed packages /var directory tree where data that is likely to change such as log files are stored"},{"location":"linux/directories/#root-dir-list","title":"root dir list","text":"<ul> <li> <p>/, root is the start of the filesystem </p> </li> <li> <p>/etc common config files </p> </li> <li> <p>/bin and /sbin where common programs or commands are found in </p> </li> <li> <p>/lib shared modules and libraries</p> </li> <li> <p>/mnt /media standard locations for mounting other file systems like local and network systems and usb drives</p> </li> <li> <p>/dev is where the system keeps references to all of the hardware and its hard drives, such as memory, CPU's and everything else</p> </li> <li> <p>/proc contains references to processes that are running on the system and details on other aspects of the system as well </p> </li> <li> <p>/sys holds files representing different kernel parameters and system information, this is where you will spend time if you are interested in learning about kernel development</p> </li> </ul>"},{"location":"linux/general/","title":"General Linux Info","text":""},{"location":"linux/general/#operating-system-layers","title":"Operating System Layers","text":""},{"location":"linux/general/#application","title":"Application","text":"<ul> <li>user apps </li> <li>daemons </li> </ul>"},{"location":"linux/general/#shell","title":"Shell","text":"<ul> <li> <p>command line interface </p> <ul> <li>interprets / translates commands for the Linux kernel</li> </ul> </li> <li> <p>sequencing</p> </li> </ul>"},{"location":"linux/general/#kernel","title":"Kernel","text":"<ul> <li>executive, system monitor</li> <li>controls and mediates access to hardware<ul> <li>process management</li> <li>file and disk management</li> <li>hardware management</li> <li>schedules and allocates system resources: <ul> <li>memory </li> <li>CPU, disk, network, etc.</li> </ul> </li> <li>enforces security and protection </li> <li>responds to user requests for service (system calls)</li> </ul> </li> </ul>"},{"location":"linux/general/#kernel-vs-shell","title":"Kernel vs Shell","text":""},{"location":"linux/general/#kernel_1","title":"Kernel","text":"<ul> <li>a computer program which acts as the core of the computers operating system and has the control over everything in the system</li> <li>core of the system that controls all the tasks of the system</li> <li>there is not different types of the Linux Kernel </li> </ul>"},{"location":"linux/general/#shell_1","title":"Shell","text":"<ul> <li>a computer program which works as the interface to access the services provided by the operating system </li> <li>interface between the system and user</li> <li>has different types such as Bourne shell, C shell, Korn shell, Bourne Again Shell</li> </ul>"},{"location":"linux/linux-programs/","title":"Advanced Linux Commands","text":""},{"location":"linux/linux-programs/#curl","title":"curl","text":"<ul> <li>mutipart/form-data post request </li> </ul> <pre><code>curl -X POST -F 'name=linuxize' -F 'email=linuxize@example.com' http://localhost.com/contact.php\n</code></pre> <ul> <li>application/x-www-form-urlencoded post request </li> </ul> <p><pre><code>curl -X POST -d 'name=test user1' -d 'email=testuser1@example.com' -d 'company_name=test company' -d 'password=password' http://localhost:8003/register\n</code></pre> - get request</p> <pre><code>curl -X GET http://127.0.0.1:8000/items/ -H \"accept: application/json\"\n</code></pre>"},{"location":"linux/linux-programs/#sed","title":"Sed","text":"<p>stream editor </p> <ul> <li>double space lines in file </li> </ul> <pre><code>sed  '/^$/d;G'\n</code></pre>"},{"location":"linux/linux-programs/#zsh","title":"zsh","text":"<p>the z shell</p> <ul> <li>my current prompt</li> </ul> <pre><code>PS1=\"%F{yellow}%~ %F{red} =%F{yellow}(%#)%F{red}=&gt; \"\n\nRPS1=\"%F{green}%D %F{white}%T %F{red}%n%{$reset_color%}@%F{blue}%m %h%F{yellow} %Bjobs%b %j\"\n</code></pre> <ul> <li>my zsh config </li> </ul> <pre><code>export PATH=$PATH:/usr/local/go/bin:$HOME/.local/bin\n\nexport ZSH=\"$HOME/.oh-my-zsh\"\n\nZSH_THEME=\"robbyrussell\"\n\nCASE_SENSITIVE=\"true\"\n\nplugins=( sudo fzf vi-mode colorize colored-man-pages zsh-interactive-cd zsh-autosuggestions zsh-syntax-highlighting )\n\nsource $ZSH/oh-my-zsh.sh\n\n# cd ~D ( ~D )\n\nhash -d D=$HOME/Documents\nhash -d DP=$HOME/Documents/Projects\nhash -d G=$HOME/GitHub\nhash -d Gj=$HOME/GitHub/justinsgithub\nhash -d Gjp=$HOME/GitHub/justinsgithub/portfolio\nhash -d Gjs=$HOME/GitHub/justinsgithub/static\nhash -d Gjsd=$HOME/GitHub/justinsgithub/static/docs.justintylers.com\nhash -d Gjsdd=$HOME/GitHub/justinsgithub/static/docs.justintylers.com/docs\n\n\nalias -g L='|less'\n\nalias cat=\"/home/justin/bin/go/ccat\"\n\nalias -g NUL=\"&gt; /dev/null 2&gt;&amp;1\"\n\nalias ls='ls --color=auto'\n\nalias l=\"ls -1\"\n\nalias rm=\"mv --force -t ~/.archive\"\n\nalias R=\"\\rm -rf\"\n\n\nalias nvim=\"$HOME/bin/nvim-linux64/bin/nvim\"\n\nalias vim=\"nvim\"\n\nalias mkdir=\"mkdir -pv\"\n\nalias python=\"python3\"\n\nalias py=\"python3\"\n\nalias pyvenv=\"python3 -m venv venv\"\n\nalias pinstall=\"pip install\"\n\nalias sourcevenv=\"source venv/bin/activate\"\n\nalias zshconfig=\"vim ~/.zshrc; zsh\"\n\nalias mkserve=\"mkdocs serve\"\n\nalias mkbuild=\"mkdocs build\"\n\nalias vimconfig='vim ~/.config/nvim/init.vim'\n\nalias svimconfig='vim ~/.SpaceVim.d/init.toml'\n\nalias weztermconfig=\"vim ~/.wezterm.lua\"\n\nalias promptconfig=\"vim ~/.config/zsh/.oh-my-zsh/custom/themes/my.zsh-theme\"\n\nalias linode=\"ssh example@0.0.0.0\"\n\nalias rustdocs=\"rustup docs --book\"\n\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n</code></pre> <ul> <li>zsh  loop</li> </ul> <pre><code>for x in 1 2 3 4 5 6 7 8 9; echo $x\n</code></pre> <ul> <li>copy a file </li> </ul> <pre><code>copyfile MY-FILE\n</code></pre>"},{"location":"linux/the-linux-command-line/","title":"The Linux Command Line","text":"<p>LinuxCommand.org</p> <p>an amazing book by William Shotts</p> <p>Creative Commons license</p>"},{"location":"linux/the-linux-command-line/#part-1-learning-the-shell","title":"Part 1 - Learning the Shell","text":""},{"location":"linux/the-linux-command-line/#what-is-the-shell","title":"What is the Shell?","text":"<ul> <li>The command line is a synonym for the shell.</li> <li>The shell is a program that takes keyboard input and passes it to the operating system, which finds the code that it points to and executes it </li> <li>bash, sh, zsh, csh, dash</li> <li>bash = Bourne Again SHell, enhanced sh, original shell program by Steve Bourne</li> <li>zsh is by Paul Falstad, default shell on MacOS</li> </ul>"},{"location":"linux/the-linux-command-line/#terminal-emulators","title":"Terminal Emulators","text":"<ul> <li>a terminal emulator is a GUI for a virtual terminal or console</li> <li>access the console with (F1 - F6 should work), return with  <li> <p>a prompt appears before the command you enter, which you can customize</p> </li> <li> <p>use arrows to browse command history, default is 1000 commands saved, can be customized</p> </li> <li>better x-window options are mouse follows focus, copy or middle click to paste highlighted selection</li> <li>end terminal session by either closing terminal window, typing exit command, or"},{"location":"linux/the-linux-command-line/#navigation","title":"Navigation","text":"<p>dir and dirs is short for directory and directories, respectively</p>"},{"location":"linux/the-linux-command-line/#understanding-the-file-system-tree","title":"Understanding the File System Tree","text":"<ul> <li>Unix-like systems organize files in a hierarchical directory structure</li> <li>Tree-like pattern of directories or folders</li> <li>First dir in Linux is the \"root\" dir</li> <li>Linux has one filesystem tree, unlike Windows which has one for each device</li> <li>Storage systems are attached (mounted) at different parts of the tree according to OS or system admin</li> <li>filenames starting with . are hidden</li> <li>filenames are case-sensitive and do not like spaces or weird characters</li> </ul>"},{"location":"linux/the-linux-command-line/#the-current-working-directory","title":"The Current Working Directory","text":"<ul> <li>the directory you are currently in, you can see all files and subdirectories, and parent directory path</li> <li>.. = parent directory </li> <li>. = current directory</li> <li><code>pwd</code> shows full path to current working dir</li> <li>first starting a terminal session starts us in $HOME dir</li> <li><code>ls</code> shows dir content</li> <li><code>cd</code> changes directory using relative or absolute paths<ul> <li><code>cd -</code> previous dir</li> <li><code>cd ~USERNAME</code> USERNAME home dir</li> <li><code>cd ..</code> parent dir</li> </ul> </li> </ul>"},{"location":"linux/the-linux-command-line/#exploring-the-system","title":"Exploring the System","text":""},{"location":"linux/the-linux-command-line/#options-and-arguments","title":"Options and Arguments","text":"<p><code>COMMAND -OPTION(S) ARG(s)</code></p> <ul> <li>commands often have options that modify the commands output</li> <li>command arguments are what the command acts on</li> <li>many options have a short and long version</li> <li>short options can often be combined into 1, such as <code>ls -la --reverse</code></li> </ul>"},{"location":"linux/the-linux-command-line/#having-more-fun-with-ls","title":"Having More Fun with ls","text":"<ul> <li><code>ls ~ .</code> = lists contents of multiple dir arguments</li> <li><code>ls --all</code> = include hidden dirs</li> <li><code>ls --almost-all</code> = include hidden dirs aside from . and ..</li> <li><code>ls --directory</code> = do not show dir contents, just dir (add -l for dir info is more realistic)</li> <li><code>ls --classify</code> = show symbol to indicate type of listing, appends / to dirs and @ to symbolic links</li> <li><code>ls --human-readable</code> = show file sized in human readable form instead of bytes</li> <li><code>ls --reverse</code> = reverse sort</li> <li><code>ls --S</code> = sort by file size</li> <li><code>ls -l</code> = lists contents with more detail</li> </ul>"},{"location":"linux/the-linux-command-line/#a-longer-look-at-long-format","title":"A Longer Look at Long Format","text":"<p><code>ls -l</code> shows data about a file</p> <p>example output for command <code>ls -l ./my-script.sh</code>:</p> <p><code>-rw-r--r-- 1 root root 3576296 2017-04-03 11:05 my-script.sh</code></p> <ul> <li><code>-rw-r--r--</code> =  (type of file)(access rights for files owner)(access rights for files group)(access rights for everyone else)</li> <li><code>1</code> = number of hard links</li> <li><code>root</code> = file owner</li> <li><code>root</code> = file group</li> <li><code>3576296</code> = size of file in bytes</li> <li><code>2017-04-03 11:05</code> = date and time of last modification</li> <li><code>my-script.sh</code> = file name</li> </ul>"},{"location":"linux/the-linux-command-line/#determining-a-files-type-with-file","title":"Determining a File's Type with file","text":"<ul> <li>use the <code>file</code> command to determines a files type</li> <li>file extensions are not required to determine a files contents</li> <li>in Linux, everything is thought of as a file</li> </ul>"},{"location":"linux/the-linux-command-line/#viewing-file-contents-with-less","title":"Viewing File Contents with less","text":"<ul> <li>the <code>less</code> command is a program to view text files</li> <li>system configs and some scripts are stored as text</li> <li>Page Up or b Scroll = back one page</li> <li>Page Down or space = Scroll forward one page</li> <li>Up arrow = Scroll up one line</li> <li>Down arrow = Scroll down one line</li> <li>G = Move to the end of the text file</li> <li>1G or g = Move to the beginning of the text file</li> <li>/characters = Search forward to the next occurrence of characters</li> <li>n = Search for the next occurrence of the previous search</li> <li>h = Display help screen</li> <li> <p>q = Quit less</p> </li> <li> <p>less comes from an older program called more which only allowed scrolling forward 1 page</p> </li> </ul>"},{"location":"linux/the-linux-command-line/#taking-a-guided-tour","title":"Taking a Guided Tour","text":"<ul> <li>The file system layout on a Linux system is much like that found on other Unix-like systems. </li> <li>The design is actually specified in a published standard called the Linux Filesystem Hierarchy Standard. </li> <li>Not all Linux distributions conform to the standard exactly but most come pretty close.</li> </ul> directory description / the root directory where everything begins /bin contains binaries (programs) that must be present for the system to boot and run /boot contains the Linux kernel, initial RAM disk image (for drivers needed at boot time), and the boot loader /dev this is a special directory that contains device nodes /etc directory contains all of the system-wide configuration files /home in normal configurations each user is given a directory here /lib contains shared library files used by the core system programs /lost+found used in the case of a partial recovery from a file system corruption event /media contains the mount points for removable media such as USB drives that are mounted automatically at insertion /mnt contains mount points for removable devices that have been mounted manually /opt used to install \u201coptional\u201d software commercial software products that might be installed on the system /proc virtual file system maintained by the Linux kernel where the \u201cfiles\u201d it contains are peepholes into the kernel itself, processes /root This is the home directory for the root account /sbin contains \u201csystem\u201d binaries for programs that perform vital system tasks that are generally reserved for the superuser /sys holds files representing different kernel parameters and system information, this is where you will spend time if you are interested in learning about kernel development /tmp intended for the storage of temporary / transient files created by various programs /usr contains programs and support files used by regular users and executable programs installed by the Linux distribution /usr/lib The shared libraries for the programs in /usr/bin /usr/local where programs that are not included with the distribution but are intended for systemwide use are installed /usr/sbin Contains more system administration programs /usr/share /usr/bin programs shared data like default configuration files and screen backgrounds /usr/share/doc documentation files for installed packages /var directory tree where data that is likely to change such as log files are stored"},{"location":"linux/the-linux-command-line/#symbolic-links","title":"Symbolic Links","text":"<p><code>ls -l  ~/.config/nvim</code></p> <p><code>lrwxrwxrwx 1 justin justin 32 Apr 12 18:19 .config/nvim -&gt; ../.dotfiles/neovim/.config/nvim</code></p> <ul> <li>first letter <code>l</code> means the filetype is a symbolic link (soft link or sym-link)</li> <li>In most Unix-like systems it is possible to have a file referenced by multiple names.</li> <li>This can be useful such as pointing a program to another version to fix system issues, such as python to python2</li> </ul>"},{"location":"linux/the-linux-command-line/#selecting-files-with-wildcards","title":"Selecting Files with Wildcards","text":"<ul> <li>using wildcards (globbing) allows selecting filenames based on patterns of characters.</li> <li>globbing is basically regex for filenames</li> </ul> Wildcard Meaning * Matches any characters ? Matches any single character [characters] Matches any character that is a member of the set characters [!characters] Matches any character that is not a member of the set characters [[:class:]] Matches any character that is a member of the specified class Character Class Meaning [:alnum:] Matches any alphanumeric character [:alpha:] Matches any alphabetic character [:digit:] Matches any numeral [:lower:] Matches any lowercase letter [:upper:] Matches any uppercase letter Pattern Matches * All files g* Any file beginning with \u201cg\u201d b*.txt Any file beginning with \u201cb\u201d followed by any characters and ending with \u201c.txt\u201d Data??? Any file beginning with \u201cData\u201d followed [abc]* Any file beginning with either an \u201ca\u201d, a \u201cb\u201d, or a \u201cc\u201d BACKUP.[0-9][0-9][0-9] Any file beginning with \u201cBACKUP.\u201d followed by exactly three numerals [[:upper:]]* Any file beginning with an uppercase letter [![:digit:]]* Any file not beginning with a numeral *[[:lower:]123] Any file ending with a lowercase letter or the numerals \u201c1\u201d, \u201c2\u201d, or \u201c3\u201d <ul> <li>be careful using normal [a-z, A-Z] notation</li> </ul>"},{"location":"linux/the-linux-command-line/#file-and-directory-crud","title":"File and Directory CRUD","text":""},{"location":"linux/the-linux-command-line/#touch","title":"touch","text":"<ul> <li>create files</li> </ul> <p><code>touch FILES...</code></p>"},{"location":"linux/the-linux-command-line/#mkdir","title":"mkdir","text":"<ul> <li>create directories</li> </ul> <p><code>mkdir DIRNAME...</code></p>"},{"location":"linux/the-linux-command-line/#cp","title":"cp","text":"<p>copy files or dirs</p> <p><code>cp FILE1 FILE2</code></p> <p><code>cp -R DIR1 DIR2</code></p> <p><code>cp ITEM... DIRNAME</code></p>"},{"location":"linux/the-linux-command-line/#mv","title":"mv","text":""},{"location":"linux/zsh/","title":"Zsh","text":"<p>the z shell</p>"},{"location":"linux/zsh/#scripts","title":"scripts","text":""},{"location":"linux/zsh/#git","title":"git","text":"<pre><code>#!/usr/bin/zsh\n\nsource venv/bin/activate\nmkdocs build\ncp CNAME docs/CNAME \ncp README.md docs/README.md\ngit add . \ngit commit -m \"auto deploy\"\ngit push </code></pre>"},{"location":"linux/zsh/#loop","title":"loop","text":"<pre><code>for x in 1 2 3 4 5 6 7 8 9; echo $x\n</code></pre>"},{"location":"linux/zsh/#ohmyzsh","title":"ohmyzsh","text":""},{"location":"linux/zsh/#plugins","title":"plugins","text":"<p>copybuffer</p> <ul> <li>copies current command line content with a short cut (ctrl + o)</li> </ul> <p>copy file </p> <pre><code>copyfile MY-FILE\n</code></pre>"},{"location":"linux/zsh/#config","title":"config","text":"<pre><code>export PATH=$PATH:/usr/local/go/bin:$HOME/.local/bin\n\nexport ZSH=\"$HOME/.oh-my-zsh\"\n\nZSH_THEME=\"robbyrussell\"\n\nCASE_SENSITIVE=\"true\"\n\nplugins=( sudo fzf vi-mode colorize colored-man-pages zsh-interactive-cd zsh-autosuggestions zsh-syntax-highlighting )\n\nsource $ZSH/oh-my-zsh.sh\n\n# cd ~D ( ~D )\n\nhash -d D=$HOME/Documents\nhash -d DP=$HOME/Documents/Projects\nhash -d G=$HOME/GitHub\nhash -d Gj=$HOME/GitHub/justinsgithub\nhash -d Gjp=$HOME/GitHub/justinsgithub/portfolio\nhash -d Gjs=$HOME/GitHub/justinsgithub/static\nhash -d Gjsd=$HOME/GitHub/justinsgithub/static/docs.justintylers.com\nhash -d Gjsdd=$HOME/GitHub/justinsgithub/static/docs.justintylers.com/docs\n\n\nalias -g L='|less'\n\nalias cat=\"/home/justin/bin/go/ccat\"\n\nalias -g NUL=\"&gt; /dev/null 2&gt;&amp;1\"\n\nalias ls='ls --color=auto'\n\nalias l=\"ls -1\"\n\nalias rm=\"mv --force -t ~/.archive\"\n\nalias R=\"\\rm -rf\"\n\n\nalias nvim=\"$HOME/bin/nvim-linux64/bin/nvim\"\n\nalias vim=\"nvim\"\n\nalias mkdir=\"mkdir -pv\"\n\nalias python=\"python3\"\n\nalias py=\"python3\"\n\nalias pyvenv=\"python3 -m venv venv\"\n\nalias pinstall=\"pip install\"\n\nalias sourcevenv=\"source venv/bin/activate\"\n\nalias zshconfig=\"vim ~/.zshrc; zsh\"\n\nalias mkserve=\"mkdocs serve\"\n\nalias mkbuild=\"mkdocs build\"\n\nalias vimconfig='vim ~/.config/nvim/init.vim'\n\nalias svimconfig='vim ~/.SpaceVim.d/init.toml'\n\nalias weztermconfig=\"vim ~/.wezterm.lua\"\n\nalias promptconfig=\"vim ~/.config/zsh/.oh-my-zsh/custom/themes/my.zsh-theme\"\n\nalias linode=\"ssh example@0.0.0.0\"\n\nalias rustdocs=\"rustup docs --book\"\n\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n</code></pre>"},{"location":"linux/zsh/#current-prompt","title":"current prompt","text":"<pre><code>PS1=\"%F{yellow}%~ %F{red} =%F{yellow}(%#)%F{red}=&gt; \"\n\nRPS1=\"%F{green}%D %F{white}%T %F{red}%n%{$reset_color%}@%F{blue}%m %h%F{yellow} %Bjobs%b %j\"\n</code></pre>"},{"location":"programming-languages/C/","title":"the C programming language","text":""},{"location":"programming-languages/C/#memory","title":"Memory","text":""},{"location":"programming-languages/C/#overview","title":"Overview","text":"<ul> <li>computer programs require memory to run </li> <li>most program crashes have something to do with memory violations</li> <li>a memory address is normally represented by hexadecimal values</li> <li>there are 3 main sections of memory, Stack, Heap, Read-only</li> </ul>"},{"location":"programming-languages/C/#stack-memory","title":"Stack Memory","text":"<ul> <li>simple data structures have continuous blocks of memory, or linear memory, one chunk of memory</li> <li>LIFO = Last In First Out, like a stack of papers </li> <li>allocation happens automatically in the function call stack</li> <li>a functions local variables are stored in stack memory</li> <li>deallocation happens automatically when the function returns  </li> <li>high speed access</li> <li>normally very small and limited in size, 1 - 8 MB typically </li> <li>stack overflow happens when all of the stack memory is exhausted </li> </ul>"},{"location":"programming-languages/C/#heap-memory","title":"Heap Memory","text":"<ul> <li>a pile of memory space available for programmers to allocate and deallocate </li> <li>allocated by programmers manually during program run time, normally using <code>malloc()</code> and pointers</li> <li>deallocated by programmers manually during program run time, normally by using <code>free()</code></li> <li>requires more care to manage or memory leak can happen to the program </li> <li>slower than stack memory </li> <li>how much memory is available to use depends on your RAM</li> </ul>"},{"location":"programming-languages/C/#read-only-memory","title":"Read-Only Memory","text":"<ul> <li>the data here is set when the memory is allocated automatically</li> <li>data here can only be read by your program, but not modified </li> <li>any attempt to modify data in read-only memory will result in segmentation fault, (program crash)</li> <li>programmer does not need to manually manage the memory space </li> </ul>"},{"location":"programming-languages/C/#pointer-basics","title":"Pointer Basics","text":""},{"location":"programming-languages/C/#what-is-a-pointer","title":"What is a pointer?","text":"<ul> <li>a pointer is an object in C that stores a memory address (ex. 0x9aa61c44) (hexadecimal)</li> <li>a pointer references a location in memory </li> <li>obtaining the value pointed to by a pointer is called dereferencing a pointer</li> <li>every variable and function occupies some space in memory, which means they can all be referenced by pointers</li> </ul>"},{"location":"programming-languages/C/#about-pointers","title":"About Pointers","text":"<ul> <li>pointers in C may seem daunting but are very interesting when you get the hang of it </li> <li>many programming tasks can be done much easier with pointers</li> <li>pointers are required to perform dynamic memory allocation </li> </ul>"},{"location":"programming-languages/C/#referencing-a-pointer","title":"Referencing a Pointer","text":"<ul> <li>declare a pointer with the <code>*</code> operator</li> <li><code>int * mypointer = NULL</code></li> <li>every pointer needs a data type (similar to a variable)</li> <li>pointers are given an name just like a variable </li> <li>pointers are assigned an initial memory location to point to, which can be <code>NULL</code></li> </ul> <pre><code>int a = 90;\nmypointer = &amp;a;\n</code></pre> <ul> <li>you can declare a pointer with the &amp; operator</li> <li>regular variable declaration / initialization</li> <li><code>&amp;a</code> will evaluate to the memory address where <code>a</code> resides in</li> <li><code>mypointer</code> references to the address that contains the value of 90</li> </ul>"},{"location":"programming-languages/C/#dereferencing-a-pointer","title":"Dereferencing a Pointer","text":"<ul> <li>dereference a pointer with <code>*</code> operator </li> <li>dereferencing a pointer is done based on the data type of the pointer  <pre><code>int * mypointer = NULL;\nint a = 90;\nmypointer = &amp;a;\nprintf(\"myptr rerferences to the memory address of %x\\n\", mypointer)\nprintf(\"myptr dererferences to the value stored at address of %d\\n\", *mypointer)\n</code></pre></li> <li>first <code>printf</code> will print the hexadecimal memory address that <code>mypointer</code> references to</li> <li>second <code>printf</code> will print the value stored at the memory address that <code>mypointer</code> references to</li> </ul>"},{"location":"programming-languages/C/#compilation-process","title":"compilation process","text":""},{"location":"programming-languages/C/#source-code","title":"source code","text":"<ul> <li>where the process starts, the files that you wrote your code in, such as hello.c</li> </ul>"},{"location":"programming-languages/C/#preprocessor","title":"preprocessor","text":"<ul> <li>compiler program ( <code>gcc</code> ) runs source code in a preprocessor to expand the code</li> <li>looks for errors, such as syntax errors</li> <li>removes comments </li> <li>replaces Macros</li> </ul>"},{"location":"programming-languages/C/#compiler","title":"compiler","text":"<ul> <li>the expanded code from the preprocessor gives code to compiler </li> <li>converts the high-level source code into assembly code</li> <li>assembly code is a series of instructions / logical units of operation / basic building blocks</li> <li>assembly code is still somewhat readable by humans</li> </ul>"},{"location":"programming-languages/C/#assembler","title":"assembler","text":"<ul> <li>converts assembly code into machine code ( hello.o )</li> <li>machine-readable code instead of human-readable </li> <li>machine code / object code are instructions that computer actually understands, which a human cannot read </li> <li>object code contains functions and symbols</li> </ul>"},{"location":"programming-languages/C/#linker","title":"linker","text":"<ul> <li>the assembler gives code to linker which combines all the object ( .o ) files</li> <li>the object files include the ones you compiled as well as any third-party libraries used</li> <li>the object files also include shared and static libraries ( .a or .so ) files </li> <li>the files all become one executable file, the final result of the compilation process</li> </ul>"},{"location":"programming-languages/C/#c-file-types","title":"C file types","text":""},{"location":"programming-languages/C/#c","title":".c","text":"<ul> <li>a source file</li> <li>contains the real source code / functions for the program</li> <li>C programming is basically a bunch if functions calling each other</li> <li>the bodies of the program as opposed to the headers of the program</li> <li>implements what you say is available in the header file</li> </ul>"},{"location":"programming-languages/C/#h","title":".h","text":"<ul> <li>a header file</li> <li>not really source code for the program, but contains variable declarations for functions in the source files</li> <li>contains more so the prototype, as opposed to the implementation of the program</li> <li>tells the compiler how many functions are available to be used </li> <li>variable declarations </li> <li>structure declarations </li> <li>function declarations</li> <li>macro declarations</li> </ul>"},{"location":"programming-languages/C/#basic-elements","title":"basic elements","text":""},{"location":"programming-languages/C/#void","title":"void","text":"<ul> <li>a keyword which means nothing, can be used to specify a function that takes no input and returns no output</li> </ul>"},{"location":"programming-languages/C/#comments","title":"comments","text":"<ul> <li>not compiled by the compiler, gets ignored</li> <li>/ block comment can span multiple lines /</li> <li>// single line comment</li> </ul>"},{"location":"programming-languages/C/#semicolon","title":"semicolon","text":"<ul> <li>each line of code needs to end with a semicolon so that the compiler knows when a line of code ends and the next one begins</li> </ul>"},{"location":"programming-languages/C/#include","title":"include","text":"<ul> <li>keyword which starts with a #</li> <li>example: <code>#include &lt;stdio.h&gt;</code></li> <li>caret brackets indicates that this header file is part of the standard library / a system file and will search for it where are system programs are stored </li> <li>using double quotes signifies the header file is part of your program in our your folder in a header file you created</li> <li>used to include other header files in our program</li> <li>other header files contain additional utilities and functions that your program can use</li> </ul>"},{"location":"programming-languages/C/#preprocessor_1","title":"preprocessor","text":"<ul> <li>performs a series of steps to get code ready for compiler</li> <li>removes comments from code</li> <li>resolves all the paths of any #includes to make sure they exist</li> <li><code>#include</code> lines are read by the preprocessor and the functions are read by the compiler</li> <li><code>#define</code> lines are Macros which are read by the preprocessor</li> </ul>"},{"location":"programming-languages/C/#define-macro","title":"define / Macro","text":"<ul> <li>a Macro is signified by the define keyword</li> <li>example: <code>#define MYNAME 'Justin'</code></li> <li>a Macro is normally named with all capital letters</li> <li>basically creates a global variable</li> </ul>"},{"location":"programming-languages/C/#makefile","title":"makefile","text":"<ul> <li>instructions to compile program </li> <li>written with shell syntax </li> <li><code>#</code> is used for comments </li> </ul>"},{"location":"programming-languages/C/#file","title":"FILE","text":"<ul> <li>a macro the C language provides which will give you the current files name </li> <li>useful for debugging</li> </ul>"},{"location":"programming-languages/C/#function","title":"FUNCTION","text":"<ul> <li>a macro the C language provides which will give you the current functions name </li> <li>useful for debugging</li> </ul>"},{"location":"programming-languages/C/#line","title":"LINE","text":"<ul> <li>a macro the C language provides which will give you the current line in the file name </li> <li>useful for debugging</li> </ul>"},{"location":"programming-languages/javascript/","title":"JavaScript","text":""},{"location":"programming-languages/javascript/#data-types","title":"data types","text":"<ul> <li>number </li> <li>float</li> <li>infinity</li> <li>-infinity</li> <li>NaN</li> <li>string</li> <li>boolean</li> <li>undefined</li> <li>null</li> </ul>"},{"location":"programming-languages/javascript/#binary-operators","title":"binary operators","text":"<ul> <li>+  add</li> <li>-  subtract</li> <li>*  multiply</li> <li>/  divide</li> <li>%  remainder</li> <li>&lt;  less than</li> <li>&gt;  greater then</li> <li>&lt;= less than or equal to</li> <li>&gt;= greater than or equal to</li> <li>== equal to</li> <li>=== equal to and same type</li> <li>and  2 truths</li> <li>||  1 truth</li> <li>typeof type of a value</li> <li>? ternary</li> </ul> <p>Important</p> <ul> <li>creating bindings with var keyword will make it global</li> </ul> <pre><code>let x = 10;\nif (true) {\nlet y = 20;\nvar z = 30;\nconsole.log(x + y + z);\n// \u2192 60\n}\n// y is not visible here\nconsole.log(x + z);\n// \u2192 40\n</code></pre> <p>Important</p> <ul> <li>creating functions using a function declaration makes it global because of hoisting</li> </ul> <pre><code>console.log(\"The future says: \", future());\n// The future says: You'll never have flying cars\n\nfunction future() {\nreturn \"You'll never have flying cars\";\n}\n</code></pre>"},{"location":"programming-languages/javascript/#var-let-const","title":"var let const","text":"<ul> <li>three ways to create or declare variables</li> <li>they also differ in three ways, use, scope, hoisting</li> <li>the use of a variable declaration is whether the declaration binding can be redeclared or updated</li> </ul>"},{"location":"programming-languages/javascript/#scope","title":"scope","text":"<ul> <li>think of a program as a building</li> <li>the scope of a variable is where in the building the variable can be accessed once it has been declared </li> <li>each declaration has a different range of scope that depends on where they were declared</li> <li>there are three types of scope, global, function, and block</li> <li></li> </ul>"},{"location":"programming-languages/javascript/#var","title":"var","text":"<ul> <li>a var declaration can be redeclared and updated like a bin of misc items in your room</li> <li>the items can change and the bin can be relabeled to hold completely new items</li> <li>var bindings have access anywhere in a program \"building\"</li> <li>var can also have function scope, which is as if there is a global medicine and the testing version</li> <li>the testing version can only be accessed inside of the lab functions and do not effect the outside versions</li> <li>however the outside versions can be modified from inside any function, </li> </ul>"},{"location":"programming-languages/javascript/#let","title":"let","text":"<ul> <li>a let declaration can be updated but not redeclared</li> <li>a let declaration is like a pantry, it can be updated to hold different food items, but its not going to be relabeled to hold different items aside from food</li> </ul>"},{"location":"programming-languages/javascript/#const","title":"const","text":"<ul> <li>a const declaration is not to be updated or redeclared</li> <li>const is like a bathtub, it will always hold water and not be redeclared to hold anything besides water</li> </ul>"},{"location":"programming-languages/javascript/#truthiness","title":"truthiness","text":"<ul> <li>boolean, context, coercion</li> </ul>"},{"location":"programming-languages/javascript/#type-coercion","title":"type coercion","text":"<ul> <li>javascript will sometimes change the type of your code before interpreting if its true or not </li> <li>js will interpret 1 as true, 'any string' as true, Boolean('false') as true, 'false' as true</li> <li>0, '', null, will be false, (falsey value)</li> </ul> <p>Danger</p> <ul> <li>JavaScript will try it's best to run any code you give it</li> <li>will perform automatic type conversion if necessary</li> <li>this can be an unwanted behavior</li> </ul> <pre><code>console.log(8 * null)\n// \u2192 0\nconsole.log(\"5\" - 1)\n// \u2192 4\nconsole.log(\"5\" + 1)\n// \u2192 51\nconsole.log(\"five\" * 2)\n// \u2192 NaN\nconsole.log(false == 0)\n// \u2192 true\n</code></pre>"},{"location":"programming-languages/javascript/#ternary-operator","title":"ternary operator ?","text":"<ul> <li>the ternary operator is designed to make quick conditional statements</li> <li>the only operator in javascript that takes 3 operands, the test operand, the truth operand, and the false operand</li> </ul> <pre><code>let isThisTrue = true\n\nisThisTrue ? console.log(\"is it true\") : console.log(\"it is not true\"):\n\nlet username = \"justin\";\n\nusername === \"justin\" ? console.log(\"enter password\") :\nusername === \"justinaawd@gmail.com\" ? console.log(\"enter your password\") :\nusername = \"\" ? console.log(\"please enter username\") : console.log(\"go away\");\n</code></pre>"},{"location":"programming-languages/javascript/#modulus-operator","title":"modulus operator %","text":"<ul> <li>finds the remainder of a division problem</li> <li>good for testing if the solution to a problem is even, such as fizzbuzz</li> </ul> <pre><code>console.log(1 % 3) // \u2192  2\nconsole.log(6 % 3) // \u2192  0\nconsole.log(7 % 4) // \u2192  3\n</code></pre>"},{"location":"programming-languages/javascript/#nullish-coalescing-and-logical-operator","title":"nullish coalescing ?? and logical operator ||","text":"<ul> <li>the nullish coalescing operator is new since 2020</li> <li>the nullish coalescing operator is more accurate than the logical operator</li> <li>tests true / false statements</li> <li>the logical operator will stop checking condition if first statement is true</li> <li>the nullish coalescing operator will stop checking condition if first statement is false</li> <li>these can be used to create short-circuit statements</li> </ul>"},{"location":"programming-languages/javascript/#try-catch-finally","title":"try catch finally","text":"<ul> <li>statements used to help dealing with bugs</li> <li>try part lets you try a series of statements / functions</li> </ul> <pre><code>try {\nconsole.log('this will run');\nconsol.lo('this misspelling will throw error');\nconsole.log('this statement will not run because the above statement did not run');\nconsole.log('nothing else runs');\n}\ncatch(errorObject) {\nconsole.log(errorObject)\nconsole.log(errorObject.name)\nconsole.log(errorObject.message)\n}\nfinally {\nconsole.log('this runs no matter what happens above');\nconsole.log('try catch block finished');\n}\n\nlet bug = {\nantennae: false,\nwidth: 2,\nheight: .5,\nwings: 2,\nlegs: 6,\ncolor: 'red',\n}\n\ntry {\nif (typeof bug.antennae !== 'boolean') throw Error('antennae is not a boolean');\nif (bug.width &gt; 5 || but.height &gt; 5) throw Error('bug too big');\nif (bug.legs % 2) throw Error('legs need to be in pairs');\nif (!['red', 'blue', 'brown', 'black'].includes(bug.color)) throw Error('Invalid color');\n}\ncatch (error) {\nconsole.log(error.name)\n}\n</code></pre>"},{"location":"programming-languages/javascript/#transpiling","title":"transpiling","text":"<ul> <li>developers use software to convert one language to another which is known as transpiling (like translate and compile)</li> <li>the process of compiling a language while transpiling it to something else</li> <li>modern javascript is transpiled so that the newer features can be used in older browsers such as the coalescing operator</li> <li>babel is an example of a tool that does this</li> </ul>"},{"location":"programming-languages/javascript/#spread-syntax","title":"spread syntax ...","text":"<ul> <li>an iterable is a list-like object such as an array, that can be iterated through</li> <li>allows a short hand method of performing iterating operations</li> </ul> <pre><code>let tasks = ['go to work'];\n\ntasks = ['eat breakfast', ...tasks];\n\ntasks = ['tasks', ...eat dinner];\n\nlet details = ['eggs and bacon', '8 hours', 'steak'];\n\nlet tasksWithDetails = [...tasks, ...details];\n</code></pre>"},{"location":"programming-languages/javascript/#promises","title":"Promises","text":"<ul> <li>a way to make sure something happens, but only if something else has taken place</li> <li>a promise takes in a callback function that will run when the Promise finishes</li> <li>a Promise is similar to a try catch block, but for callback functions</li> <li>a Promise gives us a resolve and reject object </li> <li>you can return a different message depending on if the Promise is resolve or rejected</li> <li>you can use this Promise whenever we want to perform a sequence of action </li> <li>you can run the code you want executed after the promise resolves by using \".then()\"</li> <li>the fetch method is an example of a promise</li> </ul> <pre><code>const thisPromise  = new Promise(function (resolve, reject){\nif(true === true){\nresolve('resolve message')\n}\nelse {\nreject('false message')\n}\n})\n\nthisPromise\n.then(function(message){\nconsole.log(message)\n}\n).then(function(message){\nsendToLogs(message)\n}\n).catch(function(message){\nconsole.log(message);\nsendToErrors(message):\n}\n).finally(function(){\nconsole.log('promise finished executing')\n})\n</code></pre>"},{"location":"programming-languages/javascript/#async-await","title":"Async Await","text":"<ul> <li>a cleaner syntax for using Promises</li> </ul> <pre><code>const thisPromise  = new Promise(function (resolve, reject){\nif(true === true){\nresolve('resolve message')\n}\nelse {\nreject('false message')\n}\n})\n\nasync function thisAsync() {\ntry {\nconst result = await myPromise;\nconsole.log(result);\n}\ncatch(error) {\nconsole.log(error)\n}\nfinally {\nconsole.log('async function for Promise finished')\n}\n}\n</code></pre>"},{"location":"programming-languages/javascript/basics/","title":"JavaScript Basics","text":"<ul> <li>console is a panel that displays messages</li> <li> <p>data is printed, or logged, to the console</p> </li> <li> <p>7 fundamental data types</p> </li> <li>strings</li> <li>numbers</li> <li>booleans</li> <li>null</li> <li>undefined</li> <li>symbol</li> <li>object</li> <li></li> <li>Numbers are any number without quotes: 23.8879</li> <li>Strings are characters wrapped in single or double quotes: 'Sample String'</li> <li>arithmetic operators + -  *  / %</li> <li>Objects include instances of data types </li> <li>Objects can have properties</li> <li>properties are stored information </li> <li>properties are denoted with . after the name of the object</li> <li>Objects can have methods which perform actions</li> <li>We can access properties and methods by using the . dot operator</li> <li> <p>Built-in objects are collections of methods and properties</p> </li> <li> <p>Variables hold reusable data in a program and associate it with a name</p> </li> <li>Variables are stored in memory.</li> <li>The var keyword is used in pre-ES6 versions of JS.</li> <li>let is the preferred way to declare a variable when it might be reassigned</li> <li>const is the preferred way to declare a variable with a constant value</li> <li>Variables that have not been initialized store the primitive data type undefined</li> <li>Mathematical assignment operators make it easy to calculate a new value and assign it to the same variable</li> <li> <p>The typeof keyword returns a string with the data type of the passed value</p> </li> <li> <p>if statement executes a task if specified condition evaluates to true.</p> </li> <li>if...else statements make binary decisions and execute different code blocks based on a provided condition.</li> <li>add more conditions using else if statements.</li> <li>comparison operators, including &lt;, &gt;, &lt;=, &gt;=, ===, and !== can compare two values.</li> <li>&amp;&amp; checks if both provided expressions are truthy.</li> <li>|| checks if either provided expression is truthy.</li> <li>! switches the truthiness and falsiness of a value.</li> <li>? is shorthand to simplify concise if...else statements.</li> <li>switch statement can be used to simplify the process of writing multiple else if statements</li> <li> <p>switch statment break keyword stops the remaining cases from being checked and executed in a switch statement.</p> </li> <li> <p>a function is a reusable block of code that groups together a sequence of statements to perform a specific task.</p> </li> <li> <p>a parameter is a named variable inside a function\u2019s block which will be assigned the value of the argument passed in when the function is invoked:</p> </li> <li> <p>ES6 introduces new ways of handling arbitrary parameters through default parameters </p> </li> <li> <p>default parameters allow us to assign a default value to a parameter in case no argument is passed into the function.</p> </li> <li> <p>use return statement to get a value from a function.</p> </li> <li> <p>function definition can be made concise using concise arrow notation</p> </li> <li> <p>scope defines where a variable is accessible from inside a program</p> </li> <li>Blocks are statements that exist within curly braces</li> <li>a variable in </li> <li>global variables are accessible to the entire program / program context</li> <li>local variables are variables that exist within block scope / the block of code they are assigned</li> <li>global namespace is the space in our code that contains global data</li> <li> <p>scope pollution is when too many variables exist in a namespace / globally or variable names are reused.</p> </li> <li> <p>Arrays are lists that store data</p> </li> <li>Arrays are created with brackets</li> <li>Each item inside of an array is at an index starting at 0</li> <li>access item in array using its index</li> <li>change item in an array using its index</li> <li>Arrays have a length property</li> <li>length property allows you to see how many items are in an array</li> <li>Arrays have their own methods</li> <li>Array methods include .push() .pop() .slice() .shift() </li> <li>Some built-in methods are mutating</li> <li>mutating methods change the array</li> <li>some array methods are not mutating</li> <li>variables that contain arrays can be declared with let or const</li> <li>Even when declared with const arrays are still mutable</li> <li>an array variable declared with const cannot be reassigned</li> <li>arrays mutated inside of a function will stay changed outside the function</li> <li>arrays can be nested inside other arrays</li> <li> <p>To access elements in nested arrays chain indices using bracket notation</p> </li> <li> <p>loops perform repetitive actions so we don\u2019t have to code that process manually every time</p> </li> <li>how to write for loops with an iterator variable that increments or decrements</li> <li>how to use a for loop to iterate through an array</li> <li>a nested for loop is a loop inside another loop</li> <li>while loops allow for different types of stopping conditions</li> <li>stopping conditions are crucial for avoiding infinite loops.</li> <li>do...while loops run code at least once\u2014 only checking the stopping condition after the first execution</li> <li> <p>the break keyword allows programs to leave a loop during the execution of its block</p> </li> <li> <p>abstraction allows writing complicated code in a cleaner way </p> </li> <li>clean code is easy to reuse, debug, and understand for human readers</li> <li>functions work the same way as any other type of data</li> <li>functions can be reassigned to new variables</li> <li>functions have properties and methods like any other object</li> <li>functions can be passed into other functions as parameters</li> <li> <p>a higher-order function is a functions that accepts a function as parameters and / or returns a function</p> </li> <li> <p>objects store collections of key-value pairs / properties</p> </li> <li>when an object property is a function, it is known as a method</li> <li>an object literal is composed of comma-separated, key-value pairs </li> <li>access a property within an object by using dot operator or bracket notation</li> <li>We can navigate nested objects by chaining dots or brackets</li> <li>objects are mutable</li> <li>objects are passed by reference</li> <li>changes to an object passed into a function are permanent</li> <li> <p>iterate through objects using the for (let item in object) syntax</p> </li> <li> <p>object that a method belongs to is the calling object</p> </li> <li>this refers to the calling object</li> <li>this can be used to access properties of the calling object</li> <li>methods do not automatically have access to other internal properties of the calling object.</li> <li>value of this depends on where this is being accessed from.</li> <li>cannot use arrow functions as methods to access calling object this</li> <li>objects do not have built-in privacy</li> <li>objects have naming conventions to communicate privacy</li> <li>underscore before a property name means it should be treated as private</li> <li>set and get methods are ways of working with private properties</li> <li>factory functions creating object instances quickly and repeatedly</li> <li>there are different ways to use object destructuring</li> <li>a way of object destructuring is the property value shorthand </li> <li>destructured assignment is a way of object destructuring</li> </ul>"},{"location":"programming-languages/javascript/basics/#examples","title":"Examples","text":""},{"location":"programming-languages/javascript/basics/#arrays-and-loops","title":"arrays and loops","text":"<pre><code>const rapperArray = [\"Lil' Kim\", \"Jay-Z\", \"Notorious B.I.G.\", \"Tupac\"];\n\nfor(let i = 0; i &lt; rapperArray.length; i++){\nconsole.log(rapperArray[i]); if (rapperArray[i] === \"Notorious B.I.G.\"){\nbreak\n}\n}\n\nconsole.log(\"And if you don't know, now you know.\")\n\nconst cupsOfSugarNeeded = 5;\n\nlet cupsAdded = 0;\n\ndo{\ncupsAdded++\nconsole.log(cupsAdded)\n} while(cupsAdded &lt; cupsOfSugarNeeded);\n\nconst cards = ['diamond', 'spade', 'heart', 'club'];\n\nlet currentCard;\n\nwhile(currentCard !== \"spade\"){\ncurrentCard = cards[Math.floor(Math.random() * 4)];\nconsole.log(currentCard)\n}\n\n\nconst bobsFollowers = [\"alex\", \"richard\", \"michael\", \"nick\"]\n\nconst tinasFollowers = [\"alex\",\"nicole\",\"michael\"]\n\nconst mutualFollowers = []\n\nfor (let x = 0; x &lt; bobsFollowers.length; x++){\nfor (let y = 0; y &lt; tinasFollowers.length; y++){\nif(bobsFollowers[x] === tinasFollowers[y]){\nmutualFollowers.push(bobsFollowers[x])\n}\n}\n}\n\n\nconst vacationSpots = ['Bali', 'Paris', 'Tulum'];\n\nfor(let i = 0; i &lt; vacationSpots.length; i ++){\nconsole.log(`I would love to visit ${vacationSpots[i]}`)\n}\n\nfor (let counter = 3; counter &gt;= 0; counter--){\nconsole.log(counter);\n}\n\nfor(let i = 5; i &lt; 11; i++){\nconsole.log(i)\n}\n\nconst x = [1,2,3]\n\ny = `it's as easy as  ${x.map(z =&gt; z.toString()).join(\", \")}... I mean ${x.reverse().map(a =&gt; a.toString()).join(\", \")}`\n\nconsole.log(y)\n\nconst numberClusters = [[1,2], [3,4],[5,6]]\n\nconst target = numberClusters[2][1]\n\nconst numberClusters = [[1,2], [3,4],[5,6]]\n\nconst target = numberClusters[2][1]\n\nconst groceryList = ['orange juice', 'bananas', 'coffee beans', 'brown rice', 'pasta', 'coconut oil', 'plantains'];\n\ngroceryList.shift()\nconsole.log(groceryList)\n\ngroceryList.unshift(\"popcorn\")\n\nconsole.log(groceryList)\n\nconsole.log(groceryList.slice(1,4))\nconsole.log(groceryList)\n\nconst pastaIndex = groceryList.indexOf(\"pasta\")\nconsole.log(pastaIndex)\n\nconst chores = ['wash dishes', 'do laundry', 'take out trash', 'cook dinner', 'mop floor'];\n\nchores.pop()\n\nconsole.log(chores)\n\n\nconst chores = ['wash dishes', 'do laundry', 'take out trash'];\n\nchores.push(\"munch\", \"snack\")\n\nconsole.log(chores)\n\nlet condiments = ['Ketchup', 'Mustard', 'Soy Sauce', 'Sriracha'];\n\nconst utensils = ['Fork', 'Knife', 'Chopsticks', 'Spork'];\n\ncondiments[0] = \"Mayo\";\n\nconsole.log(condiments);\n\ncondiments = [\"Mayo\"];\n\nconsole.log(condiments);\n\nutensils[3] = \"Spoon\";\n\nconsole.log(utensils);\nconsole.log(utensils.length);\n\nconst famousSayings = ['Fortune favors the brave.', 'A joke is a very serious thing.', 'Where there is love there is life.'];\n\nlet listItem = famousSayings[0]\nconst firstItem = famousSayings[0]\n\nconsole.log(listItem)\nconsole.log(famousSayings[2])\nconsole.log(famousSayings[3]) // undefined\n\n\n\nconst famousSayings = ['Fortune favors the brave.', 'A joke is a very serious thing.', 'Where there is love there is life.'];\n\nlistItem = famousSayings[0]\n\nconsole.log(listItem)\n\n\nconst hobbies = [\"eat\", \"munch\", \"snack\"]\n\nconsole.log(hobbies)\n</code></pre>"},{"location":"programming-languages/javascript/basics/#conditionals-and-scope","title":"conditionals and scope","text":"<pre><code>const logVisibleLightWaves = () =&gt; {\nlet lightWaves = 'Moonlight';\nlet region = 'The Arctic';\nif  (region === \"The Arctic\"){\nlet lightWaves = \"Northern Lights\";\nconsole.log(lightWaves);\n}\nconsole.log(lightWaves);\n};\n\n// the if statement does not change the first lightWaves assignment\nlogVisibleLightWaves();\n\nconst satellite = 'The Moon';\nconst galaxy = 'The Milky Way';\nlet stars = 'North Star';\n\nconst callMyNightSky = () =&gt; {\nstars = \"Sirius\";\nreturn 'Night Sky: ' + satellite + ', ' + stars + ', ' + galaxy;\n};\n\nconsole.log(callMyNightSky());\nconsole.log(stars)\n\n\n/* throws error \nconst logVisibleLightWaves = () =&gt; {\n  const lightWaves = \"Moonlight\";\n  console.log(lightWaves)\n}\n\nconsole.log(logVisibleLightWaves())\n\nconsole.log(lightWaves)\n*/\n\nconst satellite = \"The Moon\";\n\nconst galaxy = \"The Milky Way\";\n\nconst stars = \"North Star\";\n\nconst callMyNightSky = () =&gt; {\nreturn \"Night Sky: \" + satellite + \", \" + stars + \", and \" + galaxy;\n}\n\nconsole.log(callMyNightSky())\n\nconst city = \"New York City\"\n\nconst logCitySkyline = () =&gt; {\nlet skyscraper = \"Empire State Building\";\nreturn \"The stars over the \" + skyscraper + \" in \" + city;\n}\n\nconsole.log(logCitySkyline())\n\nconst plantNeedsWater = day =&gt; day === 'Wednesday' ? true : false;\n\n\nconst plantNeedsWater = (day) =&gt; {\nif (day === 'Wednesday') {\nreturn true;\n} else {\nreturn false;\n}\n};\n\nconst plantNeedsWater = function(day) {\nif (day === 'Wednesday') {\nreturn true;\n} else {\nreturn false;\n}\n};\n\n\n\nlet athleteFinalPosition = 'first place';\n\nswitch (athleteFinalPosition) {\ncase \"first place\":\nconsole.log(\"You get the gold medal!\");\nbreak;\ncase \"second place\":\nconsole.log(\"You get the silver medal!\");\nbreak;\ncase\"third place\":\nconsole.log(\"You get the bronze medal!\")\nbreak;\ndefault:\nconsole.log(\"No medal awarded.\");\nbreak;\n}\n\nlet isLocked = false;\n\nisLocked ? console.log('You will need a key to open the door.') :\nconsole.log('You will not need a key to open the door.');\n\nlet isCorrect = true;\n\nisCorrect ? console.log('Correct!') :  console.log('Incorrect!');\n\nlet favoritePhrase = 'Love That!';\n\nfavoritePhrase === 'Love That!' ? console.log('I love that!') : console.log(\"I don't love that!\")\n\n\nlet tool = 'marker';\n\nlet writingUtensil = tool || \"pen\"\n\nconsole.log(`The ${writingUtensil} is mightier than the sword.`);\n\nlet wordCount = 1;\n\nif (wordCount) {\nconsole.log(\"Great! You've started your work!\");\n} else {\nconsole.log('Better get to work!');\n}\n\n\nlet favoritePhrase = '';\n\nif (favoritePhrase) {\nconsole.log(\"This string doesn't seem to be empty.\");\n} else {\nconsole.log('This string is definitely empty.');\n}\n\nlet mood = 'sleepy';\nlet tirednessLevel = 6;\n\nif (mood === \"sleepy\" &amp;&amp; tirednessLevel &gt; 8){\nconsole.log(\"time to sleep\")\n} else {\nconsole.log(\"not bed time yet\")\n}\n\nconsole.log(Math.random() * 100);\n\nlet levelUp = 10;\nlet powerLevel = 9001;\nlet multiplyMe = 32;\nlet quarterMe = 1152;\n\nlevelUp += 5;\npowerLevel -= 100;\nmultiplyMe *= 11;\nquarterMe /= 4;\n\n\nconsole.log('The value of levelUp:', levelUp); console.log('The value of powerLevel:', powerLevel); console.log('The value of multiplyMe:', multiplyMe); console.log('The value of quarterMe:', quarterMe);\n\nlet gainedDollar = 3;\nlet lostDollar = 50;\n\ngainedDollar ++;\nlostDollar -- ;\n\nconst favoriteAnimal = \"armadillo\";\n\nconsole.log(\"My favorite animal: \" + favoriteAnimal);\n\nconst myName = \"Justin\";\n\nconst myCity = \"Kenai\";\n\nconsole.log(`My name is ${myName}. My favorite city is ${myCity}.`;\n\nlet newVariable = 'Playing around with typeof.';\n\nconsole.log(typeof newVariable);\n\nnewVariable = 1;\nconsole.log(typeof newVariable);\n</code></pre>"},{"location":"programming-languages/javascript/basics/#iterators","title":"iterators","text":"<pre><code>// ITERATORS\n\n\nconst animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];\n\nconst secretMessage = animals.map(animal =&gt; animal[0])\n\nconsole.log(secretMessage.join(''));\n\nconst bigNumbers = [100, 200, 300, 400, 500];\n\nconst smallNumbers = bigNumbers.map(num =&gt; num / 100)\nconst programmingLanguages = [\"python\", \"ruby\", \"rust\"];\nprogrammingLanguages.forEach(lang =&gt; console.log(lang));\n\nconst nums = [1,2,3];\nconst squareNums = nums.map(num =&gt; num ** 2);\n\nconst stuff = [\"chair\", \"desk\", \"wallet\", 5, 2, {\"phrase\": \"words\"}];\n\nconst stuffStrings = stuff.filter(item =&gt; typeof item === \"string\");\n\nconst noNumbers = stuff.filter(item =&gt; typeof item === \"number\");\n</code></pre>"},{"location":"programming-languages/javascript/basics/#higher-order-functions","title":"higher-order functions","text":"<pre><code>// HIGH ORDER FUNCTIONS\n\nconst timeFunctionRuntime = (functionParameter) =&gt; {\nconst t1 = Date.now();\nfunctionParameter();\nconst t2 = Date.now(); return t2 - t1;\n}\n\nconst addTwo = num =&gt; num + 2;\n\n\n\nconst checkConsistentOutput = (x, y) =&gt; {\nif (x(y) === x(y)){\nreturn x(y)\n} else {\nreturn \"This function returned inconsistent results\";\n}\n}\n\nconsole.log(checkConsistentOutput(addTwo, 5));\n</code></pre>"},{"location":"programming-languages/javascript/basics/#objects","title":"objects","text":"<pre><code>function robotFactory(model, mobile){\nreturn {\nmodel: model,\nmobile: mobile,\nbeep() {\nconsole.log('Beep Boop');\n}\n}\n}\n\nconst robotFactory = (model, mobile) =&gt; {\nreturn {\nmodel,\nmobile,\nbeep() {\nconsole.log('Beep Boop');\n}\n}\n}\n\n// To check that the property value shorthand technique worked:\nconst newRobot = robotFactory('P-501', false)\nconsole.log(newRobot.model)\nconsole.log(newRobot.mobile)\n// To check that the property value shorthand technique worked:\nconst newRobot = robotFactory('P-501', false)\nconsole.log(newRobot.model)\nconsole.log(newRobot.mobile)\n\n\nconst robot = {\n_model: '1E78V2',\n_energyLevel: 100,\nget energyLevel() {\nif (typeof this._energyLevel === \"number\"){\nreturn `My current energy level is ${this._energyLevel}`\n} else {\nreturn \"System malfunction: cannot retrieve energy level\" }\n},  _numOfSensors: 15,\nget numOfSensors(){\nif(typeof this._numOfSensors === 'number'){\nreturn this._numOfSensors;\n} else {\nreturn 'Sensors are currently down.'\n}\n},\nset numOfSensors(num){\nif(typeof this._numOfSensors === 'number' &amp;&amp; num &gt;= 0){\nthis._numOfSensors = num\n} else {\nconsole.log(\"Pass in a number that is greater than or equal to 0\")\n}\n},\nprovideInfo(){\nreturn `I am ${this.model} and my current energy level is ${this.energyLevel}.`\n},\nfunctionality: {\nbeep() {\nconsole.log('Beep Boop');\n},\nfireLaser() {\nconsole.log('Pew Pew');\n},\n}\n};\n\nconst robotKeys = Object.keys(robot);\nconsole.log(robotKeys);\n\nconst robotEntries = Object.entries(robot)\n\nconsole.log(robotEntries);\n\nconst newRobot = Object.assign({\nlaserBlaster: true,\nvoiceRecognition: true\n}, robot)\n\nconsole.log(newRobot);\nrobot.numOfSensors = 100\nconsole.log(robot.numOfSensors)\nconsole.log(robot.energyLevel)\n\nconst { functionality } = robot\n\nfunctionality.beep()\n\nconsole.log(robot.provideInfo())\n\n\n\nlet retreatMessage = 'We no longer wish to conquer your planet. It is full of dogs, which we do not care for.';\n\nlet spaceship = {\nhomePlanet: 'Earth',\ncolor: 'silver',\n'Active Mission' : true,\n'Fuel Type': 'Turbo Fuel',\nnumCrew: 5,\n'Secret Mission' : 'Discover life outside of Earth.',\nflightPath: ['Venus', 'Mars', 'Saturn'],\npassengers: null,\ntelescope: {\nyearBuilt: 2018,\nmodel: \"91031-XLT\",\nfocalLength: 2032 },\ncrew: {\ncaptain: { name: 'Sandra', degree: 'Computer Engineering', encourageTeam() { console.log('We got this!') },\n'favorite foods': ['cookies', 'cakes', 'candy', 'spinach'] }\n},\nengine: {\nmodel: \"Nimbus2000\"\n},\nnanoelectronics: {\ncomputer: {\nterabytes: 100,\nmonitors: \"HD\"\n},\n'back-up': {\nbattery: \"Lithium\",\nterabytes: 50\n}\n},  retreat(){ console.log(retreatMessage) },\nakeOff(){ console.log(\"Spim... Borp... Glix... Blastoff!\") }\n};\nspaceship.passengers = [\n{firstName:\"larry\", lastName:\"smith\"},\n{firstName:\"jessica\"},\n{firstName:\"stan\"}\n]\n\nfor (let passenger in spaceship.passengers){\nconsole.log(`passenger name: ${spaceship.passengers[passenger]}`)\n}\nfor (let crewmember in spaceship.crew){\nconsole.log(`${spaceship.crew[crewmember].name}: ${spaceship.crew[crewmember].degree}`)\n}\nconst firstPassenger = spaceship.passengers[0]\nconst isActive = spaceship[\"Active Mission\"]\nconst crewCount = spaceship.numCrew;\nconst planetArray = spaceship.flightPath;\nconst capFave = spaceship.crew.captain[\"favorite foods\"][0];\n\nconst greenEnergy = thisObject =&gt; thisObject[\"Fuel Type\"] = \"avocado oil\"\nconst remotelyDisable = obj =&gt; obj.disabled = true\n\ngreenEnergy(spaceship)\nremotelyDisable(spaceship)\n\nspaceship.takeOff()\nspaceship.retreat()\n\n\nlet propName =  'Active Mission';\n\nspaceship.numEngines = 5\nspaceship.color = \"glorious gold\"\nconsole.log(spaceship[propName])\n\n\ndelete spaceship.propName\n</code></pre>"},{"location":"programming-languages/javascript/basics/#classes","title":"classes","text":"<pre><code>class Surgeon {\nconstructor(name, department) {\nthis._name = name;\nthis._department = department;\nthis._remainingVacationDays = 20;\n}\n\nget name() {\nreturn this._name;\n}\n\nget department() {\nreturn this._department;\n}\n\nget remainingVacationDays() {\nreturn this._remainingVacationDays;\n}\n\ntakeVacationDays(daysOff) {\nthis._remainingVacationDays -= daysOff;\n}\n}\n\nconst surgeonRomero = new Surgeon('Francisco Romero', 'Cardiovascular');\nconst surgeonJackson = new Surgeon('Ruth Jackson', 'Orthopedics');\n\nconsole.log(surgeonRomero.name)\nsurgeonRomero.takeVacationDays(3)\nconsole.log(surgeonRomero.remainingVacationDays)\n</code></pre>"},{"location":"programming-languages/javascript/basics/#nodejs-server","title":"Node.js server","text":"<pre><code>var http = require('http');\nvar fs = require('fs');\nvar path = require('path');\n\nhttp.createServer(function(request, response) {\nconsole.log('request ', request.url);\n\nvar filePath = '.' + request.url;\nif (filePath == './') {\nfilePath = './index.html';\n}\n\nvar extname = String(path.extname(filePath)).toLowerCase();\nvar mimeTypes = {\n'.html': 'text/html',\n'.js': 'text/javascript',\n'.css': 'text/css',\n'.json': 'application/json',\n'.png': 'image/png',\n'.jpg': 'image/jpg',\n'.gif': 'image/gif',\n'.svg': 'image/svg+xml',\n'.wav': 'audio/wav',\n'.mp4': 'video/mp4',\n'.woff': 'application/font-woff',\n'.ttf': 'application/font-ttf',\n'.eot': 'application/vnd.ms-fontobject',\n'.otf': 'application/font-otf',\n'.wasm': 'application/wasm'\n};\n\nvar contentType = mimeTypes[extname] || 'application/octet-stream';\n\nfs.readFile(filePath, function(error, content) {\nif (error) {\nif (error.code == 'ENOENT') {\nfs.readFile('./404.html', function(error, content) {\nresponse.writeHead(404, {\n'Content-Type': 'text/html'\n});\nresponse.end(content, 'utf-8');\n});\n} else {\nresponse.writeHead(500);\nresponse.end('Sorry, check with the site admin for error: ' + error.code + ' ..\\n');\n}\n} else {\nresponse.writeHead(200, {\n'Content-Type': contentType\n});\nresponse.end(content, 'utf-8');\n}\n});\n\n}).listen(8125);\nconsole.log('Server running at http://127.0.0.1:8125/');\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/","title":"Code Challenges","text":""},{"location":"programming-languages/javascript/code-challenges/#eightball","title":"eightball","text":"<pre><code>const userName = \"Justin\"\n\nlet userQuestion = \"is tomorrow good day?\"\n\nuserName ? console.log(`Hello ${userName}`) : console.log(\"Hello!\")\n\nif (userQuestion){\nuserName ? console.log(`Hello ${userName}, you asked ${userQuestion}`) : console.log(`you asked ${userQuestion}`)\n}\n\nlet randomNumber = Math.floor(Math.random() * 8)\n\nswitch (randomNumber) {\ncase 0:\nconsole.log(\"It is certain\");\nbreak;\ncase 1:\nconsole.log(\"It is decidedly so\");\nbreak;\ncase 2:\nconsole.log(\"Reply hazy try again\");\nbreak;\ncase 3:\nconsole.log(\"Cannot predict now\");\nbreak;\ncase 4:\nconsole.log(\"Do not count on it\");\nbreak;\ncase 5:\nconsole.log(\"My sources say no\");\nbreak;\ncase 6:\nconsole.log(\"Outlook not so good\");\nbreak;\ncase 7:\nconsole.log(\"Signs point to less\");\nbreak;\n}\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/#weather-converter","title":"weather converter","text":"<pre><code>// weather converter\n\n// the weather forecast today\nlet kelvin = 293\n\n// converting kelvin to celsius\nconst celsius = kelvin - 273\nconsole.log(`The temperature is ${celsius} in fahrenheit`)\n// converting celsius to fahrenheit\nconst fahrenheit = Math.floor(celsius * (9/5) + 32)\n\nconst newton = Math.floor(celsius * (33 / 100))\n\nconsole.log(`The temperature is ${fahrenheit} in fahrenheit`)\n\nconsole.log(`The temperature is ${newton} in newton`)\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/#age-in-dog-years","title":"age in dog years","text":"<pre><code>// age in dog years\n\n// setting variable as my age\nlet myAge = 26;\nconst myName = \"Justin\".toLowerCase();\n// the first 2 years in a dog's life age faster than the rest \nconst earlyYears = 2;\n\n// the toll in human years that the first 2 years takes on a dog\nconst earlyYearsToll = earlyYears * 10.5;\n\n// the remaining years of my age to calculate\nconst laterYears = myAge - earlyYears;\n\n// the toll in human years the rest of the years past the age of 2 take on a dog\nconst laterYearsToll = laterYears * 4;\n\n// my age in dog years (very old because dogs normally do not live this long)\nconst myAgeInDogYears = earlyYearsToll + laterYearsToll;\n\nconsole.log(`My name is ${myName}. I am ${myAge} years old in human years which is ${myAgeInDogYears} years old in dog years.`)\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/#triangle-pyramid","title":"triangle pyramid","text":"<pre><code>const loopATriangle = () =&gt; {\nlet material = '#';\nlet construct = '#'\nfor (i = 0; i &lt; 7; i++) {\nconsole.log(construct)\nconstruct += material\n};\n};\n\nloopATriangle()\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/#fizzbuzz","title":"fizzbuzz","text":"<pre><code>const fizzbuzz = () =&gt; {\nfor (i = 1; i &lt;= 100; i++) {\nif (i % 3 === 0 &amp;&amp; i % 5 === 0) {\nconsole.log('fizzbuzz')\n} else if (i % 3 === 0) {\nconsole.log('fizz')\n} else if (i % 5 === 0) {\nconsole.log('buzz')\n} else {\nconsole.log(i)\n}\n};\n};\n\nfizzbuzz()\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/#chessboard","title":"chessboard","text":"<pre><code>const makeChessboard = (size) =&gt; {\nconst rows = size / 2;\nconst row = ' # # # #\\n\\n# # # # \\n\\n';\nlet board = '';\nfor (i = 0; i &lt; rows; i++) {\nboard += row;\n};\nreturn board\n};\n\nlet chessBoard = makeChessboard(8)\n\nconsole.log(chessBoard)\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/#find-the-minimum","title":"find the minimum","text":"<pre><code>const findMin = (firstNum, secondNum) =&gt; {\nif (firstNum &lt; secondNum) {\nreturn firstNum\n} else if (secondNum &lt; firstNum) {\nreturn secondNum\n}\nreturn firstNum;\n}\n\n\nconsole.log(findMin(1, 3))\nconsole.log(findMin(3, 2))\nconsole.log(findMin(3, 3))\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/#count-bs-and-count-the-char","title":"count B's and count the char","text":"<pre><code>// version 1\nconst countB = (aString) =&gt; {\nBcount = 0;\nstringLength = aString.length;\nfor (let i = 0; i &lt;= stringLength; i++) {\nif (aString[i] === \"B\") {\nBcount++;\n}\n};\nreturn Bcount\n};\nconsole.log(countB('BillyBoB'))\nconsole.log(countB('silly'))\n\n\nconst countChar = (aString, aChar) =&gt; {\ncharCount = 0;\nstringLength = aString.length;\nfor (let i = 0; i &lt;= stringLength; i++) {\nif (aString[i] === aChar) {\ncharCount++;\n}\n};\nreturn charCount\n};\nconsole.log(countChar('BillyBoB', 'B'));\nconsole.log(countChar('silly', 'i'));\nconsole.log(countChar('silly', 'o'));\n\n\n// version 2\nconst countB2 = (aString) =&gt; {\nreturn countChar(aString, 'B');\n};\nconsole.log(countB2('BillyBoB'))\nconsole.log(countB2('silly'))\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/#sum-and-range","title":"sum and range","text":"<pre><code>const range = (start, end, step=1) =&gt; {\n\nconst thisArray = [];\n\nif (step &gt;= 0) { for (let i = start; i &lt;= end; i+=step) {\nthisArray.push(i)\n};\n} else {\nfor (let i = start; i &gt;= end; i+=step) {\nthisArray.push(i)\n};\n}\nreturn thisArray\n\n};\n\nconst sum = (thisArray) =&gt; {\nlet sumOfElements = 0\n\nfor (let i of thisArray) {\nsumOfElements += parseInt(i);\n};\n\nreturn sumOfElements\n};\n\nconsole.log(range(1,10))\n\nconsole.log(sum(range(1,10)))\n\nconsole.log(range(1,10,2))\n\nconsole.log(range(5,2,-1))\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/#reverse-array","title":"reverse array","text":"<pre><code>const reverseArray = thisArray =&gt; {\nconst reversedArray = [];\n\nfor (let i of thisArray) {\nreversedArray.unshift(i);\n}\n\nreturn reversedArray;\n};\n\nconsole.log(reverseArray([1, 2, 3]));\n</code></pre>"},{"location":"programming-languages/javascript/code-challenges/#reverse-array-in-place","title":"reverse array in place","text":"<pre><code>const reverseArrayInPlace = thisArray =&gt; {\nconst oldThisArray = thisArray.slice();\nthisArray.length = 0;\nfor (let i of oldThisArray) {\nthisArray.unshift(i);\n};\nreturn thisArray\n};\n\nconst onetwothree = [1, 2, 3];\nreverseArrayInPlace(onetwothree);\n\nconsole.log(onetwothree);\n</code></pre>"},{"location":"programming-languages/javascript/functions/","title":"JavaScript Functions","text":""},{"location":"programming-languages/javascript/functions/#function-notation","title":"function notation","text":"<ul> <li>the 3 ways below create the same function </li> </ul> <pre><code>function square(x) {\nreturn x * x;\n}\n\nlet square = function(x){\nreturn x * x;\n}\n\nconst square = x =&gt; x * x;\n</code></pre>"},{"location":"programming-languages/javascript/functions/#the-call-stack","title":"the call stack","text":"<ol> <li>greet(\"Harry\"); runs first, jumps to first line of greet function </li> <li>gives control to console.log </li> <li>returns control to greet function</li> <li>comes to end of function</li> <li>returns control to call stack context</li> <li>console.log(\"Bye\");</li> </ol> <pre><code>function greet(who) {\nconsole.log(\"Hello \" + who);\n}\ngreet(\"Harry\"); // runs first, has to jump up to 1st line of function, line 2\nconsole.log(\"Bye\"); // runs second\n</code></pre> <ul> <li>storing the context of the program uses computer memory</li> <li>if call stack grows too large, computer errs</li> <li>err is \"out of stack space\" or \"too much recursion\"</li> </ul>"},{"location":"programming-languages/javascript/functions/#blowing-the-stack","title":"blowing the stack","text":"<p>Danger</p> <ul> <li>this would eventually use up the computer memory going back and forth</li> </ul> <pre><code>function chicken() {\nreturn egg();\n}\nfunction egg() {\nreturn chicken();\n}\nconsole.log(chicken() + \" came first.\");\n// \u2192 ??\n</code></pre>"},{"location":"programming-languages/javascript/functions/#optional-arguments","title":"optional arguments","text":"<ul> <li>ignores the additional true and \"hedgehog\" arguments</li> </ul> <pre><code>function square(x) { return x * x; }\nconsole.log(square(4, true, \"hedgehog\"));\n// \u2192 16\n</code></pre>"},{"location":"programming-languages/javascript/functions/#closure","title":"closure","text":"<ul> <li>functions can be treated as values and used as variables</li> <li>create bindings to functions just as any other value with var, let, and const</li> <li>function local bindings are recreated everytime they are called </li> <li>we can create bindings to a particular function call to save that instance of a local binding inside of the function call </li> </ul> <pre><code>function wrapValue(n) {\nlet local = n;\nreturn () =&gt; local;\n}\nlet wrap1 = wrapValue(1);\nlet wrap2 = wrapValue(2);\nconsole.log(wrap1());\n// \u2192 1\nconsole.log(wrap2());\n// \u2192 2\n\n\nfunction multiplier(factor) {\nreturn number =&gt; number * factor;\n}\nlet twice = multiplier(2);\nconsole.log(twice(5));\n// \u2192 10\n</code></pre>"},{"location":"programming-languages/javascript/objects/","title":"Classes and Objects","text":""},{"location":"programming-languages/javascript/objects/#mutability","title":"mutability","text":"<ul> <li>the value of 10 will always be 10</li> <li>the value of string \"cat\" will always be \"cat\"</li> <li>object values can be changed</li> <li>2 different objects holding the same values are not considered equal</li> </ul> <pre><code>let object1 = {value: 10};\nlet object2 = object1;\nlet object3 = {value: 10};\nconsole.log(object1 == object2);\n// \u2192 true\nconsole.log(object1 == object3);\n// \u2192 false\nobject1.value = 15;\nconsole.log(object2.value);\n// \u2192 15\nconsole.log(object3.value);\n// \u2192 10\n</code></pre>"},{"location":"programming-languages/lua/","title":"Lua Lang","text":""},{"location":"programming-languages/lua/#about","title":"About","text":""},{"location":"programming-languages/lua/#what","title":"What","text":"<ul> <li> <p>Lua is a scripting lang, dynamically typed, similar to python and ruby </p> </li> <li> <p>Lua is much faster than majority of scripting langs because it is a very small language.</p> </li> <li> <p>Made to be used with other languages or gluing languages and systems together.</p> </li> <li> <p>It supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description.</p> </li> <li> <p>Supports all types of programming, procedural, oop, functional.</p> </li> </ul>"},{"location":"programming-languages/lua/#who","title":"Who","text":"<ul> <li> <p>Created and maintained by a team at the University of Rio de Janeiro in Brazil</p> </li> <li> <p>\"Lua\" means \"Moon\" in Portuguese. </p> </li> </ul>"},{"location":"programming-languages/lua/#why","title":"Why","text":"<ul> <li> <p>Great for embedded systems because it is so small and integrating with other languages or inside applications like NeoVim</p> </li> <li> <p>Proven to be the fastest scripting language and even faster with LuaJIT \"Just In Time\" compiler</p> </li> </ul>"},{"location":"programming-languages/lua/#where","title":"Where","text":"<ul> <li>Runs every where C runs, which is almost all platforms used today</li> </ul>"},{"location":"programming-languages/lua/#when","title":"When","text":"<ul> <li>Created in 1993</li> <li>latest release in 2020, 5.4</li> <li>5.1, NeoVim version, in 2006</li> </ul>"},{"location":"programming-languages/lua/#install","title":"Install","text":"<ul> <li>example script for linux to build from source</li> </ul> <pre><code>curl -R -O http://www.lua.org/ftp/lua-5.4.6.tar.gz\ntar zxf lua-5.4.6.tar.gz\ncd lua-5.4.6\nmake all test\n</code></pre> <ul> <li> <p>build from source on windows with instructions here http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies</p> </li> <li> <p>package manager =  <code>sudo apt install lua5.1</code></p> </li> <li> <p>use LuaDist https://github.com/LuaDist/Repository/wiki/LuaDist%3A-Installation</p> </li> <li> <p>use the live demo online https://www.lua.org/cgi-bin/demo</p> </li> </ul>"},{"location":"programming-languages/lua/#learning","title":"Learning","text":"<ul> <li> <p>reference manual https://www.lua.org/manual/5.1</p> </li> <li> <p>progamming in Lua book, 1st edition free online https://www.lua.org/pil/contents.html, covers Lua 5.0</p> </li> </ul>"},{"location":"programming-languages/lua/#getting-started","title":"Getting Started","text":"<ul> <li>run file</li> </ul> <p><pre><code>lua file.lua\n</code></pre> - run interpreter</p> <pre><code>lua file.lua\n</code></pre> <ul> <li>run interpreter after running file</li> </ul> <pre><code>lua -i file.lua\n</code></pre> <ul> <li><code>dofile('test.lua')</code> to reload file after you make changes and run functions in it to test</li> </ul>"},{"location":"programming-languages/lua/#chunks","title":"Chunks","text":"<ul> <li>Each piece of code that Lua executes, such as a file (mostly a file) or a single line in interactive mode, is called a chunk. </li> <li>A chunk is simply a sequence of commands (or statements)</li> <li>Lua needs no separator between consecutive statements, but you can use a semicolon if you wish.</li> <li>Lua does not recognize Line breaks</li> </ul> <pre><code>a = 1\nb = a*2\na = 1;\nb = a*2;\na = 1; b = a*2\na = 1 b = a*2 \nfunction test()\n  print('test')\nend\nprint(b)\nprint(a)\n</code></pre> <ul> <li><code>dofile('test.lua')</code></li> </ul>"},{"location":"programming-languages/lua/#lexical-conventions","title":"Lexical Conventions","text":"<ul> <li>Identifiers in Lua can be any string of letters, digits, and underscores, not beginning with a digit</li> </ul> <p><pre><code>i j i10 _ij aSomewhatLongName _INPUT\n</code></pre> - avoid _NAME as they are special identifiers used by Lua</p> <ul> <li>reserved words</li> </ul> <p><pre><code>and break do else elseif end false for function if in local nil not or repeat return then true until while\n</code></pre> - comments, the block trick</p> <pre><code>--[[\nprint(10) -- no action (comment)\n--]]\n-- To reactivate the code, we add a single hyphen to the first line:\n---[[\nprint(10) --&gt; 10\n--]]\n</code></pre>"},{"location":"programming-languages/lua/#global-variables","title":"Global Variables","text":"<ul> <li>Global variables do not need declarations, just assign a value to it</li> <li>you just get the special value nil as the result of accessing a non existeng global var</li> <li>assign nil to delete a global var</li> </ul> <pre><code>print(b) --&gt; nil\nb = 10\nprint(b) --&gt; 10\n\nb = nil\n</code></pre>"},{"location":"programming-languages/lua/#the-stand-alone-interpreter","title":"The Stand-Alone Interpreter","text":"<ul> <li>first line with comment is ignored like other script interpreters (bash zsh python ruby node)</li> </ul> <pre><code>#!/usr/bin/env lua\n</code></pre> <ul> <li> <p>command syntax <pre><code>lua -e \"print(math.sin(12))\" --&gt; -0.53657291800043\n</code></pre></p> </li> <li> <p>-e option will evaluate expression</p> </li> </ul> <pre><code>lua -e \"print(math.sin(12))\" --&gt; -0.53657291800043\n</code></pre> <ul> <li>-l option loads a library</li> </ul> <pre><code>lua -i -l a -e \"x = 10\"\n</code></pre> <ul> <li>lua gets args from global var table arg</li> </ul> <pre><code>lua -e \"myname=justin\" greet.lua hello there\n</code></pre> <pre><code>arg[-3] = \"lua\"\narg[-2] = \"-e\"\narg[-1] = \"myname=justin\"\narg[0] = \"greet.lua\"\narg[1] = \"hello\"\narg[2] = \"there\"\n</code></pre> <ul> <li>Lua is a dynamically typed language, no type definitions</li> <li>basic types are nil, boolean, number, string, userdata, function, thread, and table. </li> <li>The type function gives the type name of a given value:</li> <li>type function returns a string</li> <li>brackets for long strings</li> <li>special brackets for strings and comments with brackets inside</li> </ul> <pre><code>type(\"Hello world\")--&gt; string\n\npage = [[\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;An HTML Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;a href=\"http://www.lua.org\"&gt;Lua&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n]]\n\npage_with_bracks = [==[\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;An HTML Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nDOESNT END ]]\n&lt;a href=\"http://www.lua.org\"&gt;Lua&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n]==]\n</code></pre> <ul> <li>converts strings to nums and nums to strings with concat syntax ..</li> <li>tonumber and tostring is better</li> <li>length of string with # (length operator)</li> </ul>"},{"location":"programming-languages/lua/#tables","title":"Tables","text":"<ul> <li>the only data-structuring machanism in Lua</li> <li>used to represent other data-structures like lists, dicts, objs, modules, packages</li> <li>avoid using lists with empty indices</li> </ul> <pre><code>local mytable = {}\n\nmytable[\"a\"] = 'this'\nmytable.b = 'that'\n\nlocal mylist = {}\n\nfor i=1,10 do\n  mylist[i] = tostring(i)\nend\n\nlocal mylist_length = #mylist\nprint(mylist_length)\n\nlocal table_len = {}\ntable_len[10] = \"ten\"\ntable_len[11] = \"ten\"\nprint(#table_len) -- returns 0 because assumes any nil index indicates end of array\n\n-- not 0 indexed\nlocal array_constructor = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"}\n\nlocal record_table = {a = \"a\", b=\"b\"}\nrecord_table[1] = \"one\"\nprint(record_table[1])\n</code></pre>"},{"location":"programming-languages/lua/#expressions","title":"Expressions","text":"<ul> <li>supports the common arithmetic operators + - (minus and negation) * / ^(exponent) % (modulo)</li> <li>relational operators are &lt; &gt; &lt;= &gt;= == ~=</li> <li>logical operators = not and or</li> <li>strings are immutable</li> <li>binary operators are left associative</li> </ul> <pre><code>-- arithmetic operators\n-- + - (minus and negation) * / ^(exponent) % (modulo)\n-- relational operators\n-- &lt; &gt; &lt;= &gt;= == ~=\n-- logical operators\n-- not and or\n\nprint(not nil) --&gt; true\nprint(not false) --&gt; true\nprint(not 0) --&gt; false\nprint(not not nil) --&gt; false\n\n-- precedence\n--[[\n^\nnot # - (unary)\n* / %\n+ -\n..\n&lt; &gt; &lt;= &gt;= ~= ==\nand\nor\n--]]\n--\n--\na, b, c = 0, 1\nprint(a, b, c) --&gt; 0 1 nil\n\nx = 10\n\nlocal i = 1 -- local to the chunk\nwhile i &lt;= x do\n  local x = i*2 -- local to the while body\n  print(x) --&gt; 2, 4, 6, 8, ...\n  i = i + 1\nend\n\nif i &gt; 20 then\n  local x -- local to the \"then\" body\n  x = 20\n  print(x + 2) -- (would print 22 if test succeeded)\nelse\n  print(x) --&gt; 10 (the global one)\nend\n\nprint(x) --&gt; 10 (the global one)\n\ndo\n  local a = 2\n  local d = 5\n  x1 = a - d -- assigned globally\nend -- scope of \u2019a\u2019 and \u2019d\u2019 ends here\n\nprint(x1)\n</code></pre>"},{"location":"programming-languages/lua/#statements","title":"Statements","text":"<ul> <li>use local keyword to scope a var to a block</li> <li>a block is a file, body of control flow or body of function</li> </ul> <pre><code>-- arithmetic operators\n-- + - (minus and negation) * / ^(exponent) % (modulo)\n-- relational operators\n-- &lt; &gt; &lt;= &gt;= == ~=\n-- logical operators\n-- not and or\n\nprint(not nil) --&gt; true\nprint(not false) --&gt; true\nprint(not 0) --&gt; false\nprint(not not nil) --&gt; false\n\n-- precedence\n--[[\n^\nnot # - (unary)\n* / %\n+ -\n..\n&lt; &gt; &lt;= &gt;= ~= ==\nand\nor\n--]]\n--\n--\na, b, c = 0, 1\nprint(a, b, c) --&gt; 0 1 nil\n\nx = 10\n\nlocal i = 1 -- local to the chunk\nwhile i &lt;= x do\n  local x = i*2 -- local to the while body\n  print(x) --&gt; 2, 4, 6, 8, ...\n  i = i + 1\nend\n\nif i &gt; 20 then\n  local x -- local to the \"then\" body\n  x = 20\n  print(x + 2) -- (would print 22 if test succeeded)\nelse\n  print(x) --&gt; 10 (the global one)\nend\n\nprint(x) --&gt; 10 (the global one)\n\ndo\n  local a = 2\n  local d = 5\n  x1 = a - d -- assigned globally\nend -- scope of \u2019a\u2019 and \u2019d\u2019 ends here\n\nprint(x1)\n</code></pre>"},{"location":"programming-languages/python/code-challenges/","title":"Code Challenges","text":""},{"location":"programming-languages/python/code-challenges/#codewars","title":"Codewars","text":""},{"location":"programming-languages/python/code-challenges/#remove-vowels","title":"remove vowels","text":"<ul> <li>Create a function called shortcut to remove all the lowercase vowels in a given string.</li> </ul> <pre><code>def shortcut( s ):\n    lowercase_vowels = ['a','e','i','o','u']\n    thisString = s\n\n    for x in s:\n        if x in lowercase_vowels:\n            thisString = thisString.replace(x, \"\")\n\n    return thisString\n\n# other  solutions\n\ndef shortcut(s):\n    return s.translate(None, 'aeiou')\n#\ndef shortcut(s):\n    return ''.join(c for c in s if c not in 'aeiou')\n#\nimport re\n\ndef shortcut( s ):\n    return re.sub('[aoeui]', '', s)\n</code></pre>"},{"location":"programming-languages/python/code-challenges/#final-grade","title":"final grade","text":"<p>This function should return a number (final grade). There are four types of final grades:</p> <pre><code>100, if a grade for the exam is more than 90 or if a number of completed projects more than 10.\n90, if a grade for the exam is more than 75 and if a number of completed projects is minimum 5.\n75, if a grade for the exam is more than 50 and if a number of completed projects is minimum 2.\n0, in other cases\n</code></pre> <pre><code>def final_grade(exam, projects):\n    grade =  0\n    if exam &gt; 90 or projects &gt; 10:\n        grade = 100\n    elif exam &gt; 75 and projects &gt;= 5:\n        grade = 90\n    elif exam &gt; 50 and projects &gt;= 2:\n        grade = 75\n\n    return grade\n</code></pre>"},{"location":"programming-languages/python/code-challenges/#traffic-lights","title":"traffic lights","text":"<p>You're writing code to control your town's traffic lights. You need a function to handle each change from green, to yellow, to red, and then to green again.</p> <p>Complete the function that takes a string as an argument representing the current state of the light and returns a string representing the state the light should change to. <pre><code>def update_light(current):\n    # Your code here.\n    if current == 'green':\n        return 'yellow'\n    if current == 'yellow':\n        return 'red'\n    if current == 'red':\n        return 'green'\n</code></pre></p>"},{"location":"programming-languages/python/code-challenges/#enough-space-on-bus","title":"enough space on bus","text":"<p>The Story:</p> <p>Bob is working as a bus driver. However, he has become extremely popular amongst the city's residents. With so many passengers wanting to get aboard his bus, he sometimes has to face the problem of not enough space left on the bus! He wants you to write a simple program telling him if he will be able to fit all the passengers. Task Overview:</p> <p>You have to write a function that accepts three parameters:</p> <pre><code>cap is the amount of people the bus can hold excluding the driver.\non is the number of people on the bus excluding the driver.\nwait is the number of people waiting to get on to the bus excluding the driver.\n</code></pre> <p>If there is enough space, return 0, and if there isn't, return the number of passengers he can't take.</p> <pre><code>def enough(cap, on, wait):\n    # Your code here\n    total_passengers = on + wait\n    if total_passengers &lt;= cap:\n        return 0\n\n    return total_passengers - cap\n</code></pre>"},{"location":"programming-languages/python/code-challenges/#ascii-total","title":"ascii total","text":"<p>You'll be given a string, and have to return the sum of all characters as an int. The function should be able to handle all ASCII characters. <pre><code>def uni_total(s):\n    #your code here\n    ascii_total = 0\n    for x in s:\n        ascii_total += ord(x)\n\n    return ascii_total\n</code></pre></p>"},{"location":"programming-languages/python/code-challenges/#unstandardised-keypads","title":"unstandardised keypads","text":"<p>Solve the horror of unstandardized keypads by providing a function that converts computer input to a number as if it was typed on a phone.</p> <pre><code>def computer_to_phone(numbers):\n    #your code here\n    translated_numbers = {\n        \"1\":\"7\",\n        \"2\":\"8\",\n        \"3\":\"9\",\n        \"4\":\"4\",\n        \"5\":\"5\",\n        \"6\":\"6\",\n        \"7\":\"1\",\n        \"8\":\"2\",\n        \"9\":\"3\",\n        \"0\":\"0\",\n    }\n\n    phone_string = ''\n    for num in numbers:\n        phone_string += translated_numbers[num]\n\n    return phone_string\n</code></pre>"},{"location":"programming-languages/python/code-challenges/#compare-sum-of-chars","title":"compare sum of chars","text":"<ul> <li>consider all letters uppercase and if string has non letters it equals 0 <pre><code>def compare(s1,s2):\n    string1val = 0\n    string2val = 0\n\n    if s1:\n        if s1.isalpha():\n            for x in s1.upper():\n                string1val += ord(x)\n    if s2:\n        if s2.isalpha():\n            for x in s2.upper():\n                string2val += ord(x)\n\n    return string1val == string2val\n</code></pre></li> </ul>"},{"location":"programming-languages/python/code-challenges/#move-exclamation-marks-to-end","title":"move exclamation marks to end","text":"<ul> <li>Move all exclamation marks to the end of the sentence </li> </ul> <pre><code>def remove(s):\n    new_sentence = ''\n    for x in s:\n        if not x == '!':\n            new_sentence += x\n\n    for x in s:  \n        if x == '!':\n            new_sentence +=x\n    return new_sentence                \n</code></pre>"},{"location":"programming-languages/python/code-challenges/#remove-all-from-end-of-string","title":"remove all ! from end of string","text":"<pre><code>def remove(s):\n    while s[-1] == '!':\n        l = len(s)\n        s = s[:l-1]\n    return s\n</code></pre>"},{"location":"programming-languages/python/code-challenges/#series-of-integers","title":"series of integers","text":"<p>Write a function generateIntegers/generate_integers that accepts a single argument n/$n and generates an array containing the integers from 0 to n/$n inclusive.</p> <p>For example, generateIntegers(3)/generate_integers(3) should return [0, 1, 2, 3].</p> <p>n/$n can be any integer greater than or equal to 0.</p> <pre><code>def generate_integers(n):\n    y = []\n    for x in range(n+1):\n        y.append(x)\n    return y\n</code></pre>"},{"location":"programming-languages/python/data-structures-and-algorithms/","title":"Stacks Queues Deques","text":""},{"location":"programming-languages/python/data-structures-and-algorithms/#abstract-data-types-adts","title":"abstract data types (ADTs)","text":"<ul> <li>a theoretical concept to specify what kind of data a data structure can hold and what operations are allowed on that data </li> <li>if you were creating a new abstract data type from scratch you could decide the operations</li> <li>when working with ADT we do not need to know how to code it, but how to interact with it in the way we need to </li> <li>2 styles of ADTs, imperative and functional</li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#imperative-adts","title":"imperative ADTs","text":"<ul> <li>mutable / changeable</li> <li>the same ADT can take on different states</li> <li>the order in which operations are executed is important</li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#functional-adts","title":"functional ADTs","text":"<ul> <li>immutable / cannot change</li> <li>separate instance of the ADT for each new state</li> <li>an operation on functional ADTs is on the current state and returns a completely new state</li> <li>the original abstract datatype is never changed </li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#advantages","title":"advantages","text":"<ul> <li> <p>abstraction, all the user needs to know is the allowable data types and allowable operations</p> <ul> <li>understanding the implementation is not required for the user to make use of data structure</li> </ul> </li> <li> <p>consistency, the implementation of the data structure can change as long as the interface to the data structure stays the same</p> <ul> <li>this ensures users do not have to change their code   </li> </ul> </li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#data-structures-ds-overview","title":"data structures (DS) overview","text":"<ul> <li>concrete implementations of ADTs, that organize and retrieve data stored in memory</li> <li>1 ADT allowed operation = 1 function in DS class</li> <li>there is often more than 1 way to implement an ADT as a DS</li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#stacks","title":"stacks","text":"<ul> <li>stores a collection of items in the order in which they were added </li> <li>like a stack of plates where only the top plate is easy to get out </li> <li>LIFO data structure = last in, first out</li> <li>last element added is first to be removed</li> <li>any data type that can be stored in a list can be stored in a stack </li> <li>limited access data structure because we can only access data from one place </li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#common-stack-operations","title":"common stack operations","text":"<ul> <li>push(item) = push item to top of stack </li> <li>pop(item) = remove and return the top item</li> <li>peek(item) = return the top item without removing </li> <li>is_empty(item) = return true if the stack is empty</li> <li>count(items) = return number of items in stack</li> <li>the \"top\" does not necessarily mean the top of the stack, just means where the data is inserted and deleted</li> <li>inserting and deleting data happen on the same end</li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#applications-of-the-stack","title":"applications of the stack","text":"<ul> <li>inside of computers, we use reverse polish notation for evaluating arithmetic expressions</li> <li>syntax parsing</li> <li>cold stack: in a cpu this contains frames / space for parameters and local variables for each function call that we make</li> <li>used in recursion </li> <li>undo and redo operations in word processors</li> <li>low-level assembly programming </li> <li>text-editor linter, which tells us if we are missing opening or closing symbol</li> <li>reversing the characters in a string </li> <li>recursive data structure, is either empty or consists of a top item and the rest, which is a stack </li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#stack-example","title":"stack example","text":"<pre><code>class Stack:\n\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def is_empty(self):\n        return self.items == []\n\n\ndef match_symbols(symbol_str):\n\n    symbol_pairs = {\n        '(': ')',\n        '[': ']',\n        '{': '}',\n    }\n\n    openers = symbol_pairs.keys()\n    my_stack = Stack()\n\n    index = 0\n    while index &lt; len(symbol_str):\n        symbol = symbol_str[index]\n\n        if symbol in openers:\n            my_stack.push(symbol)\n        else:  # The symbol is a closer\n\n            # If the Stack is already empty, the symbols are not balanced\n            if my_stack.is_empty():\n                return False\n\n            # If there are still items in the Stack, check for a mis-match.\n            else:\n                top_item = my_stack.pop()\n                if symbol != symbol_pairs[top_item]:\n                    return False\n\n        index += 1\n\n    if my_stack.is_empty():\n        return True\n\n    return False  # Stack is not empty so symbols were not balanced\n\nprint(match_symbols('([{}])'))\nprint(match_symbols('(([{}]])'))\n</code></pre>"},{"location":"programming-languages/python/data-structures-and-algorithms/#queue-ds","title":"Queue DS","text":"<ul> <li>An abstract data structure that stores items in the order in which they were added</li> <li>items are added to the back of the queue and added to the front of the queue</li> <li>a queue ADT is like a line of people waiting for something, people join the line in back and leave from the back</li> <li>FIFO, First In First Out</li> <li>the order in which people join the line is reserved</li> <li>inserting data into a queue is linear time because every item has to shift to the right, one at a time, so each item adds time to move</li> <li>adding to the queue is in constant time because it always takes the same amount of time to pop an item off the queue</li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#queue-operations-data","title":"queue operations &amp; data","text":"<ul> <li>add to the queue (enqueue)</li> <li>remove from the queue (dequeue)</li> <li>is the queue empty?</li> <li>how many items are in the queue?</li> <li> <p>what is next to be removed?</p> </li> <li> <p>a print queue is a good example of real world implementation, the documents are printed in the order they are sent to the machine</p> </li> <li> <p>a recursive data structure, it is either empty or it consists of a front item and the rest of the queue</p> </li> <li> <p>any data type that can be stored in a list can be stored in a queue</p> </li> <li>limited access, because we can only access the data from 1 place (the front / top of the queue)</li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#queue-example","title":"queue example","text":"<pre><code>import random\nclass Queue:\n\n    def __init__(self):\n        self.items = []\n\n    def enqueue(self, item):\n\"\"\"\n        inserts an item at the 0 index in a list\n\n        running time is 0(n) or linear time because inserting into the 0th index of a list\n        forces all the other items in the list to move one index to the right\n        \"\"\"\n        self.items.insert(0, item)\n\n    def dequeue(self):\n\"\"\"\n        returns and removes the front-most item of the Queue, which is represented by the last item in the list\n\n        The run time is 0(1), or constant time because indexing to the end of a list happens in constant time\n        \"\"\"\n\n        if self.items:\n            return self.items.pop()\n        return None\n\n    def peek(self):\n\"\"\" Returns the last item in the list, which represents the front-most item in the Queue\n\n            The runtime is constant because we are just indexing the last item of the list, and returning the value found there \n        \"\"\"\n        if self.items:\n            return self.items[-1]\n        return None\n\n    def size(self):\n\"\"\"returns the size of the Queue, which is represented by the length of the list\n\n            the runtime is 0(1) because we are simply returning the length\n        \"\"\"\n        return len(self.items)\n\n    def is_empty(self):\n\"\"\" returns a Boolean value based on whether or not the list representing the queue is empty\n\n        a simple check for equality here will run in constant time\"\"\"\n        return self.items == []\n\n\nclass Job:\n    def __init__(self):\n        self.pages = random.randint(1, 10)\n\n    def check_complete(self):\n        return self.pages == 0\n\n    def print_page(self):\n        if not self.check_complete():\n            self.pages -= 1\n\n\nclass Printer:\n    def __self__(self):\n        self.current_job = None\n\n    def get_job(self, print_queue):\n        try:\n            self.current_job = print_queue.dequeue()\n        except IndexError:\n            return \"no more jobs to print\"\n\n    def print_job(self, job):\n        while job.pages &gt; 0:\n            job.print_page()\n\n        if job.check_complete():\n            return \"printing complete\"\n\n        else:\n            return \"an error occured\"\n\n\njob1 = Job()\nprint_q = Queue()\nprinter = Printer()\n\n\nprint(\"job 1 has this many pages \", job1.pages)\n\nprint_q.enqueue(job1)\nprint_q.enqueue(job1)\n\nprint(\"print_q has this many items in queue \", print_q.size())\n\nprinter.get_job(print_q)\n\nprint(print_q.items)\n</code></pre>"},{"location":"programming-languages/python/data-structures-and-algorithms/#dequeue-adt","title":"dequeue ADT","text":"<ul> <li>deque = double ended queue</li> <li>an abstract data type that resembles both a stack and a queue</li> <li>items in a deque can be added to and removed from both the back and front</li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#operations","title":"operations","text":"<ul> <li>add to the deque (front and rear)</li> <li>remove from the deque (front and rear)</li> <li>check if the queue is empty</li> <li>which item is at either end</li> </ul>"},{"location":"programming-languages/python/data-structures-and-algorithms/#fifo-and-lifo","title":"FIFO and LIFO","text":"<ul> <li>can use either FIFO or LIFO or BOTH</li> <li>it is up to the programmer to enforce those qualities at either end of the deck if they choose to do so </li> <li>we can arbitrarily choose which end of the deck we want to be at the front and which we want to be at the rear</li> <li>there is not any runtime advantage from choosing one side over the other side </li> <li>whether we want to add / remove from one side of the list or the other side of the list, it is gonna be in constant runtime or linear runtime, depending which side we choose to be the front</li> <li>any data type that can be stored in a list can be stored in a deck </li> <li>the deque is a limited access data structure because we can only access data from either end (not the middle)</li> <li>the deque datastructure is a common way to check whether a string is a palindrome</li> </ul> <pre><code>class Deque:\n\n    def __init__(self):\n        self.items = []\n\n    def add_front(self, item):\n\"\"\"takes item as a paramater and inserts it at the 0th index of the list that is representing the deque \n\n        the runtime is linear or 0(n) because every time you insert into the front of a list every item needs to shift over one position to the right\"\"\"\n\n        self.items.insert(item)\n\n    def add_rear(self, item):\n\"\"\"takes an item as a parameter and appends that item to the end of the list that is reperesenting the deque\n\n        the runtime is constant because appending to the end of a list happens in constant time\"\"\"\n\n        self.items.append(item)\n\n    def remove_front(self):\n\"\"\"removes and returns the0th index of the list, which represents the front of the Deque\n\n        the runtime is linear / 0(n) because when we remove the 0th index, all other items on the list have to shift 1 spot to the left\"\"\"\n        if self.items:\n            return self.items.pop(0)\n        return None\n\n    def remove_rear(self):\n\"\"\"removes and returns the last item of the list, which represents the rear of a queue the runtime is constant because all we are doing is indexing to the end of the list\"\"\"\n        if self.items:\n            return self.items.pop()\n        return None\n\n    def peek_front(self):\n\"\"\"returns the value found as 0th index in list representing front of deque, constant time because it is indexing to front of list\"\"\"\n        if self.items:\n            return self.items[0]\n\n        return None\n\n    def peek_rear(self):\n\"\"\"returns the value found as last index in list representing rear of deque, constant time because it is indexing to back of list\"\"\"\n        if self.items:\n            return self.items[-1]\n\n        return None\n\n    def is_empty(self):\n        return self.items == []\n\n    def size(self):\n        return len(self.items)\n\n\ndef check_palindrome(my_string):\n\n    d = Deque()\n\n    for x in my_string:\n        d.add_rear(x)\n\n    while d.size() &gt;= 2:\n        if not d.remove_front() == d.remove_rear():\n            return False\n\n    return True\n\nprint(check_palindrome(\"defnot\"))\n\nprint(check_palindrome(\"racecar\"))\n</code></pre>"},{"location":"programming-languages/python/recursion/","title":"Python Recursion","text":""},{"location":"programming-languages/python/recursion/#intro","title":"intro","text":""},{"location":"programming-languages/python/recursion/#concept","title":"concept","text":"<ul> <li> <p>how often is recursion used?:</p> <ul> <li>in terms of day to day development the amount you use recursion will vary by context</li> <li>some developers may make little or no explicit use of it </li> <li>for others it will be a mainstay</li> <li>recursion is fundamental of the very fabric of computing</li> </ul> </li> <li> <p>common applications in modern computing: </p> <ul> <li>passing technical interviews for software development jobs</li> <li>traversing hierarchical data structures, such as DOM tree, XML, file systems</li> <li>many powerful algorithms use recursion, such as quicksort, depth-first search</li> <li>data mining using web crawlers</li> </ul> </li> </ul>"},{"location":"programming-languages/python/recursion/#importance","title":"importance","text":"<ul> <li> <p>uses of recursion in modern computing:</p> <ul> <li>used in compilers and linkers in the software build process</li> <li>evaluation of arithmetic expressions</li> <li>database design and information retrieval</li> <li>most modern programming languages support recursion</li> </ul> </li> <li> <p>solving any non-trivial problem in computing involves finding ways to break complexity down into simple parts, recursion is excellent for this</p> </li> </ul>"},{"location":"programming-languages/python/recursion/#fundamentals","title":"fundamentals","text":""},{"location":"programming-languages/python/recursion/#classic-recursive-algorithms","title":"classic recursive algorithms","text":""},{"location":"programming-languages/python/recursion/#practice-writing-recursive-algorithms","title":"practice writing recursive algorithms","text":""},{"location":"programming-languages/python/recursion/#sorting-data","title":"sorting data","text":""},{"location":"programming-languages/python/recursion/#data-traversal","title":"data traversal","text":""},{"location":"programming-languages/python/recursion/#optimizing-recursion","title":"optimizing recursion","text":""},{"location":"programming-languages/python/recursion/#drawing-fractals","title":"drawing fractals","text":""},{"location":"programming-languages/python/recursion/#towers-of-hanoi","title":"Towers of Hanoi","text":""},{"location":"programming-languages/python/recursion/#recursion-vs-iteration","title":"recursion vs iteration","text":""},{"location":"programming-languages/ruby/","title":"Ruby","text":"<p>\"A programmers best friend\"</p> <p>\"Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.\"</p> <p>- from ruby-lang.org </p>"},{"location":"programming-languages/ruby/#learning-resources","title":"Learning Resources","text":"<p>- why's (poignant) guide to Ruby </p>"},{"location":"programming-languages/ruby/basics/","title":"Ruby Basics","text":""},{"location":"programming-languages/ruby/basics/#blocks-procs-and-lambdas","title":"blocks, procs, and lambdas","text":"<ul> <li> <p>a Ruby block is a little \"block\" of code that can be executed</p> </li> <li> <p>A Block is not an object</p> </li> <li> <p>Block syntax uses either do..end or curly braces ({})</p> </li> <li> <p>Blocks can be combined with methods like .each and .times to execute an instruction for each  element in a collection (like a hash or array)</p> </li> <li> <p>.collect method takes a block and applies the expression in the block to every element in an array</p> </li> <li> <p>.collect returns a copy, but doesn\u2019t change (or mutate) the original</p> </li> <li> <p>yield allows Blocks being ran inside methods</p> </li> <li> <p>a lambda checks the number of arguments passed to it, a proc does not</p> </li> <li> <p>a lambda will throw an error if you pass it the wrong number of arguments</p> </li> <li> <p>a proc will ignore unexpected arguments and assign nil to any that are missing</p> </li> <li> <p>when a lambda returns, it passes control back to the calling method</p> </li> <li> <p>when a proc returns, it does so immediately, without going back to the calling method</p> </li> <li> <p>.collect! and .map! do the exact same thing</p> </li> <li> <p>&amp; can be used to convert a proc into a block </p> </li> <li> <p>&amp; can be used to convert symbols to procs</p> </li> <li> <p>.collect! and .map! normally take a block</p> </li> <li> <p>use &amp; any time we pass a proc to a method that expects a block</p> </li> <li> <p>Procs are objects, so they have all the capabilities of objects </p> </li> <li> <p>unlike blocks, procs can be called over and over without rewriting them.</p> </li> <li> <p>call procs directly with .call method</p> </li> <li> <p>lambdas are objects</p> </li> </ul>"},{"location":"programming-languages/ruby/basics/#examples","title":"examples","text":""},{"location":"programming-languages/ruby/basics/#basics","title":"basics","text":"<pre><code># VERY BASICS\n\nmy_num =  25  my_boolean = true my_string = \"Ruby\"\nputs my_num\nputs my_boolean\nputs my_string\nputs \"What's up?\"\nputs \"Oxford Montalvo\" # new line\nprint \"What's up?\"\nprint \"Oxford Montalvo\" # same line\nputs \"puts 6\".length\nputs \"erehT olleH\".reverse\nputs \"Justin\".upcase puts \"Justin\".downcase =begin\nI'm \na \nmulti-line\ncomment\n=end\n\nsum  = 13 + 379\nproduct = 923 * 15\nquotient = 13209 / 17\n\nname = \"Justin\"\nname.downcase\nname.reverse\nname.upcase\n\nname = \"Justin\"\nname.downcase.reverse.upcase\n\nprint(\"What's your first name?\")\nfirst_name = gets.chomp\nputs \"Your first name is #{first_name}!\"\n\n\nprint(\"What is your last name?\")\nlast_name = gets.chomp\nputs \"Your last name is #{last_name}!\"\n\nprint(\"What city are you from?\")\ncity = gets.chomp\nputs \"Your hometown is #{city}!\"\n\nprint(\"What's the abbreviation of the state you are from?\")\nstate = gets.chomp\nputs \"You are from #{state}!\"\n\nprint(\"What's your first name?\")\nfirst_name = gets.chomp\nfirst_name.capitalize!\nputs \"Your first name is #{first_name}!\"\n\n\nprint(\"What is your last name?\")\nlast_name = gets.chomp\nlast_name.capitalize!\nputs \"Your last name is #{last_name}!\"\n\n\nprint(\"What city are you from?\")\ncity = gets.chomp\ncity = city.capitalize!\nputs \"Your hometown is #{city}!\"\n\nprint(\"What's the abbreviation of the state you are from?\")\nstate = gets.chomp\nstate.upcase!\nputs \"You are from #{state}!\"\n\nprint \"Integer please: \"\nuser_num = Integer(gets.chomp)\nputs user_num\n</code></pre>"},{"location":"programming-languages/ruby/basics/#arrays-hashes-symbols","title":"arrays hashes symbols","text":"<pre><code># ARRAYS AND HASHES\n\nputs \"give me some data to hash\"\n\ndefault_value = 0\n\ntext = gets.chomp\n\nwords = text.split(\" \")\n\nfrequencies = Hash.new(default_value)\n\nwords.each { |word|\nfrequencies[word] += 1  }\n\nfrequencies = frequencies.sort_by do |word, sort_by_this|\nsort_by_this\nend\n\nfrequencies.reverse!\n\nfrequencies.each { |word, frequency|\nputs word + \" \" + frequency.to_s\n}\n\ntest = \"this is now my sentence of strings and my sentence is random and it is simple and it is ending now\" lunch_order = {\n\"Ryan\" : \"wonton soup\",\n\"Eric\" : \"hamburger\",\n\"Jimmy\" : \"sandwich\",\n\"Sasha\" : \"salad\",\n\"Cole\" : \"taco\"\n}\n\n\nlunch_order.each {|x,y| puts y}\n\nmy_hash = Hash.new\n\nmy_hash[\"key1\"] = \"value1\"\nmy_hash[\"key2\"] = \"value2\"\n\n\nmy_array = [[\"this\",\"is\"],[\"my\",\"array\"]]\n\n\n# perform action on each individual item\n\ns = [[\"ham\", \"swiss\"], [\"turkey\", \"cheddar\"], [\"roast beef\", \"gruyere\"]]\n\ns.each {|sub_array| sub_array.each {|item| puts item}}\n\nsecret_identities = {\n\"The Batman\" : \"Bruce Wayne\",\n\"Superman\" : \"Clark Kent\",\n\"Wonder Woman\" : \"Diana Prince\",\n\"Freakazoid\" : \"Dexter Douglas\"\n}\n\nsecret_identities.each {|key,value| puts \"#{key}: #{value}\"}\n\nlanguages = [\"HTML\", \"CSS\", \"JavaScript\", \"Python\", \"Ruby\"]\n\nlanguages.each {|language| puts language}\n\nfriends = [\"Milhouse\", \"Ralph\", \"Nelson\", \"Otto\"]\n\nfamily = { \"Homer\" : \"dad\",\n\"Marge\" : \"mom\",\n\"Lisa\" : \"sister\",\n\"Maggie\" : \"sister\",\n\"Abe\" : \"grandpa\",\n\"Santa's Little Helper\" : \"dog\"\n}\n\nputs \"\"\nfamily.each { |x, y| puts x }\nputs \"\"\nfamily.each { |x, y| puts y }\nputs \"\"\nfamily.each { |x, y| puts \"#{x}: #{y}\" }\nputs \"\"\nfamily.each { |x| puts x }\n\n\npets = Hash.new\n\npets[\"blue\"] = \"dog\"\n\nputs pets[\"blue\"]\n\n\nmy_2d_array = [[222],[\"d\",\"d\",\"d\"]]\n\nstring_array = [\"my\", \"string\", \"array\"]\n\nmy_array = [0,1,2,4,5,5,5,5]\n\ndemo_array = [100, 200, 300, 400, 500]\n\nprint demo_array[2]\n\n\n# HASHES AND SYMBOLS\n\nmovie_ratings = {\nmemento: 3,\nprimer: 3.5,\nthe_matrix: 3,\ntruman_show: 4,\nred_dawn: 1.5,\nskyfall: 4,\nalex_cross: 2,\nuhf: 1,\nlion_king: 3.5\n}\n\nputs movie_ratings.each_key {|key| puts key}\n\ngood_movies = movie_ratings.select{|movie, rating| rating &gt; 3\n}\nmovies = {\nsuperman:\"movie about superman\",\nbatman:\"movie about batman\",\n}\n\nstrings = [\"HTML\", \"CSS\", \"JavaScript\", \"Python\", \"Ruby\"]\n\nsymbols = []\n\nstrings.each { |s|\nsymbols.push(s.to_sym)  # or .intern is exact same thing\n}\nputs symbols\n\nsymbol_hash = {\none: 1,\ntwo: 2,   three: 3,\n}\n\nmy_first_symbol = :mysymbol\n\nputs \"string\".object_id\nputs \"string\".object_id\n\nputs :symbol.object_id\nputs :symbol.object_id\n\nno_nil_hash = Hash.new(\"not nil\")\n\nmatz = { \"First name\" : \"Yukihiro\",\n\"Last name\" : \"Matsumoto\",\n\"Age\" : 47,\n\"Recognition\" : \"inventor of Ruby\",\n\"Nickname\" : \"Matz\"\n}\n\nmatz.each { |key, value|\nputs value\n}\n</code></pre>"},{"location":"programming-languages/ruby/basics/#blocks-procs-lambdas","title":"blocks procs lambdas","text":"<pre><code># BLOCKS PROCS LAMBDAS\n\ncrew = {\ncaptain: \"Picard\",\nfirst_officer: \"Riker\",\nlt_cdr: \"Data\",\nlt: \"Worf\",\nensign: \"Ro\",\ncounselor: \"Troi\",\nchief_engineer: \"LaForge\",\ndoctor: \"Crusher\"\n}\n\nfirst_half = lambda {|key, str| str &lt; \"M\"}\n\na_to_m = crew.select(&amp;first_half)\n\nages = [23, 101, 7, 104, 11, 94, 100, 121, 101, 70, 44]\n\nunder_100 = proc do |num| if num &lt; 100\ntrue\nelse\nfalse\nend\nend\n\nunder_100 = proc do |num| if num &lt; 100\ntrue\nend\nend\n\nunder_100 = proc {|num| num &lt; 100 ? true : false}\n\nunder_100 = proc {|num| num &lt; 100}\n\n\nyoungsters = ages.select(&amp;under_100) puts youngsters\n\n\nodds_n_ends = [:weezard, 42, \"Trady Blix\", 3, true, 19, 12.345]\n\nints  = odds_n_ends.select {|x| x.is_a? Integer}\n\nputs ints\n\nmy_array = [\"raindrops\", :kettles, \"whiskers\", :mittens, :packages, 5, 6]\n\nsymbol_filter = lambda {|x| x.is_a? Symbol }\n\nsymbols = my_array.select(&amp;symbol_filter)\n\nputs symbols\n\nstring_filter = lambda {|x| x.is_a? String }\n\nstrings = my_array.select(&amp;string_filter)\n\nputs strings\n\n\nnumber_filter = lambda {|x| x.is_a? Integer }\n\nnumber = my_array.select(&amp;number_filter)\n\nputs number\n\n\nstrings = [\"leonardo\", \"donatello\", \"raphael\", \"michaelangelo\"]\n\nsymbolize = lambda {|parameter| parameter.to_sym}\n\nsymbols = strings.collect(&amp;symbolize)\nprint symbols\n\ndef lambda_demo(a_lambda)\nputs \"I'm the method!\"\na_lambda.call\nend\n\nlambda_demo(lambda { puts \"I'm the lambda!\" })\n\nnumbers_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nstrings_array = numbers_array.map(&amp;:to_s)\n\nputs strings_array\n\nhi = Proc.new {puts \"Hello!\"}\n\nhi.call\n\ndef greeter\nyield\nend\n\nphrase = Proc.new {puts \"Hello there!\"}\n\ngreeter(&amp;phrase)\n\n# at the amusement park, you have to be four feet tall or taller to ride the roller coaster. \n# use .select on each group to get only the ones four feet tall or taller.\n\ngroup_1 = [4.1, 5.5, 3.2, 3.3, 6.1, 3.9, 4.7]\ngroup_2 = [7.0, 3.8, 6.2, 6.1, 4.4, 4.9, 3.0]\ngroup_3 = [5.5, 5.1, 3.9, 4.3, 4.9, 3.2, 3.2]\n\nover_4_feet = Proc.new { |height| height &gt;= 4 }\n\ncan_ride_1 = group_1.select(&amp;over_4_feet) can_ride_2 = group_2.select(&amp;over_4_feet)\ncan_ride_3 = group_3.select(&amp;over_4_feet)\n\nputs can_ride_1\nputs can_ride_2\nputs can_ride_3\n\nfloats = [1.2, 3.45, 0.91, 7.727, 11.42, 482.911]\n\nround_down  = Proc.new {|decimal| decimal.floor}\n\nints = floats.collect(&amp;round_down)\nprint ints\n\nmultiples_of_3 = Proc.new do |n|\nn % 3 == 0\nend\n\nprint (1..100).to_a.select(&amp;multiples_of_3)\n\ndef double(num)\nputs \"double parameter with a block\"\nputs \"Y to confirm, CTRL-C to rewrite method call\"\nconfirm = gets.chomp\ntest = yield(num)\nif num * 2 == test\nputs \"good job\"\nelse\nputs \"you did not double the parameter, should have been #{num * 2}\"\nend\nreturn test\nend\n\nputs double(5) {|num| num * 3}\ndef yield_name(name)\nputs \"In the method! Let's yield.\"\nyield(\"Kim\")\nputs \"In between the yields!\"\nyield(name)\nputs \"Block complete! Back in the method.\"\nend\n\nyield_name(\"Eric\") { |n| puts \"My name is #{n}.\" }\n\nyield_name(\"Justin\") { |n| puts \"My name is #{n}.\" }\n\ndef block_test\nputs \"We're in the method!\"\nputs \"Yielding to the block...\"\nyield\nputs \"We're back in the method!\"\nend\n\nblock_test { puts \"&gt;&gt;&gt; We're in the block!\" }\n\n\nfibs = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\ndoubled_fibs = fibs.collect {|fib| fib * 2}\n\n\n5.times {puts \"I'm a block!\"}\n</code></pre>"},{"location":"programming-languages/ruby/basics/#control-flow","title":"control flow","text":"<pre><code># CONTROL FLOW\n\nt0 = !(700 / 10 == 70)\nboolean_0 = false\n\nt1 = (3 &lt; 4 || false) &amp;&amp; (false || true)\nboolean_1 = true\n\nt2 = !true &amp;&amp; (!true || 100 != 5**2)\nboolean_2 = false\n\nt3 = true || !(true || false)\nboolean_3 = true\n\n\nputs \"type Y to continue, H for help\"\nanswer = gets.chomp\nif answer.upcase == \"Y\"\nputs \"you chose yes\"\nelsif answer.upcase == \"H\"\nputs \"sorry no help here\"\nelse puts \"qutting now\"\nend\n\nhungry = false\n\nunless hungry\nputs \"I'm writing Ruby programs!\"\nelse\nputs \"Time to eat!\"\nend\n\nis_true = 2 != 3\n\nis_false = 2 == 3\n\nputs is_false\nputs is_true\n\n\n\ntest_1 = 77 != 77\ntest_1 = false\n\ntest_2 = -4 &lt;= -4\ntest_2 = true\n\ntest_3 = -44 &lt; -33\ntest_3 = true\n\ntest_4 = 100 == 1000\ntest_4 = false\n\n\nboolean_1 = 77 &lt; 78 &amp;&amp; 77 &lt; 77\nboolean_1 = false\n\nboolean_2 = true &amp;&amp; 100 &gt;= 100\nboolean_2 = true\n\nboolean_3 = 2**3 == 8 &amp;&amp; 3**2 == 9\nboolean_3 = true\n\nboolean_1 = 2**3 != 3**2 || true\nboolean_1 = true\n\n# boolean_2 = false || -10 &gt; -9\nboolean_2 = false\n\n# boolean_3 = false || false\nboolean_3 = false\n\n# boolean_1 = !true\nboolean_1 = false\n\n# boolean_2 = !true &amp;&amp; !true\nboolean_2 = false\n\nif 6 &lt; 5 || 6 == 5\nputs \"6 is less than 5\"\nelsif 6 &gt; 7 || 687 == \"six ate 7\"\nputs \"6 is greater than 7\"\nelse\nputs \"idk wtf is going on\"\nend\n\nmy_bday = \"october\"\n\nthis_month = \"december\"\n\nunless this_month == my_bday\nputs \"not my bday month\"\nend\n\nproblem = false\n\nprint \"Good to go!\" unless problem\n\n# test_1 should be false\ntest_1 = 10 &gt; 199\n\n# test_2 = should be false\ntest_2 = \"hi\" == \"bye\"\n\n# test_3 = should be true\ntest_3 = 100 == 100\n\n\n# test_1 should be true\ntest_1 = true &amp;&amp; true\n\n# test_2 = should be true\ntest_2 = false || true\n\n# test_3 = should be false\ntest_3 = false &amp;&amp; false\n</code></pre>"},{"location":"programming-languages/ruby/basics/#elegant-ruby","title":"elegant ruby","text":"<pre><code># ELEGANT RUBY\n\ndef square(num)\nputs \"implicit return\"\nnum ** 2\nend\n\nfavorite_animal ||= \"cat\"\n\nputs \"What's your favorite language?\"\n\nlanguage = gets.chomp\n\ncase language\nwhen \"Ruby\" then puts \"Ruby is great for web apps!\"\nwhen \"Python\" then puts \"Python is great for science.\"\nwhen \"JavaScript\" then puts \"JavaScript makes websites awesome.\"\nwhen \"HTML\" then puts \"HTML is what websites are made of!\"\nwhen \"CSS\" then puts \"CSS makes websites pretty.\"\nelse puts \"I don't know that language!\"\nend\n\nputs 1 &lt; 2 ? \"One is less than two!\" : \"One is not less than two.\"\n\n\nputs \"One is less than two!\" if 1 &lt; 2\n\nfavorite_things = [\"Ruby\", \"espresso\", \"candy\"]\n\nputs \"A few of my favorite things:\"\n\nfavorite_things.each do |thing|\nputs \"I love #{thing}!\"\nend\n\nalphabet = [\"a\", \"b\", \"c\"]\nalphabet &lt;&lt; \"d\" caption = \"one, two, three, and \"\ncaption &lt;&lt; \"four!\"\n\nage = 26\n\nage.respond_to?(:next)\n\n\"L\".upto(\"P\") {|letter| puts letter} my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nmy_array.each {|num| puts num if num % 2 == 0 }\n\ndef a\nputs \"A was evaluated!\"\nreturn true\nend\n\ndef b\nputs \"B was also evaluated!\"\nreturn true\nend\n\nputs a || b\nputs \"------\"\nputs a &amp;&amp; b\n\n\ndef implicit_return(x=false)\nputs x ? \"implicitely returning because true\" : \"implicitely returning because false\"\nend\n\n# Write your code on line 2!\nfavorite_language ||= \"Ruby\"\nputs favorite_language\n\nputs \"Hello there!\"\ngreeting = gets.chomp\n\n# Add your case statement below!\ncase greeting when \"English\" then puts \"Hello!\"\nwhen \"French\" then puts \"Bonjour!\"\nwhen \"German\" then puts \"Guten Tag!\"\nwhen \"Finnish\" then puts \"Haloo!\"\nelse puts \"I don't know that language!'\"\nend\n\n\nputs true ?  \"true ternary\" : \"false ternary\"\n\nputs \"one-liner\" if true\n\nputs \"unless one-liner\" unless false\n</code></pre>"},{"location":"programming-languages/ruby/basics/#loops","title":"loops","text":"<pre><code># LOOPS\n\n# print 30 times\n30.times do\nprint \"Ruby!\"\nend\n\nx = 0\nloop do\nx += 1\nprint \"Ruby!\"\nbreak if x == 30\nend\n\n\n# print 1 - 50 inclusive\n\ni = 1\nwhile i &lt;= 50 do\nprint i\ni += 1\nend\n\nuntil i &gt; 50 do print i\ni += 1\nend\n\nfor x in 1..50\nprint x\nend\n\nmy_age = 26\nmy_age.times { print \"printing my age times \"} odds = [1,3,5,7,9]\n\nodds.each { |num| print num * 2 }\n\nodds.each do |num|\nprint num * 2\nend\n\nloop {print \"hello world forever \"}\n\ni = 20\nloop do\ni -= 1\nnext if i % 2 != 0 print \"#{i}\"\nbreak if i &lt;= 0\nend\n\ni = 20\nloop do\ni -= 1\nprint \"#{i}\"\nbreak if i &lt;= 0\nend\n\nfor num in 1..20\nputs num\nend\n\nfor num in 1...15\nputs num\nend\n\ncounter = 1\nuntil counter &gt; 10\nputs counter\n# Add code to update 'counter' here!\ncounter += 1\nend\n\ni = 0\nwhile i &lt; 5\nputs i\ni += 1\nend\n</code></pre>"},{"location":"programming-languages/ruby/basics/#methods-blocks-sorting","title":"methods blocks sorting","text":"<pre><code># METHODS BLOCKS SORTING\n\ndef sort_this(arr, rev=false)\narr.sort!\nif rev\narr.reverse!\nelse\nreturn arr\nend\nend\n\nnumbers = [5,4,1,2,3]\n\nputs sort_this(numbers, true)\n\nfruits = [\"orange\", \"apple\", \"banana\", \"pear\", \"grapes\"]\n\nfruits.sort! { |first, second| second &lt;: first }\n\nmy_array = [1, 2, 3, 4, 5]\n\nmy_array.each { |ray|\nputs ray**2\nputs ray * ray\n}\n\ndef welcome\nputs \"Welcome to Ruby!\"\nend\n\nwelcome\n\ndef welcome(name)\nreturn \"Hello, #{name}\"\nend\n\nwelcome(\"justin\")\n\nbooks = [\"Charlie and the Chocolate Factory\", \"War and Peace\", \"Utopia\", \"A Brief History of Time\", \"A Wrinkle in Time\"]\n\n# To sort our books in ascending order, in-place\nbooks.sort! { |firstBook, secondBook| firstBook &lt;: secondBook }\nputs books\n\n# reverse sort\nbooks.sort! { |firstBook, secondBook| secondBook &lt;: firstBook }\n\nputs books\n\nbook_1 = \"A Wrinkle in Time\"\n\nbook_2 = \"A Brief History of Time\"\n\nputs book_1 &lt;: book_2\n\n# 1\n\nbooks = [\"Charlie and the Chocolate Factory\", \"War and Peace\", \"Utopia\", \"A Brief History of Time\", \"A Wrinkle in Time\"]\n\nbooks.sort!\n\n# books = [\"A Brief History of Time\", \"A Wrinkle in Time\", \"Charlie and the Chocolate Factory\", \"Utopia\", \"War and Peace\"]\n\nmy_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]\n\nmy_array.sort!\n\n# my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n[1, 2, 3, 4, 5].each { |i| puts i }\n[1, 2, 3, 4, 5].each { |i| puts 5 }\n[1, 2, 3, 4, 5].each { |i| puts i * 5 }\n\n# method that capitalizes a word\ndef capitalize(string) puts \"#{string[0].upcase}#{string[1..-1]}\"\nend\n\ncapitalize(\"ryan\") # prints \"Ryan\"\ncapitalize(\"jane\") # prints \"Jane\"\n\n# block that capitalizes each string in the array\n[\"ryan\", \"jane\"].each {|string| puts \"#{string[0].upcase}#{string[1..-1]}\"} # prints \"Ryan\", then \"Jane\"\n\n# block that uses a method to capitalize each string in the array\n[\"ryan\", \"jane\"].each {|string| capitalize(string)\n}\n\ndef greeter(name) return \"Greetings #{name}\"\nend def by_three?(number)\nif number % 3 == 0\nreturn true\nelse\nreturn false\nend\nend\n\ndef add (x,y)\nreturn x + y end\n\ndef greet_friends(greeting, *friends)\nfriends.each { |friend| puts \"#{greeting}, #{friend}!\" }\nend\n\ngreet_friends(\"greetings\", \"friend1\", \"friend2\", \"friend3\", \"friend4\")\n\ndef greet_friends_again(greeting, *friends)\ngreet = greeting\nlast_friend = friends[-1]\nfriends.each { |friend| if !(friend == last_friend)\ngreet +=  \" #{friend},\"\nend\n}\ngreet += \" and #{last_friend}!\"\nputs greet\nend\n\ngreet_friends_again(\"greetings\", \"friend1\", \"friend2\", \"friend3\", \"friend4\")\n\ndef cube_this(n)\nputs n ** 3\nend\n\ncube_this(8)\n[1, 2, 3, 4, 5].each { |i| puts 5 }\ndef square_this(n)\nputs n ** 2\nend\n\ndef array_of_10\nputs (1..10).to_a\nend\n\narray_of_10\n\ndef greeting\nputs \"greetings\"\nend\n\ngreeting\n\ndef puts_1_to_10\n(1..10).each { |i| puts i }\nend\n\nputs_1_to_10 </code></pre>"},{"location":"programming-languages/ruby/basics/#object-oriented-programming","title":"object-oriented programming","text":"<pre><code>class Account\nattr_reader :name\nattr_reader :balance\ndef initialize(name, balance=100)\n@name=name\n@balance=balance\nend\n\npublic\n\ndef display_balance(pin_number)\nputs pin_number == pin ? \"Balance: $#{@balance}\" : pin_error\nend\n\ndef withdraw(pin_number, amount)\nif pin_number == pin\n@balance -= amount\nputs \"Withdrew #{amount}. New balance: $#{@balance}\"  else\nputs pin_erorr\nend\nend\n\nprivate\n\ndef pin\n@pin = 1234\nend\n\ndef pin_error\nreturn \"Access denied: incorrect PIN.\"\nend\n\nend\n\nchecking_account = Account.new(\"Justin\", 500)\n\n\nclass Application\nattr_accessor :status\n\npublic\ndef print_status\nputs \"All systems go!\"\nend\n\nprivate\ndef password\nreturn 12345\nend\nend\n\nmodule ThePresent\ndef now\nputs \"It's #{Time.new.hour &gt; 12 ? Time.new.hour - 12 : Time.new.hour}:#{Time.new.min} #{Time.new.hour &gt; 12 ? 'PM' : 'AM'} (GMT).\"\nend\nend\n\nclass TheHereAnd\nextend ThePresent\nend\n\nmodule MartialArts\ndef swordsman\nputs \"I'm a swordsman.\"\nend\nend\n\n\nclass Ninja\ninclude MartialArts\ndef initialize(clan)\n@clan = clan\nend\nend\n\nclass Samurai\ninclude MartialArts\ndef initialize(shogun)\n@shogun = shogun\nend\nend\n\n\nmodule Action\ndef jump\n@distance = rand(4) + 2\nputs \"I jumped forward #{@distance} feet!\"\nend\nend\n\nclass Rabbit\ninclude Action\nattr_reader :name\ndef initialize(name)\n@name = name\nend\nend\n\nclass Cricket\ninclude Action\nattr_reader :name\ndef initialize(name)\n@name = name\nend\nend\n\npeter = Rabbit.new(\"Peter\")\njiminy = Cricket.new(\"Jiminy\")\n\npeter.jump\njiminy.jump\n\nclass Angle\ninclude Math\nattr_accessor :radians\n\ndef initialize(radians)\n@radians = radians\nend\n\ndef cosine\ncos(@radians)\nend\nend\n\nacute = Angle.new(1)\nacute.cosine\n\n\nmodule MyCircle\nPI = 3.14159265358979323846\nend\n\nrequire \"mycircle\"\nputs MyCircle::PI\nputs Math::PI\n\n\nmodule MyLibrary\nFAVE_BOOK = \"Harry Potter\"\nend\n\nclass Person\nattr_reader :name\nattr_writer :favhoby\nattr_accessor :job\ndef initialize(name, favhobby,job)\n@name = name\n@job = job\n@favhobby = hobby\nend\nend\n\nclass Person\ndef initialize(name, job)\n@name = name\n@job = job\nend\n\ndef name\n@name\nend\n\ndef job=(new_job)\n@job = new_job\nend\nend\n\nclass Dog\ndef initialize(name, breed)\n@name = name\n@breed = breed\nend\n\npublic\ndef bark\nputs \"Woof!\"\nend\n\nprivate\ndef id\n@id_number = 12345\nend\nend\n\nclass Computer\n@@users = {}\ndef initialize(username, password)\n@username = username\n@password = password\n@files = {}\n@@users[username] = password\nend\n\ndef Computer.get_users\nreturn @@users\nend\n\ndef create(filename)\ntime = Time.now\n@files[filename] = time\nputs \"#{filename} was created at #{time} by #{@username}. \"\nend\n\ndef delete(filename)\ntime = Time.now\n@files.delete(filename)\nputs \"#{filename} was deleted at #{time} by #{@username}. \"\nend\ndef update(filename)\ntime = Time.now\n@files[filename] = time\nputs \"#{filename} was updated at #{time} by #{@username}. \"\nend\n\nend\n\nmy_computer = Computer.new(\"justinsname\", \"justinspass\")\n\n\nclass Message @@messages_sent = 0\ndef initialize(from, to)\n@from = from @to = to @@messages_sent +=1 end\nend\n\nclass Email &lt; Message\ndef initialize(from, to)\nsuper\nend\nend\n\nmy_message = Message.new(\"Ian\", \"Alex\")\n\n\n# throws error inheriting from multiple classes\n=begin\nclass Creature\n  def initialize(name)\n    @name = name\n  end\nend\n\nclass Person\n  def initialize(name)\n    @name = name\n  end\nend\n\nclass Dragon &lt; Creature; end\nclass Dragon &lt; Person; end\n=end\n\nclass Creature\ndef initialize(name)\n@name = name\nend\n\ndef fight\nreturn \"Punch to the chops!\"\nend\nend\n\nclass Dragon &lt; Creature\ndef fight\nputs \"Instead of breathing fire...\"\nsuper\nend\nend\n\nclass ApplicationError\ndef display_error\nputs \"Error! Error!\"\nend\nend\n\nclass SuperBadError &lt; ApplicationError\nend\n\nerr = SuperBadError.new\nerr.display_error\n\nclass Person\n\n@@people_count = 0\n\ndef initialize(name,age,profession)\n@name = name\n@age = age\n@profession = profession\n@@people_count += 1\nend\n\ndef self.number_of_instances\n\nreturn @@people_count    end\nend\n\nmatz = Person.new(\"Yukihiro\")\ndhh = Person.new(\"David\")\n\nputs \"Number of Person instances: #{Person.number_of_instances}\"\n\n\nclass MyClass\n$my_variable = \"Hello!\"\nend\n\nputs $my_variable\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/","title":"Why's (poignant) guide to ruby","text":"<p>An interesting / strange book giving an introduction and examples of the ruby language</p>"},{"location":"programming-languages/ruby/poignant-guide/#chapter-3","title":"Chapter 3","text":""},{"location":"programming-languages/ruby/poignant-guide/#check-for-string-inside-word","title":"check for string inside word","text":"<pre><code>exit unless 'restaurant'.include? 'aura'\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#capitalize-and-print-each-string-in-array","title":"capitalize and print each string in array","text":"<pre><code>['toast', 'cheese', 'wine'].each { |food| print food.capitalize }\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#underscores-for-large-numbers","title":"underscores for large numbers","text":"<pre><code>one_billion = 1_000_000_000\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#constants-variables-that-never-change","title":"constants (variables that never change)","text":"<pre><code>EmpireStateBuilding = '350 5th Avenue, NYC, NY'\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#methods","title":"methods","text":"<pre><code>front_door.open\nfront_door.open.close\nfront_door.is_open?\nfront_door.paint( 3, :red ).dry( 30 ).close()\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#kernel-methods","title":"kernel methods","text":"<pre><code>print 'print is a kernel method and does not require a dot'\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#class-methods","title":"class methods","text":"<pre><code>Door::new( :oak )\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#chapter-4","title":"Chapter 4","text":""},{"location":"programming-languages/ruby/poignant-guide/#nil","title":"nil","text":"<p>means empty, or false (not equal to 0)</p> <pre><code>empty_cup = nil\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#if-statement","title":"if statement","text":"<pre><code>if empty_cup print 'empty_cup is not nil or false'\nend\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#unless-keyword","title":"unless keyword","text":"<p>similar to \"if not\" </p> <pre><code>unless empty_cup print 'cup is nil or false'\nend\n\nprint 'we have a plastic cup, but not a glass cup' if plastic_cup unless glass_cup\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#ruby-version","title":"ruby version","text":"<pre><code>ruby -v\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#irb","title":"irb","text":"<p>interactive ruby</p> <pre><code>irb \nirb --prompt simple\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#ri","title":"ri","text":"<ul> <li>gives description of specified Ruby Class or method</li> </ul> <pre><code>ri File\nri File::read\nri -l # lists all Classes / Modules\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#chapter-5","title":"Chapter 5","text":""},{"location":"programming-languages/ruby/poignant-guide/#case-when-statement","title":"case when statement","text":"<pre><code>def dr_chams_timeline( year )\ncase year\nwhen 1894\n\"Born.\"\nwhen 1895..1913\n\"Childhood in Lousville, Winston Co., Mississippi.\"\nwhen 1914..1919\n\"Worked at a pecan nursery; punched a Quaker.\"\nwhen 1920..1928\n\"Sailed in the Brotherhood of River Wisdomming, which journeyed \\\n     the Mississippi River and engaged in thoughtful self-improvement, \\\n     where he finished 140 credit hours from their Oarniversity.\"\nwhen 1929\n\"Returned to Louisville to pen a novel about time-travelling pheasant hunters.\"\nwhen 1930..1933\n\"Took up a respectable career insuring pecan nurseries.  Financially stable, he \\\n     spent time in Brazil and New Mexico, buying up rare paper-shell pecan trees.  Just \\\n     as his notoriety came to a crescendo: gosh, he tried to buried himself alive.\"\nwhen 1934\n\"Went back to writing his novel.  Changed the hunters to insurance tycoons and the \\\n     pheasants to Quakers.\"\nwhen 1935..1940\n\"Took Arthur Cone, the Headmaster of the Brotherhood of River Wisdomming, as a \\\n     houseguest.  Together for five years, engineering and inventing.\"\nwhen 1941\n\"And this is where things got interesting.\"\nend\nend\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#creating-a-class","title":"creating a class","text":"<pre><code>require 'endertromb'\nclass WishMaker\ndef initialize\n@energy = rand( 6 )\nend\ndef grant( wish )\nif wish.length &gt; 10 or wish.include? ' '\nraise ArgumentError, \"Bad wish.\"\nend\nif @energy.zero?\nraise Exception, \"No energy left.\"\nend\n@energy -= 1\nEndertromb::make( wish )\nend\nend\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#string-indexes","title":"string indexes","text":"<pre><code>str = \"A string is a long shelf of letters and spaces.\"\nputs str[0]       # prints 'A'\nputs str[0..-1]   # prints 'A string is a long shelf of letters and spaces.'\nputs str[1..-2]   # prints ' string is a long shelf of letters and spaces'\nputs str[0, 3]    # prints 'A s'\nputs str['shelf'] # prints 'shelf'\n\nputs str[0, -1]    # prints nil\nputs str[0, str.length - 1] # prints 'A string is a long shelf of letters and spaces'\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#array-collect-method","title":"array collect method","text":"<p>similar to JavaScript map method</p> <pre><code>addtips = [9.00, 9.00, 9.00].collect { |cost| cost + ( cost * 0.20 ) }\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#classes-raise-array-of-arguments-attr","title":"classes, raise, array of arguments, attr","text":"<pre><code>class LotteryTicket\n\nNUMERIC_RANGE = 1..25\n\nattr_reader :picks, :purchased # attr_reader, attr_ writer, attr_accessor manage access to methods outside a class\n\ndef initialize( *picks ) # *picks means all given arguments will be turned into an Array and can be any number\nif picks.length != 3\nraise ArgumentError, \"three numbers must be picked\" # can use built in Ruby errors\nelsif picks.uniq.length != 3\nraise ArgumentError, \"the three picks must be different numbers\"\nelsif picks.detect { |p| not NUMERIC_RANGE === p }\nraise ArgumentError, \"the three picks must be numbers between 1 and 25\"\nend\n@picks = picks\n@purchased = Time.now\nend\n\n# if Argument error is thrown because 2 numbers are the same, then it will rescue and retry until numbers are unique\ndef self.new_random\nnew( rand( 25 ) + 1, rand( 25 ) + 1, rand( 25 ) + 1 )\nrescue ArgumentError\nretry\nend\n\ndef score( final )\ncount = 0\nfinal.picks.each do |note|\ncount +=1 if picks.include? note\nend\ncount\nend\n\nend\n\nclass LotteryDraw\n@@tickets = {}\ndef LotteryDraw.buy( customer, *tickets )\nunless @@tickets.has_key?( customer )\n@@tickets[customer] = []\nend\n@@tickets[customer] += tickets\nend\nend\n\n\n\nclass &lt;&lt; LotteryDraw # &lt;&lt; operator allows you to alter the definition of an object\ndef play\nfinal = LotteryTicket.new_random\nwinners = {}\n@@tickets.each do |buyer, ticket_list|\nticket_list.each do |ticket|\nscore = ticket.score( final )\nnext if score.zero?\nwinners[buyer] ||= [] # shortcut for winners[buyer] = winners[buyer] || [] \nwinners[buyer] &lt;&lt; [ ticket, score ]\nend\nend\n@@tickets.clear\nwinners\nend\nend\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#chapter-6","title":"chapter 6","text":""},{"location":"programming-languages/ruby/poignant-guide/#open-uri-example","title":"open-uri example","text":"<pre><code>require 'open-uri'\nrequire 'cgi'\n\nmodule PreEventualist\ndef self.open(page, query)\nqs = query.map do |k, v|\n\"#{CGI.escape k}=#{CGI.escape v}\"\nend.join '&amp;'\nquery = \"http://preeventualist.org/lost/#{page}?#{qs}\"\nputs \"QUERY #{query}\"\nURI.parse(query).open do |lost|\nlost.read.split(\"--\\n\")\nend\nend\n\ndef self.search(word)\nopen 'search', 'q' =&gt; word\nend\n\ndef self.searchlost(word)\nopen 'searchlost', 'q' =&gt; word\nend\n\ndef self.searchfound(word)\nopen 'searchfound', 'q' =&gt; word\nend\n\ndef self.addfound(your_name, item_lost, found_at, description)\nopen 'addfound', 'name' =&gt; your_name, 'item' =&gt; item_lost,\n'at' =&gt; found_at, 'desc' =&gt; description\nend\n\ndef self.addlost(your_name, item_found, last_seen, description)\nopen 'addlost', 'name' =&gt; your_name, 'item' =&gt; item_found,\n'seen' =&gt; last_seen, 'desc' =&gt; description\nend\nend\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#meta-programming","title":"meta programming","text":"<ul> <li>The author explains meta programming as code which is used to write other code (or creating programs to create other programs)</li> <li>An example of above would be writing a class which future classes could inherit from, using the original class code to write more code </li> <li>a real life example is hiring and training an employee, who's job is to train new employees </li> </ul> <p>When one learns to learn, one is making models, using symbols, analogizing, making metaphors, in short, inventing and using language, mathematics, art, politics, business, etc. At the critical brain (cortex) size, languages and its consequences appear. To avoid the necessity of repeating learning to learn, symbols, metaphors, models each time, I symbolize the underlying idea in these operations as metaprogramming. </p> <p>- John C. Lilly, Programming and Metaprogramming in the Human Biocomputer, New York, 1972.</p> <p>All sensuous response to reality is an interpretation of it. Beetles and monkeys clearly interpret their world, and act on the basis of what they see. Our physical senses are themselves organs of interpretation. What distinguishes us from our fellow animals is that we are able in turn to interpret these interpretations. In that sense, all human language is meta-language. It is a second-order reflection on the \u2018language\u2019 of our bodies\u2014of our sensory apparatus.</p> <p>- Terry Eagleton, After Theory, London, 2003, ch. 3.</p> <ul> <li>the <code>eval</code> method takes in a string argument and runs the code as if it was not a string</li> <li>the <code>eval</code> method \"evaluates\" a string as if it were normal code</li> </ul>"},{"location":"programming-languages/ruby/poignant-guide/#meta-programming-with-classes","title":"meta programming with classes","text":"<pre><code># The guts of life force within Dwemthy's Array\nclass Creature\n# Get a metaclass for this class\ndef self.metaclass\nclass &lt;&lt; self; self; end\nend\n\n# Advanced metaprogramming code for nice, clean traits\ndef self.traits(*arr)\nreturn @traits if arr.empty?\n\n# 1. Set up accessors for each variable\nattr_accessor(*arr)\n\n# 2. Add a new class method to for each trait.\narr.each do |a|\nmetaclass.instance_eval do\ndefine_method(a) do |val|\n@traits ||= {}\n@traits[a] = val\nend\nend\nend\n\n# 3. For each monster, the `initialize' method\n#    should use the default number for each trait.\nclass_eval do\ndefine_method(:initialize) do\nself.class.traits.each do |k, v|\ninstance_variable_set(\"@#{k}\", v)\nend\nend\nend\nend\n\n# Creature attributes are read-only\ntraits :life, :strength, :charisma, :weapon\n\n# This method applies a hit taken during a fight.\ndef hit(damage)\np_up = rand(charisma)\nif p_up % 9 == 7\n@life += p_up / 4\nputs \"[#{self.class} magick powers up #{p_up}!]\"\nend\n@life -= damage\nputs \"[#{self.class} has died.]\" if @life &lt;= 0\nend\n\n# This method takes one turn in a fight.\ndef fight(enemy, weapon)\nif life &lt;= 0\nputs \"[#{self.class} is too dead to fight!]\"\nreturn\nend\n\n# Attack the opponent\nyour_hit = rand(strength + weapon)\nputs \"[You hit with #{your_hit} points of damage!]\"\nenemy.hit(your_hit)\n\n# Retaliation\np enemy\nif enemy.life &gt; 0\nenemy_hit = rand(enemy.strength + enemy.weapon)\nputs \"[Your enemy hit with #{enemy_hit} points of damage!]\"\nhit(enemy_hit)\nend\nend\nend\n\nclass Dragon &lt; Creature\nlife 1340     # tough scales\nstrength 451  # bristling veins\ncharisma 1020 # toothy smile\nweapon 939    # fire breath\nend\n\nclass DwemthysArray &lt; Array\nalias _inspect inspect\ndef inspect\n\"#&lt;#{self.class}#{_inspect}&gt;\"\nend\n\ndef method_missing(meth, *args)\nanswer = first.send(meth, *args)\nif first.life &lt;= 0\nshift\nif empty?\nputs \"[Whoa. You decimated Dwemthy's Array!]\"\nelse\nputs \"[Get ready. #{first.class} has emerged.]\"\nend\nend\nanswer || 0\nend\nend\n</code></pre>"},{"location":"programming-languages/ruby/poignant-guide/#meta-programming-with-classes-part-2","title":"meta programming with classes part 2","text":"<pre><code>require './dwemthy'\n\nclass Rabbit &lt; Creature\ntraits :bombs\n\nlife 10\nstrength 2\ncharisma 44\nweapon 4\nbombs 3\n\n# little boomerang\ndef ^(other)\nfight(other, 13)\nend\n\n# the hero's sword is unlimited!!\ndef /(other)\nfight(other, rand(4 + ((other.life % 10)**2)))\nend\n\n# lettuce will build your strength and extra ruffage\n# will fly in the face of your opponent!!\ndef %(other)\nlettuce = rand(charisma)\nputs \"[Healthy lettuce gives you #{lettuce} life points!!]\"\n@life += lettuce\nfight(other, 0)\nend\n\n# bombs, but you only have three!!\ndef *(other)\nif @bombs.zero?\nputs \"[UHN!! You're out of bombs!!]\"\nreturn\nend\n@bombs -= 1\nfight(other, 86)\nend\nend\n</code></pre>"},{"location":"programming-languages/rust/","title":"Rust","text":"<p>a modern, low-level, statically typed programming language</p>"},{"location":"programming-languages/rust/#rust-terms","title":"Rust terms","text":"<ul> <li>panic ( when a program exits with an error it is considered to panic )</li> </ul>"},{"location":"programming-languages/rust/#keywords","title":"keywords","text":"<p>and their functionality</p> <ul> <li>as - perform primitive casting, disambiguate the specific trait containing an item, or rename items in use and extern crate statements</li> <li>async - return a Future instead of blocking the current thread</li> <li>await - suspend execution until the result of a Future is ready</li> <li>break - exit a loop immediately</li> <li>const - define constant items or constant raw pointers</li> <li>continue - continue to the next loop iteration</li> <li>crate - link an external crate or a macro variable representing the crate in which the macro is defined</li> <li>dyn - dynamic dispatch to a trait object</li> <li>else - fallback for if and if let control flow constructs</li> <li>enum - define an enumeration</li> <li>extern - link an external crate, function, or variable</li> <li>false - Boolean false literal</li> <li>fn - define a function or the function pointer type</li> <li>for - loop over items from an iterator, implement a trait, or specify a higher-ranked lifetime</li> <li>if - branch based on the result of a conditional expression</li> <li>impl - implement inherent or trait functionality</li> <li>in - part of for loop syntax</li> <li>let - bind a variable</li> <li>loop - loop unconditionally</li> <li>match - match a value to patterns</li> <li>mod - define a module</li> <li>move - make a closure take ownership of all its captures</li> <li>mut - denote mutability in references, raw pointers, or pattern bindings</li> <li>pub - denote public visibility in struct fields, impl blocks, or modules</li> <li>ref - bind by reference</li> <li>return - return from function</li> <li>Self - a type alias for the type we are defining or implementing</li> <li>self - method subject or current module</li> <li>static - global variable or lifetime lasting the entire program execution</li> <li>struct - define a structure</li> <li>super - parent module of the current module</li> <li>trait - define a trait</li> <li>true - Boolean true literal</li> <li>type - define a type alias or associated type</li> <li>union - define a union and is only a keyword when used in a union declaration</li> <li>unsafe - denote unsafe code, functions, traits, or implementations</li> <li>use - bring symbols into scope</li> <li>where - denote clauses that constrain a type</li> <li>while - loop conditionally based on the result of an expression</li> </ul>"},{"location":"programming-languages/rust/#reserved-words","title":"reserved words","text":"<p>keywords not yet implemented</p> <ul> <li>abstract</li> <li>become</li> <li>box</li> <li>do</li> <li>final</li> <li>macro</li> <li>override</li> <li>priv</li> <li>try</li> <li>typeof</li> <li>unsized</li> <li>virtual</li> <li>yield</li> </ul>"},{"location":"programming-languages/rust/basics/","title":"Rust Programming Basics","text":""},{"location":"programming-languages/rust/basics/#variables","title":"variables","text":"<ul> <li>immutable by default</li> <li>Rust automatically types variables </li> <li>Rust encourages favoring immutability</li> <li>once variable is immutable, or a value is bound to variable name, value cannot be changed </li> <li>Rust catches immutability errors at compile-time</li> <li>use mut to create a mutable variable</li> </ul> <p><pre><code>// throws error because immutable variable cannot be assigned to 5\nfn main() {\nlet x = 5; // rust automatically assigns 5 to int type\nprintln!(\"The value of x is: {}\", x);\nx = 6;\nprintln!(\"The value of x is now: {}\", x);\n}\n</code></pre> <pre><code>// to make a mutable variable\nfn main() {\nlet mut x = 5;\nprintln!(\"The value of x is: {}\", x);\nx = 6;\nprintln!(\"The value of x is now: {}\", x);\n}\n</code></pre></p> <ul> <li>making a variable mutable can make code more convenient to write</li> <li>when using large data structures, mutating an instance in place may be faster than copying and returning newly allocated instances</li> <li>with smaller data structures, creating new instances and writing in a more functional programming style may be easier to think through, so lower performance might be worth the mental gain</li> </ul>"},{"location":"programming-languages/rust/basics/#variables-vs-constants","title":"variables vs constants","text":"<ul> <li>cannot use mut with constants</li> <li>constants are by default and always immutable</li> <li>constants are declared with const instead of let</li> <li>constant type values must be annotated</li> <li>naming convention for constants is to use all uppercase with underscores between words</li> <li>Rust compiler can evaluate a limited set of operations at compile time</li> <li>constants are valid for the entire time a program runs, within the scope they were declared in</li> </ul> <pre><code>// example const \n\nconst SECONDS_IN_WEEK: u32 = 60 * 60 * 24 * 7;\n</code></pre>"},{"location":"programming-languages/rust/basics/#shadowing","title":"shadowing","text":"<ul> <li>shadowing is declaring a new variable with the same name as a previous variable</li> <li>shadowing allows making transformations to a variable but still keeping it immutable afterwards</li> </ul> <pre><code>fn main() {\nlet x = 5;\n\nlet x = x + 1;\n\n{\nlet x = x * 2;\nprintln!(\"The value of x in the inner scope is: {}\", x);\n}\n\nprintln!(\"The value of x is: {}\", x);\n}\n// \u2192 The value of x in the inner scope is: 12\n// \u2192 The value of x is: 6\n</code></pre> <ul> <li>shadowing allows changing a variables type, while using mut does not </li> <li>example if we wanted to get the users input for preffered spaces in place of tabs </li> </ul> <pre><code>fn main {\n// this is fine\nlet spaces1 = '    ';\nlet spaces1 = spaces.len();\n\n// this is not fine\nlet mut spaces2 = '    ';\nspaces2 = spaces.len();\n}\n</code></pre>"},{"location":"programming-languages/rust/basics/#functions","title":"functions","text":""},{"location":"programming-languages/rust/basics/#overview","title":"overview","text":"<ul> <li>main is one of the most important functions in Rust and the entry point of many programs</li> <li>fn keyword allows the declaration of new functions</li> <li>Rust code uses snake case convention for function and variable names </li> <li>snake case means all letters lowercase and an underscore in between words ( this_variable )</li> <li>functions start with fn and curly brackets tell the compiler where the function starts and ends</li> <li>functions can be defined before or after where they are called</li> <li>functions can have parameters</li> <li>parameters are special variables that are apart of a functions signature</li> <li>in function signatures the type of each parameter must be declared</li> <li>required type declations in parameters means the compiler almost never needs the type annotated elsewhere in the code</li> </ul> <pre><code>fn main() {\nprintln!(\"Hello, world!\");\n\nexample_function(5);\n\nprint_labeled_measurement(5,'h');\n}\n\nfn example_function(x: i32) {\nprintln!(\"Example function.\");\nprintln!(\"The value of x is: {}\", x);\n}\n\nfn print_labeled_measurement(value: i32, unit_label: char) {\nprintln!(\"The measurement is: {}{}\", value, unit_label);\n}\n</code></pre>"},{"location":"programming-languages/rust/basics/#function-bodies","title":"function bodies","text":"<ul> <li>function bodies are made up of a series of statements that optionally end in an expression</li> <li>statements are instructions that perform some action and do not return a value</li> <li>expressions evaluate to a resulting value</li> <li>function definitions are statements</li> <li>calling a function is an expression</li> <li>since statements do not return a value they cannot be assigned to a variable because there would be nothing to bind to </li> <li>this is different from languages such as c and ruby</li> </ul> <p><pre><code>fn five() -&gt; i32 {\n5 // expression\n}\n\n\nfn plus_one(x: i32) -&gt; i32 {\nx + 1 // expression\n}\n\nfn main() {\n// statements because they do not return values\nlet x = five(); let z = plus_one(5); let y=6;\n}\n</code></pre> - most functions return the last expression implicitely</p>"},{"location":"programming-languages/rust/basics/#conditions","title":"conditions","text":"<ul> <li>the different blocks of code in if statements are sometimes called arms</li> <li>condition on the code must be a bool</li> <li>implicit if statements to check if a number exists do not work in Rust</li> <li>a let statement can be assigned to the value of an if statement</li> </ul> <pre><code>fn main() {\n\nlet condition = true;\n\nlet this_number = if condition { 5 } else { 6 };\n\nprintln!(\"The value of this_number is: {}\", this_number);\n\nlet number_five = 5;\n\nlet under_five = if number_five &lt; 5 { true } else { false };\n\nprintln!(\"The value of under_five is: {}\", under_five);\n\n\nif number != 0 {\nprintln!(\"number was something other than zero\");\n} // -&gt; this is fine\n\nif number {\nprintln!(\"number was three\");\n} // -&gt; throws error because 3 is an integer and not a bool\n\nlet number_six = 6;\n\nif number_six % 4 == 0 {\nprintln!(\"number is divisible by 4\");\n} else if number_six % 3 == 0 {\nprintln!(\"number is divisible by 3\");\n} else if number_six % 2 == 0 {\nprintln!(\"number is divisible by 2\");\n} else {\nprintln!(\"number is not divisible by 4, 3, or 2\");\n}\n}\n</code></pre>"},{"location":"programming-languages/rust/basics/#loops","title":"loops","text":"<ul> <li>an endless loop </li> </ul> <p><pre><code>fn main(){\nprintln!(\"oops\");\nendless_loop()\n}\n\nfn endless_loop() {\nlet mut count = 0;\nloop {\nprintln!(\"count again! {}\", count);\ncount = count + 1\n}\n}\n</code></pre> - break and continue breakout of the innermost loop they are in  - use a loop label for an outer loop and specify it with the above keywords to change this behavior</p> <pre><code>    let mut count = 0;\n'counting_up: loop {\nprintln!(\"count = {}\", count);\nlet mut remaining = 10;\n\nloop {\nprintln!(\"remaining = {}\", remaining);\nif remaining == 9 {\nbreak;\n}\nif count == 2 {\nbreak 'counting_up;\n}\nremaining -= 1;\n}\n\ncount += 1;\n}\nprintln!(\"End count = {}\", count);\n</code></pre>"},{"location":"programming-languages/rust/basics/#returning-values","title":"returning values","text":"<ul> <li>one use of a loop is to keep retrying an operation that might fail</li> <li>a loop could be use to keep checking on if a thread has completed it's job</li> <li>to pass the result of the loop to the rest of the code return the value after the break expression</li> </ul> <pre><code>fn main() {\nlet mut counter = 0;\n\nlet result = loop {\ncounter += 1;\n\nif counter == 10 {\nbreak counter * 2;\n}\n};\n\nprintln!(\"The result is {}\", result);\n}\n</code></pre>"},{"location":"programming-languages/rust/basics/#while-loop","title":"while loop","text":"<pre><code>fn main() {\nlet mut number = 3;\n\nwhile number != 0 {\nprintln!(\"{}!\", number);\n\nnumber -= 1;\n}\n\nprintln!(\"LIFTOFF!!!\");\n}\n</code></pre>"},{"location":"programming-languages/rust/basics/#for-loop-a-collection","title":"for loop a collection","text":"<ul> <li>looping through a collection with a for loop is most likely better than using a while loop</li> <li>a for loop is safer and more concise than a while loop for going through a collection </li> </ul> <p><pre><code>fn main() {\nlet a = [10, 20, 30, 40, 50];\n\nfor element in a {\nprintln!(\"the value is: {}\", element);\n}\n}\n</code></pre> - a Range is a standard library type that generates all numbers from n1 to n2 non inclusive -  (1..4) is 1 2 3 </p> <pre><code>fn main() {\nfor number in (1..4).rev() {\nprintln!(\"{}!\", number);\n}\nprintln!(\"LIFTOFF!!!\");\n}\n</code></pre>"},{"location":"programming-languages/rust/code-examples/","title":"Code Examples","text":""},{"location":"programming-languages/rust/code-examples/#formatting-text","title":"formatting text","text":"<pre><code>fn main() {\nprintln!(\"This is simply println! to the console\");\n\nprintln!(\n\"{} lang uses curly brackets for placeholders {} \",\n\"Rust\", \"like using f with python\"\n);\n\nprintln!(\n\"Rust {1} {0} postional {2} and {1} {0} named {2}\",\n\"use\", \"can\", \"parameters\"\n);\n\nprintln!(\n\"My name is {name} and i {activity}\",\nname = \"Justin\",\nactivity = \"code\"\n);\n\n// traits\nprintln!(\"Binary: {:b} Hex: {:x} Octal: {:o}\", 1, 1, 1);\nprintln!(\"Binary: {:b} Hex: {:x} Octal: {:o}\", 5, 5, 5);\nprintln!(\"Binary: {:b} Hex: {:x} Octal: {:o}\", 10, 10, 10);\n\n// debug trait\nprintln!(\"{:?}\", (12, true, \"hello\"));\n\n// basic math\nprintln!(\"10 + 10 = {}\", 10 + 10);\n}\n</code></pre>"},{"location":"programming-languages/rust/datatypes/","title":"Datatypes","text":""},{"location":"programming-languages/rust/datatypes/#overview","title":"overview","text":"<ul> <li> <p>Rust must know the data types of all variables at compile time </p> </li> <li> <p>every value in rust is a certain data type </p> </li> <li> <p>data types tell Rust how it is going to work with that data and how much memory to reserve for it</p> </li> <li> <p>scalar and compound are two data type subsets</p> </li> <li> <p>Rust compiler can infer a variable type many times but other times we must annotate it</p> </li> </ul> <pre><code>// converting the string to integer below would confuse compiler so we annotate\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n</code></pre>"},{"location":"programming-languages/rust/datatypes/#scalar-types","title":"scalar types","text":"<p>Rust has 4 primary scalar types</p> <ul> <li>integers, floating-point numbers, Booleans, characters</li> <li>represent a single value</li> </ul>"},{"location":"programming-languages/rust/datatypes/#number-types","title":"number types","text":"<p>a number without a fractional component, a whole number </p> <ul> <li>each integer is given with the bits of space that it uses up </li> <li>each integer is also labeled signed or unsigned</li> <li>isize and usize types depend on the kind of computer your program is running on</li> <li>32 bits for a 32-bit architecture (older computers and some modern devices)</li> <li>64 bits for a 64-bit architecture (most modern computers / devices) </li> <li>Rust defaults to i32</li> <li>if unsure what integer type to use, the Rust default is a good place to start</li> <li>isize and usize is most often used when indexing a collection</li> </ul> Length Signed Unsigned 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch-bit isize usize"},{"location":"programming-languages/rust/datatypes/#signed-integer-types","title":"signed integer types","text":"<ul> <li>signed means it is possible for the variable to be negative so we need to include the sign to specify </li> <li>signed numbers are stored using two\u2019s complement representation</li> <li>signed variants of integers can store numbers from  -(2n - 1) to 2n - 1 - 1 inclusive </li> <li>n is the number of bits that variant uses</li> </ul> signed stores equivalent i8 -(27) to 27 - 1 -128 to 127 i16 i32 i64 i128 isize"},{"location":"programming-languages/rust/datatypes/#unsigned-integer-types","title":"unsigned integer types","text":"<ul> <li>unsigned means that the variable will only ever be positive and can be represented without a sign</li> <li>unsigned variants of integers can store numbers from -(27) to 27 - 1</li> <li>n is the number of bits that variant uses</li> </ul> unsigned stores equivalent u8 0 to 28 - 1 0 to 255 u16 u32 u64 u128 usize"},{"location":"programming-languages/rust/datatypes/#integer-number-literals","title":"integer / number literals","text":"<ul> <li>integer literals can be written in any of the forms shown in the below table</li> <li>number literals that can be multiple numeric types allow a type suffix to designate the type</li> <li>an example type suffix is 57u8 </li> <li>number literals can also use _ as a visual separator to make the number easier to read</li> <li>an example using a visual seperator is 1_000, which is the same as 1000</li> </ul> number literal example decimal 98_222 hex 0xff octal 0o77 binary 0b1111_0000 byte ( u8 only ) b'A'"},{"location":"programming-languages/rust/datatypes/#integer-overflow","title":"integer overflow","text":"<ul> <li>integer overflow occurs when assigning a variable an integer that is too large for its datatype</li> <li>assigning 256 to a type of u8 would cause integer overflow</li> <li>Rust includes checks for integer overflow errors when compiling in debug mode</li> <li>when compiling in release mode with the --release flag, Rust does not include checks for integer overflow</li> <li>if overflow occurs when compiling in release mode Rust performs two\u2019s complement wrapping</li> <li>in the case of a u8, the value 256 becomes 0, the value 257 becomes 1, and so on </li> <li>with two\u2019s complement wrapping the program won\u2019t panic but the variable will have a value that probably isn\u2019t expected</li> </ul>"},{"location":"programming-languages/rust/datatypes/#integer-overflow-error-handling","title":"integer overflow error handling","text":"<p>method families the standard library provides</p> <ul> <li>wrap in all modes with the wrapping_* methods</li> <li>return the None value if there is overflow with the checked_* methods</li> <li>return the value and a boolean indicating whether there was overflow with the overflowing_* methods</li> <li>saturate at the value\u2019s minimum or maximum values with saturating_* methods</li> </ul>"},{"location":"programming-languages/rust/datatypes/#floating-point-types","title":"floating-point types","text":"<p>numbers with decimal points</p> <ul> <li>Rust floating-point types are f32 and f64</li> <li>f32 and f64 are 32 bits and 64 bits in size</li> <li>default is f64 which is roughly same speed as f32 in modern computers </li> <li>f64 is capable of more precision</li> <li>floating-point numbers are represented according to the IEEE-754 standard</li> <li>f32 type is a single-precision float</li> <li>f64 has double precision</li> </ul> <pre><code>fn main() {\nlet x = 2.0; // f64\n\nlet y: f32 = 3.0; // f32\n}\n</code></pre>"},{"location":"programming-languages/rust/datatypes/#numeric-operations","title":"numeric operations","text":"<ul> <li>Rust supports basic math operations for all number types</li> <li>math operations include addition, subtraction, multiplication, division, and remainder</li> <li>integer division rounds down to the nearest integer</li> <li>code below shows how to use each numeric operation in a let statement</li> <li>each expression in these statements uses a math operator and evaluates to a single value which is then bound to a variable</li> </ul> <pre><code>fn main() {\n// addition\nlet sum = 5 + 10;\n\n// subtraction\nlet difference = 95.5 - 4.3;\n\n// multiplication\nlet product = 4 * 30;\n\n// division\nlet quotient = 56.7 / 32.2;\nlet floored = 2 / 3; // Results in 0\n\n// remainder\nlet remainder = 43 % 5;\n}\n</code></pre>"},{"location":"programming-languages/rust/datatypes/#boolean-type","title":"Boolean type","text":"<ul> <li>a Boolean type in Rust has two possible values: true and false</li> <li>Booleans are one byte in size</li> <li>Boolean type in Rust is specified using bool</li> <li>main way to use Boolean values is through conditionals</li> </ul> <pre><code>fn main() {\nlet t = true;\n\nlet f: bool = false; // with explicit type annotation\n}\n</code></pre>"},{"location":"programming-languages/rust/datatypes/#char-character-type","title":"char / character type","text":"<ul> <li>Rust\u2019s char type is the language\u2019s most primitive alphabetic type</li> <li>char literals are specified with single quotes</li> <li>char type is four bytes in size</li> <li>represents a Unicode Scalar Value ( can represent much more than ASCII )</li> <li>Unicode Scalar Values range from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive</li> <li>valid char values include -<ul> <li>Emoji</li> <li>Accented letters</li> <li>Chinese characters</li> <li>Japanese characters</li> <li>Korean characters</li> <li>zero-width spaces</li> <li>Emoji</li> </ul> </li> </ul> <pre><code>fn main() {\nlet z = 'z';\nlet Z = '\u2124';\nlet heart_eyed_cat = '\ud83d\ude3b';\n}\n</code></pre>"},{"location":"programming-languages/rust/datatypes/#compound-types","title":"compound types","text":"<ul> <li>compound types can group multiple values into one type</li> <li>Rust has two primitive compound types ( tuples and arrays )</li> </ul>"},{"location":"programming-languages/rust/datatypes/#tuple-type","title":"tuple type","text":"<ul> <li>a tuple is a general way of grouping together a number values with a variety of types into 1 compound type</li> <li>tuples have a fixed length </li> <li>once a tuple is declared it cannot grow or shrink in size</li> <li>each position in a tuple has a type</li> <li>the types of each position in a tuple do not have to be the same </li> <li>pattern matching can be used to destructure a tuple value, like below code </li> <li>to access a tuple element directly use TUPLE-NAME.INDEX-OF-ELEMENT </li> </ul> <pre><code>fn main() {\nlet example_tuple: (i32, f64, u8) = (500, 6.4, 1);\n\nlet (x, y, z) = example_tuple;\n\nprintln!(\"The value of x is: {}\", y);\nprintln!(\"The value of y is: {}\", y);\nprintln!(\"The value of z is: {}\", z);\n\nlet five_hundred = example_tuple.0; // \u2192 500\n\nlet six_point_four = example_tuple.1; // \u2192 6.4\n\nlet one = example_tuple.2; // \u2192 1\n}\n// example_tuple binds to the entire tuple\n// a tuple is considered a single compound element\n</code></pre> <ul> <li>a tuple without any values is ()</li> <li>a tuple without any values is a special type</li> <li>() is called a unit type and the value is called a unit value</li> <li>expressions implicitly return the unit value if they do not return any other value</li> </ul>"},{"location":"programming-languages/rust/datatypes/#array-type","title":"array type","text":"<p>Rust arrays are different from the typical programming language array</p> <ul> <li>an array is one of Rust's ways to have a collection of multiple values</li> <li>every element in an array must have the same type ( unlike tuples )</li> <li>arrays in Rust must have a fixed length ( like tuples )</li> <li>an array is denoted with square brackets containing comma seperated values</li> <li>useful if data is to be allocated on the stack rather than the heap</li> <li>useful to ensure always having a fixed number of elements ( like for zipcodes )</li> <li>array type is not as flexible as vector type</li> <li>vector is a similiar type that is allowed to grow or shrink</li> <li>if unsure whether to use an array or vector, a vector should probably be used </li> <li>array is probably better than vector for letting a program know the months in a year ( amount of months unlikely to change )</li> </ul> <pre><code>fn main() {\nlet example_array = [1, 2, 3, 4, 5];\n\nlet months_array = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n\"August\", \"September\", \"October\", \"November\", \"December\"];\n\n\n// an array with elements that all\nlet shorthand_array = [3; 5];\n\n// same as above\nlet longhand_array = [3, 3, 3, 3, 3];\n\n// same as above\nlet explicitly_annotated_array: [i32; 5] = [3, 3, 3, 3, 3];\n}\n</code></pre> <ul> <li>an array is a single chunk of memory of a known and fixed size that can be allocated on the stack</li> <li>access elements of an array using indexing</li> </ul> <pre><code>fn main() {\nlet this_array = [1, 2, 3, 4, 5];\n\nlet first_element = this_array[0]; // \u2192 1\nlet second_element =this_array[1]; // \u2192 2\n}\n</code></pre> <ul> <li>example of trying to access a non-existent array element </li> </ul> <pre><code>use std::io;\n\nfn main() {\nlet a = [1, 2, 3, 4, 5];\n\nprintln!(\"Please enter an array index.\");\n\nlet mut index = String::new();\n\nio::stdin()\n.read_line(&amp;mut index)\n.expect(\"Failed to read line\");\n\nlet index: usize = index\n.trim()\n.parse()\n.expect(\"Index entered was not a number\");\n\nlet element = a[index];\n\nprintln!(\n\"The value of the element at index {} is: {}\",\nindex, element\n);\n}\n\n// if user inputs anything above 4 ( because array only has index 0 to 4 )\n\n// \u2192 program panics and does not execute the final println!\n</code></pre> <ul> <li>the above error check happens at runtime because Rust has to get the user input to check against the code</li> <li>this is an example of Rust's memory safety principals</li> <li>in many low-level languages this kind of check is not done and invalid memory can be accessed</li> <li>Rust protects against this kind of error by immediately exiting instead of allowing the memory access and continuing</li> </ul>"},{"location":"programming-languages/rust/mini-projects/","title":"Mini Projects","text":""},{"location":"programming-languages/rust/mini-projects/#guessing-game","title":"guessing game","text":"<pre><code>use rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\nprintln!(\"Guess the number!\");\n\nlet secret_num = rand::thread_rng().gen_range(1..101);\n\nloop {\nprintln!(\"Please input your guess.\");\n\nlet mut guess = String::new();\n\nio::stdin()\n.read_line(&amp;mut guess)\n.expect(\"Failed to read line\");\n\nlet guess: u32 = match guess.trim().parse() {\nOk(num) =&gt; num,\nErr(_) =&gt; continue,\n};\n\nprintln!(\"You guessed: {}\", guess);\n\nmatch guess.cmp(&amp;secret_num) {\nOrdering::Less =&gt; println!(\"Too small! Guess again\"),\nOrdering::Greater =&gt; println!(\"Too big! Guess again\"),\nOrdering::Equal =&gt; {\nprintln!(\"You win!\");\nbreak;\n}\n}\n}\n}\n</code></pre>"},{"location":"programming-languages/rust/ownership/","title":"Ownership","text":"<p>Rust's most unique feature</p>"},{"location":"programming-languages/rust/ownership/#overview","title":"overview","text":"<ul> <li>all program's have to manage the way they use a computer's memory while running</li> <li>some languages have garbage collection that constantly looks for no longer used memory as the program runs( this slows the program down )</li> <li>in some languages the programmer must explicitely allocate and free the memory when they write the program</li> <li>Rust has a unique approach to garbage collection / memory management</li> <li>memory is managed through a system of ownership with a set of rules that the compiler checks at compile time</li> <li> <p>Rust ownership features do not slow down your program while it is running</p> </li> <li> <p>ownership - </p> <ul> <li>keeps track of what parts of code are using what data on the heap </li> <li>minimizes the amount of duplicate data on the heap </li> <li>cleans up unused data on the heap so the program does not run out of space </li> </ul> </li> </ul>"},{"location":"programming-languages/rust/ownership/#the-stack-and-heap","title":"the stack and heap","text":"<ul> <li>the stack and heap are structured in different ways</li> <li>the stack and heap are parts of memory that are available for code to use at runtime</li> <li>all data stored on the stack must have a known and fixed size</li> <li>data with an unknown size at compile time must be stored on the heap instead (or a size that might change)</li> <li>the heap is for memory allocation (like a location to allow memory)</li> <li>pushing values to the stack is not considered allocating</li> <li>a stack is like going to the restaurant knowing the group is exactly two people</li> <li>a heap is like going to the restaurant only knowing it will be 5-10 people</li> <li>the couple is going to be seated much quicker and find a spot easily</li> <li>the biggger group is going to take time finding a spot</li> <li>the restaurant also sits small groups right up front in couples booths</li> <li>the restaurant sits big groups in the back rooms allocated to the party tables </li> <li>when code calls a function the values passed into the function and the functions local variables get pushed to the stack </li> </ul>"},{"location":"programming-languages/rust/ownership/#stack","title":"stack","text":"<ul> <li>the stack stores values in the order it gets them and removes the values the opposite way ( first in last out )</li> <li>a stack can be pictures like stacking plates  </li> <li>adding data is called pushing onto the stack</li> <li>removing data is called popping off the stack</li> <li>pushing to the stack is faster than allocating on the heap because the allocator never has to search for a space to save for the new data </li> </ul>"},{"location":"programming-languages/rust/ownership/#heap","title":"heap","text":"<ul> <li>the heap is less organized </li> <li>when putting data on the heap, a certain amount of space is requested</li> <li>the memory allocator finds an empty spot in the heap that is big enough and marks it as being used </li> <li>after the allocator finds an empty spot which is big enough it returns a pointer</li> <li>a pointer is the address in memory for the location of the data</li> <li>the heap memory allocation process is called allocating on the heap (or just allocating)</li> <li>because the pointer to the data is a known and fixed size it can be be stored on the stack </li> <li>to get the actual data the pointer must be followed to the datas location</li> </ul>"},{"location":"programming-languages/rust/ownership/#ownership-rules","title":"ownership rules","text":"<ul> <li>each value </li> </ul>"},{"location":"programming-languages/sql/","title":"Structured Query Language","text":""},{"location":"programming-languages/sql/#command-examples","title":"command examples","text":""},{"location":"programming-languages/sql/#create-a-table","title":"create a table","text":"<pre><code>CREATE TABLE authors (\nname varchar(255) not null,\n)\n</code></pre>"},{"location":"resources/learning-software/","title":"Learning Tips","text":""},{"location":"resources/learning-software/#general","title":"General","text":"<ul> <li>take organized breaks </li> <li>learn the fundamentals</li> <li>learn to think like a programmer</li> <li>pick ONE learning resource that is high quality and requires you to engage with the material</li> <li>train / exercise your mind just like your body</li> <li>manage your energy levels effectively</li> <li>always practice good sleep hygiene</li> <li>exercise every day for better blood and oxygen flow to optimize brain performance</li> </ul>"},{"location":"resources/learning-software/#andy-sterkowitz","title":"Andy Sterkowitz","text":"<ul> <li>take regular breaks</li> <li>there is actively thinking about something and then there is diffused thinking, where your mind thinks about things and processes them in the background</li> <li>you can actually problem-solve and be more creative when you are not actively thinking about something</li> <li>the 10,000-hour rule only works with targeted practice </li> <li>when learning, have a clear, defined goal (deliberate practice)</li> <li>state you goal when starting a study session </li> <li>\"working on my problem-solving skills\" is an okay goal but try to be more specific </li> <li>\"I am going to get better at really understanding what the problem is asking\" is a better and more specific goal</li> <li>100% focus, watching YouTube, a podcast, or trying to work on 2 things at once is bad focus</li> <li>go outside your comfort zone, work on things you're bad at</li> <li>identify a weakness, and attack it head on, practice it every day</li> <li>create a note with your weakness</li> <li>run through practice questions that target your weakness repeatedly</li> <li>head first JavaScript book is a good example of a good place to start</li> <li>building small projects is better to start with than 1 big too complex project</li> <li>tetris is an example of a too-big project, a to-do list and pomodoro timer are examples of better starting projects</li> <li>building many small projects helps you to understand all the complexity, context, and moving parts of large projects better</li> <li>learn the syntax of the specific language</li> </ul>"},{"location":"resources/learning-software/#career","title":"Career","text":"<ul> <li>practice interviewing</li> <li>practice Leetcoding and HackerRank Problems 2 hours a day</li> </ul>"},{"location":"resources/resources/","title":"Learning Resources","text":""},{"location":"resources/resources/#documentation","title":"documentation","text":""},{"location":"resources/resources/#mdn-web-docs","title":"MDN Web Docs","text":"<ul> <li>free</li> <li>for HTML5, CSS3, and JavaScript documentation </li> </ul>"},{"location":"resources/resources/#websites","title":"websites","text":""},{"location":"resources/resources/#problem-solving-with-algorithms-and-data-structures-using-python","title":"Problem Solving with Algorithms and Data Structures using Python","text":"<ul> <li>free </li> <li>for learning more advanced topics</li> </ul>"},{"location":"resources/resources/#automate-the-boring-stuff","title":"Automate The Boring Stuff","text":"<ul> <li>free</li> <li>for learning programming fundamentals functionally and efficiently</li> </ul>"},{"location":"resources/resources/#mdn-web-docs_1","title":"MDN Web Docs","text":"<ul> <li>free </li> <li>also has tutorials for HTML5, CSS3, and JavaScript</li> </ul>"},{"location":"resources/resources/#codecademy","title":"CodeCademy","text":"<ul> <li>free</li> <li>for learning programming fundamentals, different language syntax, and building muscle memory</li> </ul>"},{"location":"resources/resources/#youtube-channels","title":"YouTube channels","text":""},{"location":"resources/resources/#tech-with-tim","title":"[Tech With Tim]","text":""},{"location":"resources/resources/#caleb-curry","title":"[Caleb Curry]","text":""},{"location":"resources/resources/#chris-titus-tech-for-getting-started-with-linux","title":"Chris Titus Tech for getting started with Linux","text":""},{"location":"software/docker-compose/","title":"docker-compose","text":""},{"location":"software/docker-compose/#yaml","title":"YAML","text":"<p>YAML ain't markup language </p> <ul> <li>nesting of objects in a YAML is determined by white-space / indentation</li> </ul>"},{"location":"software/docker-compose/#yaml-data-types","title":"YAML data types","text":"<ul> <li>Scalars (strings and numbers)</li> <li>Sequences (arrays and lists)</li> <li>Mappings (hashes and dictionaries)</li> </ul>"},{"location":"software/docker-compose/#commands","title":"commands","text":""},{"location":"software/docker-compose/#docker-compose-up-d","title":"docker-compose up -d","text":"<ul> <li>creates containers from docker-compose.yml file</li> </ul>"},{"location":"software/docker-compose/#docker-compose-main-keys","title":"docker-compose main keys","text":""},{"location":"software/docker-compose/#version","title":"version","text":"<ul> <li>specifies what version of docker-compose is being used</li> </ul>"},{"location":"software/docker-compose/#services","title":"services","text":"<ul> <li>different containers for different parts of the app are placed under services, examples: <ul> <li>database</li> <li>web server </li> <li>API</li> <li>API client</li> </ul> </li> </ul>"},{"location":"software/docker-compose/#image","title":"image","text":"<ul> <li>specifies the image for the service / container to use, examples:<ul> <li>mysql:5.7</li> <li>apache </li> <li>php </li> <li>node</li> <li>python3.9</li> </ul> </li> </ul>"},{"location":"software/docker-compose/#volumes","title":"volumes","text":"<ul> <li>examples: <ul> <li>wordpress_files:/var/www/html</li> <li>db_data:/var/lib/mysql</li> </ul> </li> </ul>"},{"location":"software/docker-compose/#restart","title":"restart","text":"<ul> <li>restart: always ensures you don't have to worry about the container being shutdown</li> </ul>"},{"location":"software/docker-compose/#environment","title":"environment","text":"<ul> <li>specifies environment variables for the service / container, examples: <ul> <li>MYSQL_ROOT_PASSWORD: word@press</li> <li>MYSQL_DATABASE: wordpress </li> <li>MYSQL_USER: wordpress</li> <li>MYSQL_PASSWORD: abc@123</li> </ul> </li> </ul>"},{"location":"software/docker-compose/#depends_on","title":"depends_on","text":"<ul> <li>specifies that this service / container depends on another container which needs to be created first</li> <li>is the name of another service in the file</li> <li>example: wordpress would depend on the database service</li> </ul>"},{"location":"software/docker-compose/#container_name","title":"container_name","text":"<ul> <li>name of the container, otherwise one will be randomly generated</li> </ul>"},{"location":"software/docker-compose/#ports","title":"ports","text":"<ul> <li>specifies which port our host machine should use to access which port in the container</li> <li>example: '8000:80' would mean going to our http://localhost:8000 would access the containers http://localhost</li> </ul>"},{"location":"software/docker-compose/#volumes_1","title":"volumes","text":"<ul> <li>volumes is where we need to declare any user defined volumes in our services, examples: <ul> <li>wordpress_files:</li> <li>db_data:</li> </ul> </li> </ul>"},{"location":"software/docker-compose/#networks","title":"networks","text":"<ul> <li>networks is where we need to declare any user defined networks in our services</li> </ul>"},{"location":"software/docker/","title":"Learning Docker","text":""},{"location":"software/docker/#overview","title":"overview","text":""},{"location":"software/docker/#what-docker-does","title":"what Docker does","text":"<ul> <li>Docker carves up a running Linux system into small containers, each of which is it's own sealed little world</li> <li>these containers have all their own programs everything, all isolated from anything else</li> <li>these containers are designed to be portable so that they can be shipped from one place to another</li> <li>Docker does the work of getting these containers to and from different computer systems</li> <li>Docker also builds these containers for you</li> <li>Docker is also a social platform to help you find and share containers with others who may have already built very similar work that you can build on top of </li> <li>Docker is not virtual machines, there is only a single operating system running</li> <li>that operating system is just carved up into isolated little spaces </li> </ul>"},{"location":"software/docker/#what-is-a-container","title":"what is a container?","text":"<ul> <li>a container is a self contained sealed unit of software</li> <li>it has everything in it that is needed to run that code</li> <li>batteries included operating system</li> <li>a container includes: <ul> <li>all of the code </li> <li>configurations</li> <li>processes</li> <li>has all of the networking to allow these containers to talk to other containers they are supposed to be able to talk to and nothing else</li> <li>all the dependencies the system needs are bundled up in the container</li> <li>it even includes just enough of the operating system to run your code </li> </ul> </li> </ul>"},{"location":"software/docker/#how-it-works","title":"how it works","text":"<ul> <li>it takes all the services that make up a Linux server:<ul> <li>networking </li> <li>storage</li> <li>code </li> <li>interprocess communication </li> <li>the whole works </li> </ul> </li> </ul> <p>and it makes a copy of that in the Linux Kernel for each container, so each container has its own little world, that it cannot see out of and other containers cannot see in</p> <ul> <li>you might have one container on a system running Red Hat Linux, serving a database </li> <li>that database is being served through a virtual network to another container running Ubuntu Linux, running a webserver that talks to that database</li> <li>and that webserver might also be talking to a caching server that runs in a SUSE Linux based container</li> <li>the important part to understand is it doesn't matter which Linux the container is running on, as long as it is linux</li> <li>Docker is the program that manages all of this, sets it up, monitors it, and tears it down when it is no longer needed </li> </ul>"},{"location":"software/docker/#about-docker","title":"about docker","text":"<ul> <li>docker is a client program to docker</li> <li>docker is a command you type at the terminal </li> <li>docker is also a server program that listens to messages from the docker command and manages a running Linux system</li> <li>docker builds containers from code, it takes your code along with its dependencies, bundles it up and seals it into a container</li> <li>docker is  service that distributes container across the internet so that you can find others work and the righjt people can find your work </li> <li>docker is also a company that makes containers</li> </ul>"},{"location":"software/docker/#installing-docker","title":"installing Docker","text":""},{"location":"software/docker/#setting-up-docker","title":"setting up Docker","text":"<ul> <li>dockers primary job is to manage a Linux server, and start and stop your containers as required</li> </ul>"},{"location":"software/docker/#docker-desktop","title":"docker desktop","text":"<ul> <li>not available for Linux yet</li> </ul>"},{"location":"software/docker/#install-docker-on-linux","title":"install docker on Linux","text":"<pre><code>sudo apt-get remove docker docker-engine docker.io containerd runc\n\nsudo apt-get update\n\nsudo apt-get install ca-certificates curl gnupg lsb-release\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\nsudo apt-get update\n\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n\nsudo groupadd docker\n\nsudo usermod -aG docker $USER\n</code></pre>"},{"location":"software/docker/#script-install","title":"script install","text":"<pre><code>sh ./get-docker.sh\n########## BEGIN ##########\nsudo sh -eux &lt;&lt;EOF\n# Install newuidmap &amp; newgidmap binaries\n\napt-get install -y uidmap\nEOF\n\n########## END ##########\ndockerd-rootless-setuptool.sh install\ndocker run hello-world\n\n# add to shell .rc file\nexport PATH=/usr/bin:$PATH\nexport DOCKER_HOST=unix:///run/user/1000/docker.sock\n</code></pre>"},{"location":"software/docker/#using-docker","title":"using Docker","text":""},{"location":"software/docker/#the-docker-flow-images-to-containers","title":"the Docker flow: images to containers","text":"<ul> <li> <p>the docker flow is a fundamental concept, it all begins with an image </p> </li> <li> <p>IMAGE =&gt; RUNNING-CONTAINER</p> </li> <li> <p>an image is all the files that make up just enough of the operating system to do what you need to do </p> </li> <li> <p>traditionally you would install an entire operating system with everything with each application you do </p> </li> <li> <p>with Docker you pair it way down so that you have a little container with just enough of the operating system to do what you need to do </p> </li> <li> <p>you can have lots of Docker containers run efficiently on a computer</p> </li> <li> <p>the command to look at your docker images: </p> </li> </ul> <pre><code># test docker\n\ndocker run hello-world\n\ndocker images # show local docker images\n\nREPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nhello-world   latest    feb5d9fea6a5   3 months ago   13.3kB\n\n- the docker run command takes an image and turns into a living, running container\n\n- run with Ubuntu bash shell with terminal capabilities: \n\ndocker run -ti ubuntu:latest bash # terminal interactive\n\ncat /etc/lsb-release # check Ubuntu release \n\nexit  # exit image\n\ndocker run -ti ubuntu:latest bash # run again \n\ndocker ps # look at running images\n\nCONTAINER ID   IMAGE           COMMAND   CREATED         STATUS         PORTS     NAMES\nee62b9db8204   ubuntu:latest   \"bash\"    4 minutes ago   Up 4 minutes             interesting_proskuriakova\n\n# docker creates name for you if not specified\n</code></pre> <ul> <li>when you are inside a container you start from an image, and that image is fixed, it does not change</li> <li>when making a container from an image, you do not change the image</li> <li>when you make changes to your container, it does not effect future containers from that same image </li> <li>if you make a change to your current container, exit and then rerun docker for that image, the change will not be there</li> <li>this is the whole point of images, they are fixed points and you can always start from that point</li> </ul>"},{"location":"software/docker/#the-docker-flow-containers-to-images","title":"the Docker flow: containers to images","text":"<ul> <li>when you make changes inside of a container, you can save those changes, but the changes will not save to the original image</li> <li>the next step in the docker flow is IMAGE =&gt; RUNNING-CONTAINER =&gt; STOPPED-CONTAINER</li> <li>when you exit a container it still exists</li> </ul> <pre><code>docker ps -a # shows all previously ran containers\n\ndocker ps -l # shows last ran container \n\n# creates new image from container, use ps -l to grab id from previous container\n\n### outputbegin ###\nCONTAINER ID   IMAGE           COMMAND   CREATED          STATUS                     PORTS     NAMES\nee62b9db8204   ubuntu:latest   \"bash\"    17 minutes ago   Exited (0) 5 seconds ago             interesting_proskuriakova\n\ndocker commit ee62b9db8204\n\nsha256:b1fe5c29b61e3f5bef568c59ad24775d22a90f2a376beecc62bbd94dddc20c40\n### outputend ###\n\ndocker tag b1fe5c29b61e3f5bef568c59ad24775d22a90f2a376beecc62bbd94dddc20c40 my-new-image\n\ndocker commit interesting_proskuriakova another-image\n</code></pre> <ul> <li> <p>the next step in the docker flow is IMAGE =&gt; RUNNING-CONTAINER =&gt; STOPPED-CONTAINER =&gt; NEW-IMAGE</p> </li> <li> <p>docker commit creates an image from a container</p> </li> </ul>"},{"location":"software/docker/#run-processes-in-containers","title":"run processes in containers","text":"<ul> <li> <p>docker run starts a container by giving an image name and a process to run in that container</p> </li> <li> <p>containers have a main process </p> </li> <li> <p>the container stops when that process stops </p> </li> <li> <p>if you run other processes inside of that container, all the container still shuts everything of when that main process exits</p> </li> <li> <p>containers can have names, a name is automatically given by docker if you do not create one </p> </li> </ul> <pre><code>docker run --rm -ti ubuntu sleep 5 # deletes container after running it, running the sleep command for 5 seconds, and then automatically exiting\n\ndocker run --rm -ti ubuntu bash -c \"sleep 5; echo slept 5; echo exiting and deleting container now\"\n\ndocker run -d -ti ubuntu bash # -d for detached, keeps it running in the background\n\ndocker attach $container-name # reattaches to container, simniliar to GNU screen\n\n# also detach from a container with ctrl p ctrl q\n\ndocker ps \n\ndocker attach $CONTAINER-NAME\n</code></pre> <ul> <li> <p><code>docker run --rm --ti</code> =  is for just running a container once and deleting when it exits</p> </li> <li> <p><code>docker exec -ti NAMES /bin/sh</code> = accesses container of NAMES</p> </li> </ul>"},{"location":"software/docker/#manage-containers","title":"manage containers","text":"<ul> <li> <p><code>docker logs $container_name</code></p> <ul> <li>docker keeps the output of the container available as long as the container is around</li> <li>do not let the output of containers get too large</li> </ul> </li> <li> <p><code>docker kill $container-name</code> = stops container</p> </li> <li> <p><code>docker rm $container-name</code> = completely disposes of container</p> </li> <li> <p>resource constraints: </p> <ul> <li> <p>memory limits = <code>docker run --memory maximum-allowed-memory $image-name $command</code></p> </li> <li> <p>CPU limits = <code>docker run --cpu-shares $relative-percentage-to-other-containers?</code></p> </li> <li>CPU limits = <code>docker run --cpu-quota $general-non-relative-limit?</code></li> </ul> </li> <li> <p>orchestration:</p> <ul> <li>generally requires resource limiting</li> </ul> </li> <li> <p>lessons: </p> <ul> <li>do not let your containers fetch dependencies when they start or if a repo is missing or some other error, all of your containers will stop</li> <li>do not leave important things in unnamed stopped containers</li> </ul> </li> </ul>"},{"location":"software/docker/#exposing-ports","title":"exposing ports","text":"<ul> <li>wide variety of networking options to connect containers together and to connect containers the internet</li> <li>programs in containers are isolated from the internet by default </li> <li>you can group your containers into \"private\" networks</li> <li>you can explicitly choose who can connect to whom</li> <li>expose ports to let connections in </li> <li>private networks to connect between containers</li> <li> <p>to expose a specific port, you specify the internal port that the program is listening on and what port it should be listening to on the outside, as well as what protocol to use, and there are many more options</p> </li> <li> <p><code>docker run --rm -ti -p 45678:45678 -p 45679:45679 --name echo-server ubuntu:14.04 bash</code> </p> <ul> <li>establishes to different in and out ports, each port will have the same in and out number to keep things easier</li> <li><code>nc -lp 45678 | nc -lp 45679</code> = netcat listen port 45678 and pipe that back out to 45679</li> </ul> </li> <li> <p><code>nc localhost 45678</code> = now any stdin will be sent to the above docker container</p> </li> <li> <p><code>nc localhost 45679</code> = now any stdin from above command will piped out into this terminal process</p> </li> <li> <p>exposing ports dynamically:</p> <ul> <li>the port inside the container is fixed</li> <li>the port on the host is chosen from the unused ports </li> <li>this allows many containers running programs with fixed ports </li> <li>this often is used with a service discovery program or orchestration service such as Kubernetes</li> </ul> </li> <li> <p><code>docker run --rm -ti -p 45678 -p 45679 --name echo-server ubuntu:14.04 bash</code> </p> <ul> <li>automatically chooses the host ports based on what is available</li> <li><code>docker port echo-server</code> = finds what ports the docker container is listening on </li> </ul> </li> <li> <p>exposing UDP ports:</p> <ul> <li><code>docker run -p $outside-port:$inside-port/$protocol</code> (tcp/udp)</li> <li><code>docker run -p 1234:1234 udp</code></li> </ul> </li> </ul>"},{"location":"software/docker/#container-networking","title":"container networking","text":"<ul> <li> <p>connecting between containers:</p> <ul> <li>when we expose a container's port in Docker it creates a network path from, essentially the outside of that machine down through the networking layers and into that container</li> <li>other containers can connect to it by going out to the host, turning around, and coming back in along that path, it is useful but their are more efficient ways to go about it </li> </ul> </li> <li> <p>Docker offers an extensive set of networking options for really controlling exactly how your containers connect to each other and making sure that it is secure and just the way you want it </p> </li> </ul>"},{"location":"software/docker/#images","title":"images","text":"<ul> <li>docker image shows availabla images on machine</li> <li>tagging gives images names</li> <li><code>docker commit</code> tags images for you </li> <li><code>docker commit $container-id $my-image-name</code></li> <li>example name structure = <code>registry.example.com:port/organization/image-name:versio-tag</code>, you can leave out the parts you don't need</li> <li>usually organization/name is enough for tagging your images</li> <li> <p>images come from <code>docker pull</code> which is automatically done for you by <code>docker run</code></p> <ul> <li>available as a separate command if you need to do offline work and you wanna pull some images in advance</li> <li><code>docker push</code> is the opposite of <code>docker push</code></li> </ul> </li> <li> <p>cleaning up</p> <ul> <li>images can build up very quickly</li> <li><code>docker rmi $image-name:tag</code> </li> <li><code>docker rmi $image-name</code> </li> </ul> </li> </ul>"},{"location":"software/docker/#volumes","title":"volumes","text":"<ul> <li>sort of like shared folders</li> <li>virtual \"disks\" to store and share data</li> <li>virtual disks that you can store data in and share them between the containers and between containers and the host machine, or both</li> <li> <p>2 main varieties of volume / virtual disks:   </p> <ul> <li>persistent </li> <li>ephemeral, these exist as long as the container is using them, but when no container is using them, but when no container is using them, they evaporate, not permanent</li> </ul> </li> <li> <p>not part of images, not included when you download an image or upload an image, your local data, local to the host machine </p> </li> <li> <p>sharing data with the host:</p> <ul> <li>\"shared folders\" on the host</li> <li>sharing a \"single file\" into a container, make sure the file exists locally before hand or docker will assume it is a folder</li> <li>similar to shared folders in things like virtual box</li> </ul> </li> <li> <p>when creating data inside of the container, it will share data with the host</p> </li> </ul> <pre><code>docker run -ti -v /home/justin/Desktop:/shared-folder ubuntu bash </code></pre> <ul> <li>sharing between containers:<ul> <li>volume-from</li> <li>shared disks that exist only as long as they are being used</li> <li>can between containers</li> <li><code>docker run -ti --volumes-from $image-name ubuntu bash</code></li> </ul> </li> </ul>"},{"location":"software/docker/#docker-compose","title":"docker-compose","text":""},{"location":"software/docker/#yaml","title":"YAML","text":"<p>YAML ain't markup language </p> <ul> <li>nesting of objects in a YAML is determined by whitespace / indentation</li> </ul>"},{"location":"software/docker/#yaml-datatypes","title":"YAML datatypes","text":"<ul> <li>Scalars (strings and numbers)</li> <li>Sequences (arrays and lists)</li> <li>Mappings (hashes and dictionaries)</li> </ul>"},{"location":"software/docker/#docker-compose-main-keys","title":"docker-compose main keys","text":""},{"location":"software/docker/#version","title":"version","text":"<ul> <li>specifies what version of docker-compose is being used</li> </ul>"},{"location":"software/docker/#services","title":"services","text":"<ul> <li>different containers are placed under services (may have one for db, frontend, backend, and webserver, for example)</li> </ul>"},{"location":"software/eslint-prettier/","title":"VSCode - ESLint, Prettier &amp; Airbnb Setup","text":""},{"location":"software/eslint-prettier/#1-install-eslint-prettier-extensions-for-vscode","title":"1. Install ESLint &amp; Prettier extensions for VSCode","text":"<p>Optional - Set format on save and any global prettier options</p>"},{"location":"software/eslint-prettier/#2-install-packages","title":"2. Install Packages","text":"<pre><code>npm i -D eslint prettier eslint-plugin-prettier eslint-config-prettier eslint-plugin-node eslint-config-node\n</code></pre> <pre><code>npx install-peerdeps --dev eslint-config-airbnb\nnpx install-peerdeps --dev eslint-plugin-react\n</code></pre>"},{"location":"software/eslint-prettier/#3-create-prettierrc-for-any-prettier-rules-semicolons-quotes-etc","title":"3. Create .prettierrc for any prettier rules (semicolons, quotes, etc)","text":""},{"location":"software/eslint-prettier/#4-create-eslintrcjson-file-you-can-generate-with-eslint-init-if-you-install-eslint-globally","title":"4. Create .eslintrc.json file (You can generate with eslint --init if you install eslint globally)","text":"<pre><code>{\n  \"extends\": [\"airbnb\", \"prettier\", \"plugin:node/recommended\"],\n  \"plugins\": [\"prettier\"],\n  \"rules\": {\n    \"prettier/prettier\": \"error\",\n    \"no-unused-vars\": \"warn\",\n    \"no-console\": \"off\",\n    \"func-names\": \"off\",\n    \"no-process-exit\": \"off\",\n    \"object-shorthand\": \"off\",\n    \"class-methods-use-this\": \"off\"\n  }\n}\n</code></pre>"},{"location":"software/eslint-prettier/#reference","title":"Reference","text":"<ul> <li>ESLint Rules - https://eslint.org/docs/rules/</li> <li>Prettier Options - https://prettier.io/docs/en/options.html</li> <li>Airbnb Style Guide - https://github.com/airbnb/javascript</li> </ul>"},{"location":"software/git/essentials/","title":"Git Essentials","text":"<ul> <li>Git helps you to manage the code in a project as you develop new features, helps to find and fix problems, and simplifies collaboration with other developers, whether working in an office or remotely </li> </ul>"},{"location":"software/git/essentials/#what-is-git","title":"what is Git?","text":"<ul> <li>software that tracks changes you make to files and directories</li> <li>keeps track of project versions</li> </ul>"},{"location":"software/git/essentials/#version-control","title":"version control","text":"<ul> <li>Git is a VCS (version control system) or SCM (source code management) tool</li> <li>VCS and SCM are often used pretty interchangeably</li> </ul>"},{"location":"software/git/essentials/#history-behind-git","title":"history behind Git","text":"<ul> <li>there are 5 different VCS that predate Git</li> <li> <p>SCCS = Source Code Control System:</p> <ul> <li>1972: closed source, free with Unix</li> <li>stored original version and sets of changes</li> <li>was not the first but first to become popular </li> <li>released in 1972 and was developed by AT&amp;T</li> <li>it was bundled free with the Unix operating system</li> <li>Unix was also free so it spread quickly to places such as universities and SCCS went along with it </li> <li>universities taught their students version control using SCCS so when they left the university to go work in jobs, the VCS they were familiar with and that they took with them was SCCS</li> <li>SCCS saves the original document but then instead of saving the whole document a second time, it just saves a snapshot of what the changes were</li> </ul> </li> <li> <p>SCCS stayed dominant until the early 80's, when RCS was developed </p> </li> <li> <p>RCS = Revision Control System:</p> <ul> <li>1982: open source</li> <li>made lots of improvements over SCCS</li> <li>it was cross platform whereas SCCS was Unix only</li> <li>with the rise of the personal computer it was important to have a version control system that would also work on PCs</li> <li>it was also more intuitive, had a cleaner syntax with fewer commands and more features</li> <li>most importantly it was faster and alot of the speed increase came from the fact that it used a smarter storage strategy than SCCS</li> <li>RCS kept the most recent file in it's whole form and it you wanted to go backwards in time and you wanted previous versions, then you applied the change snapshots to go in reverse</li> <li>this new tracking method was alot faster because most of the time you want to look at the most current document</li> </ul> </li> <li> <p>a problem with RCS and SCCS were they only allowed work on 1 file at a time, which CVS allowed you to do </p> </li> <li> <p>CVS = Concurrent Versions System: </p> <ul> <li>1986 - 1990: open source </li> <li>multiple files, entire project</li> <li>multi-user repositories</li> <li>could put the repo on a remote server and more than 1 user can work on the same file at the same time, they can work concurrently</li> </ul> </li> <li> <p>SVN = Apache Subversion:</p> <ul> <li>2000: open source </li> <li>track text and images</li> <li>tracked file changes collectively </li> <li>watched changes to a directory as a whole</li> <li>actually took snapshots of the directory, not just the files</li> <li>tracked the changes of a directory</li> <li>would change the entire project and all files back to a previous version instead of just a single file at a time</li> </ul> </li> <li> <p>BitKeeper SCM:</p> <ul> <li>2000: closed source, proprietary</li> <li>had a free community version</li> <li>a company owned it and sold it</li> <li>it had distributed version control</li> <li>the free version was used for the source code management of the Linux kernel from 2002 to 2005</li> <li>it was controversial to use a proprietary SCM for an open-source project</li> <li>in 2005 the community version stopped being free</li> </ul> </li> <li> <p>Git:</p> <ul> <li>April 2005 </li> <li>created by Linus Torvalds, written from scratch to replace BitKeeper </li> <li>distributed version control</li> <li>open-source and free software</li> <li>faster than other SCM's (100 times in some cases)</li> <li>better safeguards against data corruption</li> </ul> </li> <li> <p>Git had an explosion in popularity</p> </li> <li>GitHub launched in 2008 to host Git repositories </li> <li>in 2009 there were over 50,000 repositories with 100,000 users</li> <li>in 2011 there were over 2 million repos, over 1 million users</li> <li>2018 GitHub purchased by Microsoft</li> <li>2019 over 57 million repos, over 28 million users</li> </ul>"},{"location":"software/git/essentials/#about-distributed-version-control","title":"about distributed version control","text":"<ul> <li>different users each maintain their own repositories instead of working from a central repo</li> <li>changes are stored as sets or patches </li> <li>focused on tracking changes, not the versions of the documents</li> <li>previous VCS would track the changes to get from version to version of each different file </li> <li>Git focuses on these change sets and capturing those sets as discrete units</li> <li>those change sets can be exchanged between repositories</li> <li>\"merge in change sets\" or \"apply patches\"</li> <li>no single master repository </li> <li>many working copies, each with their own combination of change sets</li> <li>no need to communicate with a central server, faster, no network access required to submit changes</li> <li>no single point of failure</li> <li>encourages participation and forking of projects </li> <li>developers can work independently, make improvements or fix bugs, submit change sets for inclusion or rejection</li> </ul>"},{"location":"software/git/essentials/#git-setup","title":"Git setup","text":""},{"location":"software/git/essentials/#basic-configuration","title":"basic configuration","text":"<ul> <li>3 places Git stores configuration information, depending how widely we want these configurations to apply</li> <li> <p>system level configuration:</p> <ul> <li>/etc/gitconfig</li> <li>these are configs that will apply to every user of this user by default</li> <li>each user can override it with their own custom configurations, but these are the default if they don't</li> </ul> </li> <li> <p>user level config:</p> <ul> <li>~/.gitconfig</li> <li>configs that will apply only to a single user, which is going to be most of us, most of the time, working as a single user on a machine</li> </ul> </li> <li> <p>project level config:</p> <ul> <li>my-project/.git/config </li> <li>we can have configurations that apply only to that project</li> </ul> </li> <li> <p>git provides commands to edit configs easily</p> </li> <li>git config --system </li> <li>git config --global </li> <li> <p>git config (inside of a project directory)</p> </li> <li> <p>git config --global user.name \"first-name last-name\"</p> </li> <li>git config --global user.email \"my-email@example.com\"</li> <li>git config --global core.editor \"vim\"</li> <li> <p>git config --global color.ui true</p> </li> <li> <p>git config --list = lists all possible configurations</p> </li> <li> <p>git config user.name = shows name </p> </li> <li>git config user.email = shows email</li> </ul>"},{"location":"software/git/essentials/#auto-completion","title":"auto-completion","text":"<ul> <li>go to https://github.com/git/git/tree/master/contrib/completion</li> <li>click on git-completion for your shell </li> <li>follow instructions </li> <li>do the same for git-prompt.sh as well</li> </ul>"},{"location":"software/git/essentials/#git-help","title":"Git help","text":"<ul> <li>a useful tool for finding out more information about git</li> <li>git help $SUBJECT-YOU-NEED-HELP-ON</li> <li>gives you a convenient interface to access manual pages</li> </ul>"},{"location":"software/git/essentials/#getting-started","title":"Getting Started","text":""},{"location":"software/git/essentials/#initialize-a-repository","title":"initialize a repository","text":"<pre><code>git init\nInitialized empty Git repository in /home/justin/Projects/avim/.git/\n</code></pre>"},{"location":"software/git/essentials/#where-git-files-are-stored","title":"where git files are stored","text":"<pre><code>ls -l .git\ntotal 112\ndrwxr-xr-x 2 justin justin  4096 Jan 18 15:36 branches\n-rw-r--r-- 1 justin justin   267 Jan 18 15:36 config\n-rw-r--r-- 1 justin justin    73 Jan 18 15:36 description\n-rw-r--r-- 1 justin justin    21 Jan 18 15:36 HEAD\ndrwxr-xr-x 2 justin justin  4096 Jan 18 15:36 hooks\n-rw-r--r-- 1 justin justin 70921 Jan 18 15:36 index\ndrwxr-xr-x 2 justin justin  4096 Jan 18 15:36 info\ndrwxr-xr-x 3 justin justin  4096 Jan 18 15:36 logs\ndrwxr-xr-x 4 justin justin  4096 Jan 18 15:36 objects\n-rw-r--r-- 1 justin justin   112 Jan 18 15:36 packed-refs\ndrwxr-xr-x 5 justin justin  4096 Jan 18 15:36 refs\n</code></pre> <ul> <li>git centralizes everything into this one directory</li> </ul>"},{"location":"software/git/essentials/#committing","title":"committing","text":"<ul> <li>git add . = adds all files to be committed </li> <li> <p>git commit -m \"committing\"</p> </li> <li> <p>make changes </p> </li> <li>add changes </li> <li> <p>commit changes </p> </li> <li> <p>commit messages: </p> <ul> <li>short single-line summary (less than 50 characters)</li> <li>optionally followed by a blank line and a more complete description</li> <li>keep lines in longer descriptions less than 72 characters</li> <li>write commit messages in present tense not past tense</li> <li>\"fix for a bug\" or \"fixes a bug\" not \"fixed a bug\"</li> <li>bullet points are usually asterisk or hyphen </li> <li>can add tracking numbers from bugs or support requests</li> <li>can develop shorthand for organization </li> <li>\"[css,js]\"</li> <li>\"bugfix:\"</li> <li>\"#38405 -\"</li> <li>bad: \"fix typo\", good: \"add missing hyphen in project section of HTML\"</li> </ul> </li> <li> <p>got log = shows project commit history</p> </li> <li>got log -n5 = shows 5 most recent project commit history</li> <li>got log --grep=\"bug fix\" shows commits with bug fix in message</li> <li>got log since=2022-01-010 shows commits since specified date</li> <li>got log until=2022-01-010 shows commits that happened up until specified date</li> <li>got log author=\"first-name\" shows commits by authors with specified name</li> <li>every commit is given a unique id</li> </ul>"},{"location":"software/git/essentials/#git-concepts-and-architecture","title":"Git concepts and architecture","text":""},{"location":"software/git/essentials/#the-three-trees","title":"the three trees","text":"<ul> <li>repository, staging index, working</li> <li>make changes in working add files to staging and then commit to repository</li> <li>git only tracks changes that are committed </li> </ul>"},{"location":"software/git/essentials/#git-workflows","title":"Git workflows","text":"<ul> <li>make changes in working tree, add completed changes to staging tree, commit changes we want finalized</li> </ul>"},{"location":"software/git/essentials/#hash-values-sha-1","title":"hash values (SHA-1)","text":"<ul> <li>Git generates a checksum (the hash value) for each change set </li> <li>checksum algorithms convert data into a simple number, which we call a checksum</li> <li>the same data put into the same mathematical algorithm always returns the same result or the same checksum</li> <li>we call it a checksum because we can check and make sure that it's the same</li> <li>checksum is used to provide data integrity </li> <li>data integrity is fundamental</li> <li>changing data would change checksum </li> <li>Gits data integrity features are not included in all VCS</li> <li>each hash value is not only unique, it is directly tied to the contents that are inside of it </li> <li>Git uses the SHA-1 hash algorithm </li> <li>people refer to this value as being the SHA value (S-H-A)</li> <li>40-character hexadecimal string</li> </ul>"},{"location":"software/git/essentials/#the-head-pointer","title":"the HEAD pointer","text":"<ul> <li>HEAD is a reference variable Git maintains</li> <li>pointer to tip of current branch in repo</li> <li>last state of repo, what was last checked out </li> <li>points to parent of next commit where writing commit takes place</li> <li>the repository has nothing to do with the staging index or working directory, it is a way of tracking the current position in the repo</li> <li> <p>a good metaphor for the HEAD is the playback and record head on a cassette tape recorder </p> <ul> <li>as we start recording audio, the tape moves past the HEAD and it records onto it </li> <li>when the record head is stopped, is the place that it will start recording again if we press record a second time</li> <li>we can move around, move the head to different places, we can fast forward and rewind</li> <li>wherever the head is positioned when we hit record again, that is where it is going to start recording</li> <li>the HEAD pointer in Git is very similar</li> </ul> </li> <li> <p>by default the branch we are working on is the master branch, which is our main branch</p> </li> <li>when you make a new commit, the HEAD points to that commit</li> </ul>"},{"location":"software/git/essentials/#make-changes-to-files","title":"make changes to files","text":""},{"location":"software/git/essentials/#add-files","title":"add files","text":"<ul> <li>shows the status of repo </li> <li>untracked files mean they are not added to the repository and Git knows nothing about them</li> <li><code>git add</code> moves files to staging directory</li> <li><code>git reset HEAD &lt;file&gt;</code> to unstage files</li> </ul> <pre><code>git status\n</code></pre>"},{"location":"software/git/essentials/#edit-files","title":"edit files","text":""},{"location":"software/git/essentials/#view-changes-with-diff","title":"view changes with diff","text":""},{"location":"software/git/essentials/#view-only-stages-changes","title":"view only stages changes","text":""},{"location":"software/git/essentials/#delete-files","title":"delete files","text":""},{"location":"software/git/essentials/#move-and-rename-files","title":"move and rename files","text":""},{"location":"software/git/essentials/#use-git-with-a-real-project","title":"use Git with a real project","text":""},{"location":"software/git/essentials/#the-explore-california-website","title":"the Explore California website","text":""},{"location":"software/git/essentials/#initialize-git","title":"initialize Git","text":""},{"location":"software/git/essentials/#view-file-edits","title":"view file edits","text":""},{"location":"software/git/essentials/#stage-and-commit-shortcut","title":"stage and commit shortcut","text":""},{"location":"software/git/essentials/#view-a-commit","title":"view a commit","text":""},{"location":"software/git/essentials/#compare-commits","title":"compare commits","text":""},{"location":"software/git/essentials/#multiline-commit-messages","title":"multiline commit messages","text":""},{"location":"software/git/essentials/#make-atomic-commits","title":"make atomic commits","text":""},{"location":"software/git/essentials/#undo-changes","title":"undo changes","text":""},{"location":"software/git/essentials/#undo-working-directory-changes","title":"undo working directory changes","text":""},{"location":"software/git/essentials/#unstage-files","title":"unstage files","text":""},{"location":"software/git/essentials/#amend-commits","title":"amend commits","text":""},{"location":"software/git/essentials/#retrieve-old-versions","title":"retrieve old versions","text":""},{"location":"software/git/essentials/#revert-a-commit","title":"revert a commit","text":""},{"location":"software/git/essentials/#remove-untracked-files","title":"remove untracked files","text":""},{"location":"software/git/essentials/#ignore-files","title":"ignore files","text":""},{"location":"software/git/essentials/#use-gitignore-files","title":"use .gitignore files","text":""},{"location":"software/git/essentials/#ideas-on-what-to-ignore","title":"ideas on what to ignore","text":""},{"location":"software/git/essentials/#globally-ignored-files","title":"globally ignored files","text":""},{"location":"software/git/essentials/#ignore-tracked-files","title":"ignore tracked files","text":""},{"location":"software/git/essentials/#track-empty-directories","title":"track empty directories","text":""},{"location":"software/git/github-pages/","title":"Using GitHub Pages","text":"<p>GitHub Pages sites are publicly available on the internet by default even if the repository is private</p>"},{"location":"software/git/github-pages/#create-a-site","title":"create a site","text":""},{"location":"software/git/github-pages/#create-repository","title":"create repository","text":"<p>skip if repository is already set up for site</p> <ol> <li>in the upper-right corner of any page click the   drop-down menu</li> <li>select new repository</li> <li>click the owner drop-down menu </li> <li>select the account you want to own the repository</li> <li>for a user site the repository name must be named .github.io in all lowercase letters  <li>choose name and optional description </li> <li>choose repository visibility </li> <li>select initialize with README</li> <li>click create repository</li> <li>push site to site to publish to repository</li>"},{"location":"software/git/github-pages/#choose-a-publishing-source","title":"choose a publishing source","text":"<ol> <li> <p>publishing source info </p> <ul> <li>the publishing source for your GitHub Pages site is the branch and folder where the source files for your site are stored </li> <li>the default publishing source for user and organization sites is the root of the default branch for the repository  </li> <li>site can be published from any branch in the repository</li> <li>if /docs is chosen as the folder for publishing source GitHub Pages will get all resources from there </li> <li>GitHub pages will read things such as the CNAME file from the publishing folder as well </li> <li>edit the site custom domain through the GitHub Pages settings </li> <li>if using /docs as publishing folder the custom domain would write to /docs/CNAME </li> </ul> </li> <li> <p>go to sites GitHub repository </p> </li> <li> <p>under repository name click   settings </p> </li> <li> <p>in the left sidebar click pages </p> </li> <li>under \"GitHub Pages\" use the \"None\" or \"Branch\" drop-down menu and select a publishing source </li> <li>optionally use the drop-down menu to select a folder for publishing source</li> <li>click save</li> </ol>"},{"location":"software/git/github-pages/#set-up-a-custom-domain","title":"set up a custom domain","text":"<p>update DNS records and repository settings to point the default domain for GitHub Pages site to a custom domain</p> <ol> <li>go to GitHub repository for site </li> <li>repeat steps 3 and 4 from above \u261d\ufe0f </li> <li>under \"Custom domain\" type custom domain </li> <li>click save</li> <li>go to DNS provider and create a CNAME record </li> <li>the CNAME record should point subdomain to the default domain for site</li> <li>to use docs.example.com create a CNAME record that points docs.example.com to default GitHub Pages site domain</li> <li>the default domain for the repository .github.io would be .github.io <li>use the dig command from a terminal to confirm the DNS record is configured correctly</li> <pre><code>dig docs.example.com +nostats +nocomments +nocmd\n</code></pre>"},{"location":"software/misc/understanding-apis/","title":"Understanding APIs","text":""},{"location":"software/misc/understanding-apis/#what-is-an-api","title":"What is an API?","text":"<ul> <li> <p>Application Programming Interface</p> </li> <li> <p>Interface for programming application</p> </li> </ul>"},{"location":"software/misc/understanding-apis/#what-is-an-interface","title":"What is an Interface?","text":"<ul> <li> <p>inter + face or interact and surface</p> </li> <li> <p>the surface through which you interact with something</p> </li> <li> <p>our physical bodies are an interface to our mind and soul</p> </li> </ul>"},{"location":"software/misc/understanding-apis/#application-user-interface","title":"Application User Interface","text":"<ul> <li>a way for users to access an application<ul> <li>web </li> <li>app </li> <li>terminal </li> </ul> </li> </ul>"},{"location":"software/misc/understanding-apis/#application-progammer-interface","title":"Application Progammer Interface","text":"<ul> <li> <p>an interface for programmers to access an application</p> </li> <li> <p>Different types of APIs</p> <ul> <li>web-app (Twitter)</li> <li>hardware (Twitter)</li> <li>web-browers (Twitter)</li> </ul> </li> </ul>"},{"location":"software/misc/understanding-apis/#building-an-api","title":"Building an API","text":"<ul> <li> <p>app idea to get the description of css properties</p> </li> <li> <p>build app</p> </li> <li> <p>decide other programmers to be able to build things with it for other users</p> </li> <li> <p>create an API programmers can use to build things with it such as flash cards</p> </li> </ul>"},{"location":"software/react/authentication/","title":"React Authentication","text":""},{"location":"software/react/authentication/#user-authentication-basics","title":"user authentication basics","text":""},{"location":"software/react/authentication/#what-is-user-authentication","title":"what is user authentication?","text":"<ul> <li>verifying that our application's users are who they say they are</li> </ul>"},{"location":"software/react/authentication/#json-web-tokens-jwt","title":"JSON Web Tokens (JWT)","text":"<ul> <li>strings we can give to users when they authenticate</li> <li>unique strings that we give to different users of our site after they have logged in </li> <li>form the figurative beating heart of most modern website authentication</li> <li>can be used instead of the user's password to interact with protected server resources</li> <li>if the user wants to interact with our database in any way as that user, such as update their information in our database, instead of having to send their password to our server everytime, they can send us this string instead</li> <li>JWT is a actually an encoded JSON object that contains information about our user, such as the id, email, and other application information</li> </ul> <pre><code>{\nid: '123',\nemail: 'john.doe@gmail.com',\nlikesCoffee: true,\n}\n</code></pre> <ul> <li> <p>usually encoded base64</p> </li> <li> <p>the header tells us the type and signing algo of the token</p> </li> <li> <p>the payload is the actual data that the JSON web token contains</p> </li> <li> <p>pieces of the data in the payload are referred to as claims </p> </li> <li> <p>the signature is used to verify the authenticity of the data that the JWT contains in it's other parts</p> </li> <li> <p>the signature is created by combining the header and payload and signing those using the specified algo and a secret key</p> </li> <li> <p>the secret key is defined on the server</p> </li> <li> <p>anyone who has the token can see the information that it contains (unless it is encrypted), but they cannot change the data in the token unless they have the private key, which should not be the case because our server should be the only one with access to the private key</p> </li> </ul>"},{"location":"software/react/authentication/#jwt-in-full-stack-apps","title":"JWT in full-stack apps","text":"<ol> <li> <p>user logs in </p> </li> <li> <p>server generates a JWT containing the user's information</p> </li> <li> <p>server sends token back to the user </p> </li> <li> <p>the front end / react / browser stores jwt in session or local storage</p> </li> <li> <p>whenever user wants to make privileged request, they send JWT along with their request </p> </li> <li> <p>server uses JWT signature to verify that it has not been modified</p> </li> <li> <p>when the front end send a JWT to the server, it will usually send the token in an <code>{ Authorization: 'Bearer ijsfiosjdifjsjfiosjfisojf'}</code> request header</p> </li> <li> <p>tokens are credentials and they need to be treated with care </p> </li> <li> <p>never give anyone else access to your JWT tokens, never want to display them in a public place, and as a developer you want to make sure the user's JWT's are as secure as possible</p> </li> </ol>"},{"location":"software/react/authentication/#signing-vs-encrypting","title":"signing vs encrypting","text":"<ul> <li> <p>unfortunately these two concepts do seem fairly similar to each other at first glance, but there is a big difference between them </p> </li> <li> <p>signing = proves that the data in the JWT is correct and has not been modified</p> </li> <li> <p>encrypting = hides the data that the token contains from 3rd parties, JWTs are not encrypted by default</p> </li> <li> <p>do not put secret information inside of JWTs unless they are encrypted or unless you are using HTTPS</p> </li> </ul>"},{"location":"software/react/authentication/#jwt-benefits","title":"JWT benefits","text":"<ul> <li> <p>they are stateless, all the info JWTs contain is contained inside of the token itself, so it does not require our backend to actively keep track of who is logged in </p> </li> <li> <p>in our DB we do not have to set properties on users saying logged in = true or anything like that </p> </li> <li> <p>use JSON which is more compact and secure (since signing JSON is generally easier and less vulnerable than XML)than using XML or other similar options to XML</p> </li> </ul>"},{"location":"software/react/authentication/#jwt-drawbacks","title":"JWT drawbacks","text":"<ul> <li> <p>because of the way tokens work, they remain valid until they expire or until the private key is changed</p> </li> <li> <p>if a user's account gets hacked, there is not really a great way to kick the hacker out, even after the user changes their password, since the hacker will still have that JWT</p> </li> <li> <p>hard to block specific users without making our JWT flow stateful, by having a database that has blacklisted ids, for example</p> </li> <li> <p>tokens are valid until they expire or until the private key is changed </p> </li> <li> <p>the user will have to reauthenticate when the token expires </p> </li> <li> <p>the JWT standard does not define a process for refreshing tokens, so when the token expires, the user will have to reauthenticate (every 2 days or however long we set the expiration date)</p> </li> </ul>"},{"location":"software/react/authentication/#email-verification","title":"email verification","text":""},{"location":"software/react/authentication/#resetting-passwords","title":"resetting passwords","text":""},{"location":"software/react/authentication/#oauth","title":"OAuth","text":""},{"location":"software/react/authentication/#prebuilt-authentication-options","title":"prebuilt authentication options","text":""},{"location":"software/react/authentication/#best-practices","title":"best practices","text":""},{"location":"software/react/design-patterns/","title":"React Design Patterns","text":""},{"location":"software/react/design-patterns/#what-are-design-patterns","title":"what are design patterns?","text":"<ul> <li>effective solutions to common application development challenges</li> <li>there are a lot of solutions to problems that are not effective that lead to more problems and that lead to more brittle code down the line and make your apps less performant and less maintainable</li> <li>the non-effective solutions are generally referred to as anti-patterns</li> <li>design patterns are the positive equivalent of anti-patterns, they are the most effective solutions to a given development challenge</li> <li>this pages design patterns are not referring to OOJ design patterns, they are React specific</li> </ul>"},{"location":"software/react/design-patterns/#common-challenges","title":"common challenges","text":"<ul> <li>creating reusable layouts</li> <li>reusing complex logic between multiple components</li> <li>working with forms correctly </li> <li>incorporating functional concepts into our code </li> </ul>"},{"location":"software/react/design-patterns/#layout-components","title":"Layout Components","text":""},{"location":"software/react/design-patterns/#what-are-layout-components","title":"what are layout components?","text":"<ul> <li>React components that deal primarily with arranging other components on the page</li> <li> <p>some examples:</p> <ul> <li>split screens (arranging more than one component in different sections of the page)</li> <li>lists and items (displaying data in a list)</li> <li>modals (just content that gets displayed over the top of the actual page)</li> </ul> </li> <li> <p>normally when creating a component (like a side nav), the normal way we would go about doing that is by including the div and the styles that go with that side nav inside the component itself</p> </li> <li>with layout components, we split the actual layout styles into their own component and then simply display the component itself (like a side nav), inside the layout component, this separates the component itself from where the component is being displayed on the page </li> <li>this gives us more flexibility with how we use it in the future</li> <li>the main idea with layout components is that the components we create, (the main content components of our pages), should not know or care where it is being displayed</li> </ul>"},{"location":"software/react/design-patterns/#split-screen-components","title":"split-screen components","text":"<ul> <li> <p>styled-components are a package that makes it easy to create React styled components (npm i styled-components)</p> </li> <li> <p>use styled components to add weight to our components like for a navbar</p> </li> <li> <p>App.js</p> </li> </ul> <pre><code>import { SplitScreen } from \"./SplitScreen\";\n\nconst LeftHandComponent = ({name}) =&gt; {\nreturn &lt;h1 style={{ backgroundColor: \"green\"}}&gt;{name}&lt;/h1&gt;\n}\nconst RightHandComponent = ({message}) =&gt; {\nreturn &lt;p style={{ backgroundColor: 'red'}}&gt;{message}&lt;/p&gt;\n}\nfunction App() {\nreturn (\n&lt;SplitScreen left={LeftHandComponent} right={RightHandComponent} &gt;\n&lt;LeftHandComponent name=\"Justin\"/&gt;\n&lt;RightHandComponent message=\"Hello\"/&gt;\n&lt;/SplitScreen&gt;\n);\n}\n\nexport default App;\n</code></pre> <ul> <li>SplitScreen.js</li> </ul> <pre><code>import styled from \"styled-components\";\n\nconst Container = styled.div` display: flex `;\n\nconst Pane = styled.div`flex: ${props =&gt; props.weight};`\n\nexport const SplitScreen = ({ children, leftWeight=1, rightWeight=1 }) =&gt; {\nconst [left, right] = children\n\nreturn (\n&lt;Container&gt; &lt;Pane weight={leftWeight}&gt; {left} &lt;/Pane&gt;\n&lt;Pane weight={rightWeight}&gt; {right} &lt;/Pane&gt;\n&lt;/Container&gt;\n)\n}\n</code></pre>"},{"location":"software/react/design-patterns/#list-components","title":"list components","text":"<ul> <li>App.js</li> </ul> <pre><code>import {RegularList} from \"./RegularList\";\nimport {NumberedList} from \"./NumberedList\";\nimport {SmallPersonListItem} from \"./person/SmallPersonListItem\";\nimport {LargePersonListItem} from \"./person/LargePersonListItem\";\nimport{SmallProductListItem} from \"./product/SmallProductListItem\";\nimport{LargeProductListItem} from \"./product/LargeProductListItem\";\n\nconst people = [{\nname: 'John Doe',\nage: 54,\nhairColor: 'brown',\nhobbies: ['swimming', 'bicycling', 'video games'],\n}, {\nname: 'Brenda Smith',\nage: 33,\nhairColor: 'black',\nhobbies: ['golf', 'mathematics'],\n}, {\nname: 'Jane Garcia',\nage: 27,\nhairColor: 'blonde',\nhobbies: ['biology', 'medicine', 'gymnastics'],\n}];\n\nconst products = [{\nname: 'Flat-Screen TV',\nprice: '$300',\ndescription: 'Huge LCD screen, a great deal',\nrating: 4.5,\n}, {\nname: 'Basketball',\nprice: '$10',\ndescription: 'Just like the pros use',\nrating: 3.8,\n}, {\nname: 'Running Shoes',\nprice: '$120',\ndescription: 'State-of-the-art technology for optimum running',\nrating: 4.2,\n}];\n\nfunction App() {\nreturn (\n&lt;&gt;\n&lt;RegularList items={people}\nresourceName=\"person\"\nitemComponent={SmallPersonListItem}\n/&gt;\n&lt;NumberedList items={products}\nresourceName=\"product\"\nitemComponent={SmallProductListItem}\n/&gt;\n&lt;RegularList items={people}\nresourceName=\"person\"\nitemComponent={LargePersonListItem}\n/&gt;\n&lt;NumberedList items={products}\nresourceName=\"product\"\nitemComponent={LargeProductListItem}\n/&gt;\n&lt;/&gt;\n);\n}\n\nexport default App;\n</code></pre> <ul> <li>NumberedList.js</li> </ul> <pre><code>export const NumberedList = ({ items, resourceName, itemComponent: ItemComponent, }) =&gt; {\nreturn (\n&lt;&gt;\n{items.map((item, i) =&gt; (\n&lt;&gt;\n&lt;h3&gt;{i + 1}&lt;/h3&gt;\n&lt;ItemComponent key={i} {...{[resourceName]: item }} /&gt;\n&lt;/&gt;\n))}\n&lt;/&gt;\n)\n}\n</code></pre> <ul> <li>RegularList.js</li> </ul> <pre><code>export const RegularList = ({ items, resourceName, itemComponent: ItemComponent, }) =&gt; {\nreturn (\n&lt;&gt;\n{items.map((item, i) =&gt; (\n&lt;ItemComponent key={i} {...{ [resourceName]: item }} /&gt;\n))}\n&lt;/&gt;\n)\n}\n</code></pre> <ul> <li>SmallPersonListItem.js</li> </ul> <pre><code>export const SmallPersonListItem = ({ person }) =&gt; {\nconst { name, age } = person;\nreturn (\n&lt;p&gt;Name: {name}, Age: {age}&lt;/p&gt;   \n);\n}\n</code></pre> <ul> <li>LargePersonListItem.js</li> </ul> <pre><code>export const LargePersonListItem = ({ person }) =&gt; {\nconst { name, age, hairColor, hobbies} = person;\n\nreturn (\n&lt;&gt;\n&lt;h3&gt;{name}&lt;/h3&gt;\n&lt;p&gt; Age: {age} years&lt;/p&gt;\n&lt;p&gt; Hair Color: {hairColor}&lt;/p&gt;\n&lt;h3&gt;Hobbies:&lt;/h3&gt;\n&lt;ul&gt;\n{hobbies.map(hobby =&gt; &lt;li key={hobby}&gt;{hobby}&lt;/li&gt;)}\n&lt;/ul&gt;\n&lt;/&gt;\n);\n}\n</code></pre> <ul> <li>SmallProductListItem.js</li> </ul> <pre><code>export const SmallProductListItem =({ product }) =&gt; {\nconst { name, price } = product; return (\n&lt;h3&gt;{name} - {price}&lt;/h3&gt;\n\n)\n}\n</code></pre> <ul> <li>LargeProductListItem.js</li> </ul> <pre><code>export const LargeProductListItem = ({ product }) =&gt; {\nconst { name, price, description, rating } = product;\n\nreturn (\n&lt;&gt;\n&lt;h3&gt;{name}&lt;/h3&gt;\n&lt;p&gt;{price}&lt;/p&gt;\n&lt;h3&gt;Description:&lt;/h3&gt;\n&lt;p&gt;{description}&lt;/p&gt;\n&lt;p&gt;Average Rating: {rating}&lt;/p&gt;\n&lt;/&gt;\n)\n}\n</code></pre>"},{"location":"software/react/design-patterns/#modal-components","title":"modal components","text":"<ul> <li>when most people go to add modals to the react application, most times, the first thing they do is install react modal, or some similar package</li> <li>this is not necessary and it is easy to implement your own</li> </ul>"},{"location":"software/react/design-patterns/#container-components","title":"container components","text":""},{"location":"software/react/design-patterns/#what-are-container-components","title":"what are container components?","text":""},{"location":"software/react/design-patterns/#server-instructions","title":"server instructions","text":""},{"location":"software/react/design-patterns/#currentuserloader-component","title":"CurrentUserLoader component","text":""},{"location":"software/react/design-patterns/#userloader-component","title":"UserLoader component","text":""},{"location":"software/react/design-patterns/#resourceloader-component","title":"ResourceLoader component","text":""},{"location":"software/react/design-patterns/#datasource-component","title":"DataSource component","text":""},{"location":"software/react/design-patterns/#loading-data-from-localstorage","title":"loading data from localStorage","text":""},{"location":"software/react/design-patterns/#controlled-and-uncontrolled-components","title":"controlled and uncontrolled components","text":""},{"location":"software/react/design-patterns/#controlled-vs-uncontrolled-components","title":"controlled vs uncontrolled components","text":""},{"location":"software/react/design-patterns/#uncontrolled-forms","title":"uncontrolled forms","text":""},{"location":"software/react/design-patterns/#controlled-forms","title":"controlled forms","text":""},{"location":"software/react/design-patterns/#controlled-modals","title":"controlled modals","text":""},{"location":"software/react/design-patterns/#uncontrolled-boarding-flows","title":"uncontrolled boarding flows","text":""},{"location":"software/react/design-patterns/#collecting-onboarding-data","title":"collecting onboarding data","text":""},{"location":"software/react/design-patterns/#controlled-onboarding-flows","title":"controlled onboarding flows","text":""},{"location":"software/react/design-patterns/#higher-order-components","title":"higher-order components","text":""},{"location":"software/react/design-patterns/#what-are-higher-order-components","title":"what are higher-order components","text":""},{"location":"software/react/design-patterns/#printing-props-with-hocs","title":"printing props with HOCs","text":""},{"location":"software/react/design-patterns/#loading-data-with-hocs","title":"loading data with HOCs","text":""},{"location":"software/react/design-patterns/#modifying-data-with-hocs","title":"modifying data with HOCs","text":""},{"location":"software/react/design-patterns/#creating-forms-with-hocs","title":"creating forms with HOCs","text":""},{"location":"software/react/design-patterns/#higher-order-component-improvements","title":"higher-order component improvements","text":""},{"location":"software/react/design-patterns/#custom-hooks-patterns","title":"custom hooks patterns","text":""},{"location":"software/react/design-patterns/#what-are-custom-hooks","title":"what are custom hooks?","text":""},{"location":"software/react/design-patterns/#usecurrentuser-hooks","title":"useCurrentUser hooks","text":""},{"location":"software/react/design-patterns/#getcurrentuser-hook","title":"getCurrentUser hook","text":""},{"location":"software/react/design-patterns/#useuser-hook","title":"useUser hook","text":""},{"location":"software/react/design-patterns/#useresource-hook","title":"useResource hook","text":""},{"location":"software/react/design-patterns/#usedatasource-hook","title":"useDataSource hook","text":""},{"location":"software/react/design-patterns/#functional-programming-and-react","title":"functional programming and React","text":""},{"location":"software/react/design-patterns/#what-is-functional-programming","title":"what is functional programming?","text":""},{"location":"software/react/design-patterns/#recursive-components","title":"recursive components","text":""},{"location":"software/react/design-patterns/#component-composition","title":"component composition","text":""},{"location":"software/react/design-patterns/#partially-applied-components","title":"partially applied components","text":""},{"location":"software/react/ecosystems/","title":"React Ecosystems","text":""},{"location":"software/react/ecosystems/#react-ecosystem","title":"React ecosystem","text":""},{"location":"software/react/ecosystems/#react-is-the-ecosystem-nucleus","title":"React is the ecosystem nucleus","text":"<ul> <li>React is like the nucleus of a powerful ecosystem</li> <li>React does not try to be too many things</li> <li>has a small library or API to keep things simple</li> <li>the power lies in giving you the proper syntax and infrastructure to build your application with components everywhere</li> <li>uses props (properties / parameters) to pass data to your components  </li> <li>uses states to keep track of your current application state</li> <li>allows the community and ecosystem to address other needs you might have with your application</li> <li>it is the ecosystem that makes React so valuable</li> </ul>"},{"location":"software/react/ecosystems/#react-ecosystem-electrons","title":"React ecosystem electrons","text":"<ul> <li>as React popularity has soared over the years a developer community has gathered around it's core and built hundreds of extensions to provide everything we need to build best in class and enterprise applications</li> <li> <p>when you look at the electrons surrounding the React core you can see tons of functional libraries helping us achieve specific goals for applications </p> </li> <li> <p>application goals: </p> <ul> <li>server-side rendering </li> <li>state management</li> <li>mobile </li> <li>testing and debugging</li> <li>animation</li> <li>routing and navigation </li> <li>types</li> <li>many others</li> </ul> </li> </ul>"},{"location":"software/react/ecosystems/#the-electrons","title":"the electrons","text":""},{"location":"software/react/ecosystems/#routing-navigation","title":"routing &amp; navigation","text":"<ul> <li>use them every day when you surf the web or navigate through an applications menu</li> <li>behind the scenes, routing basically happens as a function of navigating to different pages, or sections of a website or app</li> <li>when you browse a webpage and click on a navigation link, you are routed to a new page</li> <li> <p>although it may seem complex initially, routing is really quite simple, when you like on a link named news, the link calls a route named news</p> <ul> <li>the route \"news\", has a component named news attached to it, and the component will render that page in the browser</li> <li>if you click on other links, the same process happens over and over again</li> <li>on a mobile or web application it is the same when you tab or click any items that require a render for a new section or page</li> </ul> </li> <li> <p>best way to route is react is react-router</p> </li> <li>react router training</li> </ul>"},{"location":"software/react/ecosystems/#server-side-rendering","title":"server-side rendering","text":"<ul> <li>a website normally renders on the server where it is usually hosted, or your browser, commonly called a client</li> <li>depending on the application some are rendered on the server and some on the client</li> <li>it means grabbing all of your code and representing all of your code can be done on both sides</li> <li> <p>benefits of rendering on server-side:</p> <ul> <li>faster</li> <li>more secure </li> <li>SEO friendly</li> </ul> </li> <li> <p>do this in React by using ReactDomServer APIs, provided with Reacts core library</p> </li> <li> <p>in the server code we can use:</p> <ul> <li>renderToString(element)</li> <li>renderToStaticMarkup(element)</li> </ul> </li> <li> <p>SSR docs are on https://facebook.github.io/react</p> </li> </ul>"},{"location":"software/react/ecosystems/#state-management","title":"state management","text":"<ul> <li>when data changes or when you click on a link, the application will change to reflect these events</li> <li>think of a state as the webpage you are on before there are any changes or before you click on any links</li> <li>that is the current state of the site or application at that point in time</li> <li>when we click on a link, we change the state of the application at another point in time</li> <li> <p>in its simplest form, state management is:</p> <ul> <li>managing different points in time, or states for your application </li> </ul> </li> <li> <p>with React, we get an object we can observe and analyze, which is called state</p> </li> <li>so as these events occur, you see the state changing, both visually on the web page or application, and internally in the state object</li> <li>Redux, one of the leading libraries, provides us with great syntax and structure to manage out state</li> <li>Redux has actions that call reducers, which are functions that create a new state based on the previous one with the new action added to it </li> <li>if we click the action, \"get me the latest news\", the reducer will copy the old list of news, add the new ones, and create a new state object with the updated news</li> <li>learn about Redux at redux.js.org or take linked in learning course on the subject</li> </ul>"},{"location":"software/react/ecosystems/#mobile","title":"mobile","text":"<ul> <li>a couple years ago Reacts team decided to remove the react web apis, called react-dom from the react library</li> <li>this opened up the possibility of using React in new environments such as mobile devices  </li> <li>react native allows building mobile applications</li> <li> <p>react native ecosystem includes:</p> <ul> <li>routing </li> <li>UI </li> <li>starting kits</li> <li>IDEs </li> <li>testing</li> </ul> </li> <li> <p>checkout linkedin react native course</p> </li> </ul>"},{"location":"software/react/ecosystems/#animation","title":"animation","text":"<ul> <li>research has shown that subtle, well placed animation makes the difference between an addictive application and one that just feels meh</li> <li>react has a few tools for animation, such as the transition group which is part of reacts library, which is quite simple and does not provide too many options</li> <li>if you want to push the possibilities or do a fell feature show using the 12 principles of animation then you are better off using a library such as react-motion</li> <li>react-motion offers spring, motion, and transitions, and many other ways to get your components on and off the screen </li> <li>get started with react motion at github.com/chenglou/react-motion</li> </ul>"},{"location":"software/react/ecosystems/#testing-and-debugging","title":"testing and debugging","text":"<ul> <li>application development almost never goes smoothly</li> <li>React developer tools are good for when you need to inspect components to figure out what the state of your application is, or when you need to see what your state object looks like, or when you need to see what props are being passed to your component, it is built on top of your browser's development tools and it will let you see all of this information and more</li> <li>jest is good for:<ul> <li>to see if a component renders correctly with snapshots, which are great for UI tests</li> <li>when you need to know which files are being tested, JEST provides great coverage support </li> <li>good when you need to validate that the proper values are returned with matchers</li> <li>even though Jest is built by Facebook and aimed at React applications, you can also use it with many other frameworks, so the time invested in learning it is well spent</li> </ul> </li> </ul>"},{"location":"software/react/ecosystems/#types","title":"types","text":"<ul> <li>type checking</li> <li>type checking allows us to specify the type of data our variables, objects, or functions are expecting </li> <li>adds another tool for application efficiency and bug prevention</li> <li>when pass a value that is not of the expected type accidentally, in your program it will lead to trouble</li> <li>the benefit to type checking is to eliminate alot of the common and easily avoidable bugs or better understand why your code might not work as expected</li> <li>2 ways to get started, propTypes (by facebook) or flow.org (also by facebook)</li> </ul>"},{"location":"software/react/essentials/","title":"React Essentials","text":""},{"location":"software/react/essentials/#components","title":"components","text":"<ul> <li>think of a component as being a building block, a little piece of the UI that you use to describe one part of our application </li> <li>we create a component by creating a function, which returns JSX, or UI</li> <li>think of a component as a function that returns UI </li> <li>we can compose these functions together to create a larger application </li> <li>you can use components to display dynamic data </li> </ul>"},{"location":"software/react/essentials/#jsx","title":"JSX","text":"<ul> <li>React.createElement appends elements to the DOM </li> <li>this is not how React is normally used</li> </ul> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nReactDOM.render(\nReact.createElement(\"ul\", null, React.createElement(\"li\", null, \"list item\")\nReact.createElement(\"li\", null, \"list item\")\nReact.createElement(\"li\", null, \"list item\")\nReact.createElement(\"li\", null, \"list item\")\nReact.createElement(\"li\", null, \"list item\")\n),\ndocument.getElementById('root')\n);\n</code></pre> <ul> <li>javascript as XML</li> <li>a language extension that allows you to write tags directly in JavaScript</li> <li>does not run in the browser natively / naturally</li> <li>if a JS file with JSX tried running in the web browser it would not work and throw errors</li> <li>this is where create-react-app comes in, using babel</li> <li>babel is a tool that is working behind the scenes</li> <li>see babeljs.io compiler page to see how it works</li> <li>babel is a super useful tool that is found in a ton of different JS projects</li> <li>if you are writing JSX or some sort of new JS syntax that is not supported in older browsers, babel will do the hard work of compiling your code behind the scenes</li> </ul>"},{"location":"software/react/essentials/#component-properties","title":"component properties","text":"<ul> <li>every React components has access to an object called props (for properties)</li> <li>when creating React component functions, we use props for the parameters and then use the props / parameters inside of the function body</li> <li>we call functions in React using JSX syntax</li> <li>we access the props properties by using props.MYPROPERTY (dot notation) inside of our function body</li> <li>think of props being this little kind of backpack that you can place different information in for every single component</li> <li>when we render the component we pass properties like attributes / named arguments in to the component using JSX syntax</li> <li>any keywords in HTML or CSS that clash with keywords in react or use hyphens are replaced with a camel-case version</li> </ul> <pre><code>const Header = (props) =&gt; {\nreturn (\n&lt;h1&gt;{props.name}'s Header&lt;/h1&gt;\n)\n}\n\n\n\nconst Main = (props) =&gt; {\nreturn (\n&lt;p&gt;{props.adjective}&lt;/p&gt;\n)\n}\n\nconst Footer = (props) =&gt; {\nreturn (\n&lt;h3&gt;{props.date}&lt;/h3&gt;\n)\n}\n\nfunction App() {\nreturn (\n&lt;div&gt;\n&lt;Header name=\"Justin\"/&gt;\n&lt;Main adjective=\"so freakin awesome\"/&gt;\n&lt;Footer date={new Date().getFullYear()}/&gt;\n&lt;/div&gt;\n);\n}\n\nexport default App;\n</code></pre> <ul> <li>component file names are usually capitalized</li> <li>import your own components using a relative file path</li> <li>when creating list components, they need to be created with a key, which is like a unique id and can most likely come from the id of the data you are using / mapping</li> </ul>"},{"location":"software/react/essentials/#styling-components","title":"styling components","text":"<ul> <li>you can use curly braces and pass in style={style-object} as an argument to a component to style it </li> <li>you can style by passing in className=\"my classes class3\" as well </li> <li>try not to use strings however, it is better assign them as variables before the return statement </li> </ul>"},{"location":"software/react/essentials/#working-with-lists","title":"working with lists","text":"<ul> <li>to display more complex data with our components, we can use lists </li> <li>we can use the .map() Array method to map the list items as components</li> <li>when passing in a variable as an argument we use curly braces, which is pretty much always unless we are passing in a string </li> <li>try not to use strings in your code, make them variables first  </li> <li>each child in a list should have a unique key property</li> <li>a key is like an ID that helps keep everything in sync</li> <li>it is possible that our array items might get out of sync when rendering occurs</li> <li>particularly when something is being added to the DOM at the beginning or the middle of the list instead of the end</li> <li>there are a couple different ways we can handle this </li> <li>one thing we can do is add an index to our map method that we can use as a key, but this is not recommended</li> <li>React documentation says using an array index as a key can cause problems when rendering the items to the DOM</li> <li>normally when working with data this should not be too much of a problem because the data will have a unique ID we can use </li> <li>if we do not have a unique Id we can use a transformation function to map over the list and create an object</li> <li>whenever we return an object from a function like this in line, we need to wrap it in parenthesis</li> <li>keys help your data stay in sync as your application data changes over time</li> </ul> <pre><code>const Main = (props) =&gt; {\nreturn (\n&lt;div&gt;\n&lt;p&gt;{props.adjective}&lt;/p&gt;\n&lt;ul&gt;\n{props.myList.map((listItem) =&gt; (\n&lt;li key={listItem.id}&gt;{listItem.day}&lt;/li&gt;\n))}\n\n&lt;/ul&gt;\n&lt;/div&gt;\n)\n}; const Footer = (props) =&gt; {\nreturn (\n&lt;h3&gt;{props.date}&lt;/h3&gt;\n)\n}\n\nfunction App() {\nconst weekDays = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday']\n\nconst weekDaysObject  = weekDaysList.map((weekday, index) =&gt; ({id: index, day: weekday}))\nreturn (\n&lt;div&gt;\n&lt;Header name=\"Justin\"/&gt;\n&lt;Main myList={weekDaysObject} adjective=\"so freakin awesome\"/&gt;\n&lt;Footer date={new Date().getFullYear()}/&gt;\n&lt;/div&gt;\n);\n}\n</code></pre>"},{"location":"software/react/essentials/#using-reactfragment","title":"using React.Fragment","text":"<ul> <li>JSX must always return with a single parent node </li> <li>text nodes count, so a one-element, one-line return would work, and without parenthesis </li> <li>if there is more than 1 element and it spans lines, the return statement must have opening and closing parenthesis and a single parent element</li> <li>wrapping the render statement JSX with  or &lt;&gt; can basically act as a parent div as well </li> </ul>"},{"location":"software/react/essentials/#adding-images","title":"adding images","text":"<ul> <li>add images to React just like with HTML</li> <li>import the image from the relative directory path </li> <li>use img tag with src attribute and curly braces for imported variable name </li> <li>can also use URLS </li> <li>img elements must have an alt prop, either with meaningful text, or an empty string for decorative images</li> <li>always add an alt to images for the visually impaired</li> </ul> <pre><code>import imageName from './images-dir/my-image.jpg';\n\nconst myImage = () =&gt; {\nconst myImageUrl = \"https://github.com/justinsgithub.png\"\nreturn (\n&lt;img src={myImageUrl} height={200} alt=\"justinsgithub image\"/&gt;\n&lt;img src={imageName} alt=\"alternate description for imageName\"/&gt;\n)\n}\n</code></pre>"},{"location":"software/react/essentials/#state-in-the-component-tree","title":"state in the component tree","text":""},{"location":"software/react/essentials/#conditional-rendering","title":"conditional rendering","text":"<ul> <li>components can be rendered conditionally</li> <li>we can choose certain components to display based on the value of whatever variables we choose in our code</li> <li>we can use terser syntax for conditional rendering ? true : veryTrue</li> <li>we can also set bind components with different attributes to variable names, for easier conditionals in some situations</li> </ul> <pre><code>import React from \"react\";\nimport \"./App.css\"\n\nconst Title = (props) =&gt; {\n\nreturn &lt;h1&gt;{props.name}&lt;/h1&gt;\n}\n\nconst Header = (props) =&gt; {\n\nconst justin = &lt;Title name=\"justin\"/&gt;\nconst notJustin = &lt;Title name=\"not justin\"/&gt;\n\nreturn (\n&lt;header&gt;\n{props.isJustin === true ? justin : notJustin}\n&lt;/header&gt;\n)\n}\n\nfunction App() {\n\nlet isJustin = true\n\nreturn (\n&lt;Header isJustin={isJustin}/&gt;\n\n);\n}\n\nexport default App;\n</code></pre>"},{"location":"software/react/essentials/#array-destructuring","title":"array destructuring","text":"<ul> <li>a way to automatically assign variable names to array items </li> </ul> <pre><code>const [word1,word2,word3] = ['random', 'word','array']\n\nconsole.log(word2) // 'word'\n\nconst [,,word3] = ['random', 'word','array']\n\nconsole.log(word3) // 'array'\n</code></pre> <ul> <li>often used with the props object</li> </ul> <pre><code>import React from \"react\";\nimport \"./App.css\"\n\nconst Title = ({name}) =&gt; {\n\nreturn &lt;h1&gt;{name}&lt;/h1&gt;\n}\n\nconst Header = (props) =&gt; {\n\nconst justin = &lt;Title name=\"justin\"/&gt;\nconst notJustin = &lt;Title name=\"not justin\"/&gt;\n\nreturn (\n&lt;header&gt;\n{props.isJustin === true ? justin : notJustin}\n&lt;/header&gt;\n)\n}\n\nfunction App() {\n\nlet isJustin = true\n\nreturn (\n&lt;Header isJustin={isJustin}/&gt;\n\n);\n}\n\nexport default App;\n</code></pre>"},{"location":"software/react/essentials/#handling-loading-states","title":"handling loading states","text":"<ul> <li> <p>when we make a http request to an API, there are 3 possible states:</p> <ul> <li>pending / loading </li> <li>success </li> <li>failed, this can happen at times such as making a request to a broken URL</li> </ul> </li> </ul>"},{"location":"software/react/essentials/#handling-states-example","title":"handling states example","text":"<p>``` import React,{useState, useEffect} from \"react\"; import \"./App.css\"</p> <p>function App({login}) {</p> <pre><code>const [dataState, setDataState] = useState(null)\nconst [loadingState, setLoadingState] = useState(false)\nconst [errorState, setErrorState] = useState(null)\n\nconst ghurl = \"https://api.github.com/users\"\n\nuseEffect(() =&gt; {\n    if(!login) return;\n    setLoadingState(true);\n    fetch(`${ghurl}/${login}`)\n    .then(response =&gt; response.json())\n    .then(setDataState)\n    .then(() =&gt; setLoadingState(false))\n    .catch(setErrorState)\n}, [login]);\n\nif (loadingState) return &lt;h1&gt;Loading...&lt;/h1&gt;;\nif (errorState) return &lt;pre&gt;{JSON.stringify(errorState, null, 2)}&lt;/pre&gt;;\nif (!dataState) return null;\n\n    return(\n        &lt;&gt;\n            &lt;div&gt;\n&lt;h1&gt;{dataState.name}&lt;/h1&gt;\n&lt;h1&gt;{dataState.login}&lt;/h1&gt;\n&lt;p&gt;{dataState.location}&lt;/p&gt;\n&lt;img alt={dataState.login} src={dataState.avatar_url}/&gt;\n&lt;/div&gt;\n);\n</code></pre> <p>};</p> <p>export default App;  ```</p>"},{"location":"software/react/essentials/#react-router","title":"React router","text":"<ul> <li>when creating a React application, we are creating a SPA (single page application)</li> <li>you can think of a SPA as instead of creating different files for different pages, we create a single page and javascript is going to load information and change the UI</li> <li>something that becomes tricky when creating an SPA, is somehow handling routing</li> <li>how are we gonna get users from page to page? we can use react router to help us</li> <li>when developing for web application, react-router-dom is used, react-router has tools for native applications as well </li> <li>the router lives in the index.js file</li> <li>index.js is where you pass all the information from the router to any nested components</li> </ul> <pre><code>npm install react-router@next react-router-dom@next\n</code></pre>"},{"location":"software/react/essentials/#route-properties","title":"route properties","text":"<ul> <li>routes take in 2 arguments </li> <li>a path argument which is the URL we want to use </li> <li>an element argument, which is the Components we want to display at that URL</li> <li>the home component would be path=\"/\"</li> </ul>"},{"location":"software/react/essentials/#link-component","title":"link component","text":"<ul> <li>the link component takes an argument called to (to=\"/my-page\")</li> <li>you can create a custom 404 page using path=\"*\"</li> </ul>"},{"location":"software/react/essentials/#uselocation","title":"useLocation","text":"<ul> <li>a function that is going to return our current location </li> </ul> <pre><code>let location = useLocation()  </code></pre>"},{"location":"software/react/essentials/#nested-routes","title":"nested routes","text":"<ul> <li>use Outlet to setup nested routes</li> </ul>"},{"location":"software/react/essentials/#indexjs","title":"index.js","text":"<pre><code>import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n\n\n//   &lt;App login=\"justinsgithub\"/&gt;, document.getElementById('root'));\nReactDOM.render( &lt;Router&gt;\n&lt;App/&gt;\n&lt;/Router&gt;,\ndocument.getElementById('root')\n);\n</code></pre>"},{"location":"software/react/essentials/#appjs","title":"App.js","text":"<pre><code>import {Routes, Route} from \"react-router-dom\";\nimport \"./App.css\"\n\nimport { Home, About, Events, Contact, Whoops404, Services, CompanyHistory, Location } from './pages';\n\n\nfunction App() {\nreturn(\n&lt;div&gt;\n&lt;Routes&gt;\n&lt;Route path=\"/\" element={&lt;Home /&gt;}/&gt;\n&lt;Route path=\"/about\" element={&lt;About/&gt;}&gt;\n&lt;Route path=\"services\" element={&lt;Services/&gt;}/&gt;\n&lt;Route path=\"location\" element={&lt;Location/&gt;}/&gt;\n&lt;Route path=\"history\" element={&lt;CompanyHistory/&gt;}/&gt;\n&lt;/Route&gt;\n&lt;Route path=\"/events\" element={&lt;Events/&gt;}/&gt;\n&lt;Route path=\"/contact\" element={&lt;Contact/&gt;}/&gt;\n&lt;Route path=\"*\" element={&lt;Whoops404/&gt;}/&gt;\n&lt;/Routes&gt;\n&lt;/div&gt;\n);\n};\n\nexport default App;\n</code></pre>"},{"location":"software/react/essentials/#pagesjs","title":"pages.js","text":"<pre><code>import React from 'react';\nimport {Link, useLocation, Outlet} from 'react-router-dom';\n\nexport function Home() {\nreturn (\n&lt;div&gt;\n&lt;h1&gt;[Company Website]&lt;/h1&gt;\n&lt;nav&gt;\n&lt;Link to=\"about\"&gt;About&lt;/Link&gt;\n&lt;Link to=\"events\"&gt;Events&lt;/Link&gt;\n&lt;Link to=\"contact\"&gt;Contact&lt;/Link&gt;\n&lt;/nav&gt;\n&lt;/div&gt;\n);\n}\n\nexport function About() {\nreturn (\n&lt;div&gt;\n&lt;h1&gt;[About]&lt;/h1&gt;\n&lt;Outlet /&gt;\n&lt;/div&gt;\n);\n}\n\nexport function Events() {\nreturn (\n&lt;div&gt;\n&lt;h1&gt;[Events]&lt;/h1&gt;\n&lt;/div&gt;\n);\n}\n\nexport function Contact() {\nreturn (\n&lt;div&gt;\n&lt;h1&gt;[Contact]&lt;/h1&gt;\n&lt;/div&gt;\n);\n}\n\nexport function Whoops404() {\nlet location = useLocation()\nreturn (\n&lt;h1&gt;whoopsies no page found at {location.pathname}&lt;/h1&gt;\n)\n}\n\nexport function Services() {\nreturn (\n&lt;div&gt;\n&lt;h2&gt;\nOur Services\n&lt;/h2&gt;\n&lt;/div&gt;\n)\n}\n\nexport function CompanyHistory() {\nreturn (\n&lt;div&gt;\n&lt;h2&gt;\nOur Company History &lt;/h2&gt;\n&lt;/div&gt;\n)\n}\n\nexport function Location() {\nreturn (\n&lt;div&gt;\n&lt;h2&gt;\nOur Location &lt;/h2&gt;\n&lt;/div&gt;\n)\n}\n</code></pre>"},{"location":"software/react/getting-started/","title":"Getting Started w/ React","text":""},{"location":"software/react/getting-started/#tools-for-react","title":"tools for react","text":"<ul> <li>git </li> <li>nodejs</li> <li>react developer tools</li> <li>react snippets</li> <li>js/jsx snippets</li> <li>create-react-app</li> </ul> <pre><code>npx create-react-app building-an-interface\n</code></pre>"},{"location":"software/react/getting-started/#create-react-app-modules","title":"create-react-app modules","text":"<ul> <li>create-react-app scaffolds a project template for you</li> </ul>"},{"location":"software/react/getting-started/#webpack","title":"webpack","text":"<ul> <li>a JS bundler </li> <li>main job is to manage how our application is assembled and the loading of your different modules into an application</li> </ul>"},{"location":"software/react/getting-started/#babel","title":"babel","text":"<ul> <li>a JS compiler</li> <li>lets you write code with the latest JS features and will convert it so that it works with older browsers</li> </ul>"},{"location":"software/react/getting-started/#es-lint-extension","title":"ES Lint | extension","text":"<ul> <li>a JS linter</li> <li>analyzes your code against certain rules and helps you fix them</li> <li>you may need an extension installed on your editor to use it</li> </ul>"},{"location":"software/react/getting-started/#jest","title":"Jest","text":"<ul> <li>a testing framework</li> </ul>"},{"location":"software/react/getting-started/#web-vitals","title":"web vitals","text":"<p>-a performance monitoring tool for your site - measures:          - performance          - accessibility          - best practices</p>"},{"location":"software/react/getting-started/#external-components","title":"external components","text":"<ul> <li>in a real application you won't want to code everything from scratch, so you can install extra modules</li> </ul>"},{"location":"software/react/getting-started/#tailwind-css","title":"tailwind CSS","text":"<ul> <li>a framework for building great looking sites, with a utility first approach</li> <li>super popular for a library like react</li> <li>installing tailwind is a little bit different from most other libraries </li> <li>the reason is a problem with one of the libraries that tailwind uses called PostCSS</li> <li>right now create-react-app does not support PostCSS 8 </li> <li> <p>to install for create-react-app v5.0+</p> <ol> <li>npm install -D tailwindcss postcss autoprefixer</li> <li>npx tailwindcss init -p</li> </ol> </li> <li> <p>creates 2 files: </p> </li> <li> <p>tailwind.config.css</p> </li> </ul> <pre><code>module.exports = {\ncontent: [\n\"./src/**/*.{js,jsx,ts,tsx}\",\n],\ntheme: {\nextend: {},\n},\nplugins: [\nrequire('@tailwindcss/forms'),\n],\n}\n</code></pre> <ul> <li>postcss.config.css</li> </ul> <pre><code>module.exports = {\nplugins: {\ntailwindcss: {},\nautoprefixer: {},\n},\n}\n</code></pre> <ul> <li>add directives to src/index.css</li> </ul> <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <ul> <li>in tailwind you usually want to wrap everything in a container class </li> </ul>"},{"location":"software/react/getting-started/#react-icons","title":"react-icons","text":"<ul> <li>react-icons will only use the code for the specific icons that you use, unlike linking to something like font-awesome</li> <li>after installing it will be available to any of your modules</li> <li>search react-icons website to find icons to use</li> <li>each icon is prefixed with the library that it comes from</li> </ul> <pre><code>npm install react-icons\n</code></pre> <pre><code>import { ICONNAME1, ICONNAME2 } from 'react-icons/LIBRARY-NAME' // 'react-icons/bs' for example;\n\n...\n&lt;ICONNAME /&gt;\n</code></pre>"},{"location":"software/react/getting-started/#project-configuration","title":"project configuration","text":"<ul> <li>folder layout </li> </ul> <pre><code>node_modules\npackage.json\npackage-lock.json\npublic\nREADME.md\nsrc\n</code></pre> <ul> <li>files are put into 2 main folders, src and public</li> </ul>"},{"location":"software/react/getting-started/#src-folder","title":"src folder","text":"<pre><code>App.css\nApp.js\nApp.test.js\nindex.css\nindex.js\nlogo.svg\nreportWebVitals.js\nsetupTests.js\n</code></pre>"},{"location":"software/react/getting-started/#indexjs","title":"index.js","text":"<ul> <li>index.js is the entry point for the JS application</li> <li>index.js will import alot of code from different libraries like react and react-dom</li> <li>react is the main library for working with React</li> <li>react-dom manages how the document model works within react </li> <li>react and react-dom are being used by Node using what is listed as dependencies in your package.json</li> <li>webpack allows an application wide CSS file by importing index.css into index.js like below </li> <li>a configuration file for web report vitals is also included in the index.js</li> <li>import App is importing the App.js file, you can ignore extensions when you load other JS files</li> </ul> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n&lt;React.StrictMode&gt;\n&lt;App /&gt;\n&lt;/React.StrictMode&gt;,\ndocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n</code></pre> <ul> <li>the React library is getting used inside of our render command </li> <li>there is also some code to put React in strict mode during development</li> <li>strict mode will complain if you write potentially dangerous code</li> <li>the render command loads up the App component as a module, and looks for an item with the id of root in your index.html file, where your application will be loaded</li> </ul>"},{"location":"software/react/getting-started/#appjs","title":"App.js","text":"<ul> <li>the logo being imported here will not be in the final build that is launched for the public since it is being managed by webpack</li> <li>react code is normally written in JSX which is a combination of JS and XML / HTML</li> <li>react functions return HTML with some small differences</li> <li>you can use JS code inside of the HTML by wrapping it with {curly braces}</li> <li>there are places where normal HTML keywords will have to be replaced by the JSX version, such as class</li> <li>when using the class keyword inside of HTML you have to use className instead, since class is a JS keyword</li> <li>standalone HTML tags such as br and hr need to include a closing slash</li> </ul> <pre><code>import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\nreturn (\n&lt;div className=\"App\"&gt;\n&lt;header className=\"App-header\"&gt;\n&lt;img src={logo} className=\"App-logo\" alt=\"logo\" /&gt;\n&lt;p&gt;\nEdit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.\n&lt;/p&gt;\n&lt;a\nclassName=\"App-link\"\nhref=\"https://reactjs.org\"\ntarget=\"_blank\"\nrel=\"noopener noreferrer\"\n&gt;\nLearn React\n&lt;/a&gt;\n&lt;/header&gt;\n&lt;/div&gt;\n);\n}\n\nexport default App;\n</code></pre>"},{"location":"software/react/getting-started/#public-folder","title":"public folder","text":"<ul> <li>the public folder has files that webpack will manage</li> <li>will be moved to the server when the project is deployed </li> <li>the logo / icon files will show up when we preview our application</li> <li>robots.txt gives web crawlers information about your site</li> <li>web-crawlers are applications that search engines like google use to get more information about your websites</li> </ul> <pre><code>favicon.ico\nindex.html\nlogo192.png\nlogo512.png\nmanifest.json\nrobots.txt\n</code></pre>"},{"location":"software/react/getting-started/#indexhtml","title":"index.html","text":"<ul> <li>the index.html file is the entry point for browsers </li> <li>index.html can be modified but webpack uses this file to inject the JS code you write, as well as React code and CSS</li> <li>inside of the root div is where your application is loaded</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n    &lt;meta name=\"theme-color\" content=\"#000000\" /&gt;\n    &lt;meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    /&gt;\n    &lt;link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" /&gt;\n    &lt;!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    --&gt;\n    &lt;link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" /&gt;\n    &lt;!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    --&gt;\n    &lt;title&gt;React App&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the &lt;body&gt; tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    --&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"software/react/getting-started/#packagejson","title":"package.json","text":"<ul> <li>package.json is the file Node creates to manage a project</li> </ul> <pre><code>{\n\"name\": \"react-repo\",\n\"version\": \"0.1.0\",\n\"private\": true,\n\"dependencies\": {\n\"@testing-library/jest-dom\": \"^5.16.1\",\n\"@testing-library/react\": \"^12.1.2\",\n\"@testing-library/user-event\": \"^13.5.0\",\n\"react\": \"^17.0.2\",\n\"react-dom\": \"^17.0.2\",\n\"react-scripts\": \"5.0.0\",\n\"web-vitals\": \"^2.1.2\"\n},\n\"scripts\": {\n\"start\": \"react-scripts start\",\n\"build\": \"react-scripts build\",\n\"test\": \"react-scripts test\",\n\"eject\": \"react-scripts eject\"\n},\n\"eslintConfig\": {\n\"extends\": [\n\"react-app\",\n\"react-app/jest\"\n]\n},\n\"browserslist\": {\n\"production\": [\n\"&gt;0.2%\",\n\"not dead\",\n\"not op_mini all\"\n],\n\"development\": [\n\"last 1 chrome version\",\n\"last 1 firefox version\",\n\"last 1 safari version\"\n]\n}\n}\n</code></pre>"},{"location":"software/react/getting-started/#browserslist","title":"browserslist","text":"<ul> <li>helps your modules like webpack know which browsers you are targeting for the build </li> <li>in the above package.json we are targeting browsers that are not opera mini</li> </ul>"},{"location":"software/react/getting-started/#gitignore","title":".gitignore","text":"<ul> <li>helps you control which files are tracked by GitHub</li> </ul> <pre><code># See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# testing\n/coverage\n\n# production\n/build\n\n# misc\n.DS_Store\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n</code></pre>"},{"location":"software/react/hooks-descriptions/","title":"React Hooks","text":"<ul> <li>the modern way to work with React projects is to use a feature called hooks</li> <li>hooks allow you to use state and other react features without having to write classes</li> </ul>"},{"location":"software/react/hooks-descriptions/#usestate","title":"useState","text":"<ul> <li>managing state in an application is the utmost importance and we can do this with Reacts function useState</li> <li>useState is a function that returns an array of 2 items, the first item is the state of our variable, and the second item is a function</li> <li>we define the first item in the array returned from useState by passing it in as an argument to useState</li> <li>create a variable that holds an array containing a variable for data and a variable that you call whenever you want to modify the data variable</li> <li>the created variable is given the value of useState, which takes an argument of the data variables initial value</li> <li>the initial value could be false to set the default state of an element to hide, so that it only shows when a user click on it</li> <li>useState allows us to track the value of an element and modify our code to do things depending on the state of the useState variable</li> </ul>"},{"location":"software/react/hooks-descriptions/#usereducer","title":"useReducer","text":"<ul> <li>the most simple definition of a reducer function is that it takes the current state and returns a new state</li> <li>useReducer takes in two arguments, the first is a function to change the state, and the second is the initial state</li> <li>useReducer abstracts writing separate state changing functions and makes our code even more concise, thank you React</li> </ul>"},{"location":"software/react/hooks-descriptions/#usecallback","title":"useCallback","text":"<ul> <li>useCallback allows us to use async functions and perform things like setState functions when its finished</li> <li>good for using the fetch command in JS</li> </ul>"},{"location":"software/react/hooks-descriptions/#useeffect","title":"useEffect","text":"<ul> <li>typically used to manage side effects that aren't related to the components render</li> <li>things like console messages, fetching data, and sometimes animations can benefit from useEffect</li> <li>takes in a callback function and normally does something one of our applications states</li> <li>also takes in a second argument called the dependency array </li> <li>if you pass in an empty array, the props and state inside the effect will always have the initial values</li> <li>an empty array means the effect is not going to be called again after the first render</li> <li>with an empty dependency array, the useEffect still will not run even when the state its using changes</li> <li> <p>React will complain if we do not add any state to track to our dependency array and leave it empty</p> </li> <li> <p>useEffect lets you perform what are called side effects in function components</p> </li> <li>useEffect is like the React life cycle methods componentDidMount / componentDidUpdate / componentWillUnmount</li> <li>perfect for performing data searching operations and manually changing the DOM when certain components are a result of these operations</li> <li>effect is supposed to be something like a side effect that your application doesn't normally worry about, controls React a little bit more</li> <li>useEffect can use something like a useCallback fetch function and track the fetching of the data </li> <li>if the data changes for some reason, useEffect can track it and update our application automatically</li> </ul>"},{"location":"software/react/rendering-process/","title":"React's UI Rendering Process","text":"<ul> <li> <p>React allows you to write maintainable and performant code by using the concept of components </p> </li> <li> <p>components allow you to focus on describing the UI you want, rather than focusing on the details of how the UI actually gets inserted in the page</p> </li> </ul>"},{"location":"software/react/rendering-process/#html-the-dom","title":"HTML &amp; the DOM","text":"<ul> <li>helpful to think of a web page as a document, instead of editing document with word processor, you use an api (the DOM)</li> </ul>"},{"location":"software/react/rendering-process/#components-elements","title":"components &amp; elements","text":"<ul> <li> <p>components are functions and classes to describe the UI you want to ultimately end up with</p> </li> <li> <p>jsx is the primary way we write components, but we do not have to use jsx </p> </li> <li> <p>an element is a plain object describing a component or HTML tag </p> </li> </ul>"},{"location":"software/react/rendering-process/#component-using-jsx","title":"component using jsx","text":"<pre><code>const MyComponent = () =&gt; {\n    return (\n        &lt;main&gt;\n            &lt;h1 id=\"title\"&gt;Look ma!&lt;/h1&gt;\n        &lt;/main&gt;\n    )\n\n}\n</code></pre>"},{"location":"software/react/rendering-process/#returned-element","title":"returned element","text":"<pre><code>{\ntype: \"main\";\nkey: null, ref: null,\n\"$$typeof\": Symbol(react.element),\nprops: {\nchildren: {\ntype: \"h1\",\nkey:null,\nref:null,\nprops: {\nid: \"title\",\nchildren: \"Look ma!\"\n},\n}}}\n</code></pre> <ul> <li>you can actually write your code like above and it would work</li> </ul>"},{"location":"software/react/rendering-process/#type-property","title":"type property","text":"<ul> <li>a string reference to an HTML tag (react internally calls this a dom element)</li> <li>a reference to a component, react calls this a component element (if you did import \"MyComponent\" at the top of a JS file, that is what would be in type)</li> </ul>"},{"location":"software/react/rendering-process/#key-property","title":"key property","text":"<ul> <li>used when you are manually creating a bunch of children, when you are mapping over an Array and you are generating a bunch of components from mapping </li> <li>used to uniquely identify an element among siblings</li> </ul>"},{"location":"software/react/rendering-process/#ref-property","title":"ref property","text":"<ul> <li>reference to an actual DOM node </li> <li>using (createRef, useRef), the value ends up here </li> <li>you may want something referenced when you want to do something such as focus an input, or if you have a 3rd party library that is writing attributes to a DOM node and you want to access those</li> </ul>"},{"location":"software/react/rendering-process/#typeof-property","title":"$$typeof property","text":"<ul> <li>a safety feature (super edge case)</li> <li>its value is always a Symbol</li> <li>with a Symbol you can pass in a String, or anything and it generates a unique anonymous \"hash\" (essentially, almost like a UUID)</li> <li>the idea is that this Symbol is unique to the react App itself</li> <li>cannot have a Symbol in json, returns typeof Symbol, cannot send Symbols back and forth through API calls</li> <li>the Symbol as a value is protection against cross-site scripting attacks</li> <li>react expects all elements to have this property so malicious or fake components don't get injected into code when fetching data from a server</li> </ul>"},{"location":"software/react/rendering-process/#props-property","title":"props property","text":"<ul> <li>the meat of the element </li> <li>everything inside of the element</li> <li>an object, above only has 1 prop </li> <li> <p>children can be an object or an Array, an Array of objects which are the children elements</p> </li> <li> <p>we have a component, internally React creates a component instance, which ultimately generates an object like the one above</p> </li> <li>the object that is generated is what is known as a virtual DOM</li> <li>it is really computationally expensive to write to the DOM, it is super cheap to create an object</li> </ul>"},{"location":"software/react/rendering-process/#view-an-element","title":"view an element","text":"<pre><code>const MyComponent = (\n&lt;main&gt;\n&lt;h1 id=\"title\"&gt;Look Ma!&lt;/h1&gt;\n&lt;/main&gt;\n)\nconsole.log(MyComponent)\n</code></pre>"},{"location":"software/react/rendering-process/#shadow-dom","title":"shadow DOM?","text":"<ul> <li>the shadow DOM is browser technology designed for scoping variables in CSS and web components </li> <li>not related specifically related to React</li> </ul>"},{"location":"software/react/rendering-process/#reconciliation","title":"reconciliation","text":"<ul> <li>creating the virtual DOM is part of the process known as reconciliation</li> <li>reconciliation is responsible for maintaining the tree of elements when a components props or state change</li> <li>react creates a tree of elements every time the render function is called, that is ultimately what we are getting back</li> <li>to be efficient we need a way to tell what is different between the 2 trees so that we are only changing things in the DOM that need to be changed </li> <li>reconciliation houses the diffing algorithm that determines what parts of that tree need to be replaced</li> </ul>"},{"location":"software/react/rendering-process/#reconciliation-type-change","title":"reconciliation - type change","text":"<ul> <li>below situation is such as a customer looking at a product page and then clicking to view a single product</li> </ul> <pre><code>&lt;Wrapper&gt;                   &lt;Wrapper&gt;\n&lt;ProductList /&gt;    =&gt;         &lt;IndividualProduct /&gt;\n&lt;/Wrapper&gt;                  &lt;/Wrapper&gt;\n</code></pre> <ul> <li> <p>whenever the roots of elements have different types, react tears down the whole tree and it builds a whole new tree from scratch </p> </li> <li> <p>the reason for the new tree is that their type has changed</p> </li> <li> <p>if the type of a component object changes, everything beneath it gets blown away </p> </li> <li> <p>when tearing down a tree, all DOM nodes are destroyed, component instances will receive component will unmount and the equivalent useEffect hook will fire</p> </li> <li> <p>the new DOM nodes are inserted to the DOM and then components will receive component will mount and then component did mount </p> </li> <li> <p>functional components will have their useEffect hooks run as is appropriate</p> </li> <li> <p>any state associated with the old tree is lost</p> </li> <li> <p>React is not reusing DOM elements, it is actually destroying an recreating them every time an element gets generated so there is some stuff happening in the middle, but you can think of every DOM element correlated with a DOM node, if that element goes away, that DOM node goes away  </p> </li> <li> <p>reconciliation - DOM element:</p> <ul> <li>there are some under the hood differences between what happens with native DOM elements and component elements, React makes a distinction to these 2 types of elements</li> <li>when there is a native DOM element, a minor change is not a big deal, or adding / changing element attributes is done easily</li> <li>with a component, when something changes in the DOM React recursively looks at each child node 1 by 1 and decides if it needs to change anything </li> <li>if there is a component with list item as children, react will compare li1 to li1 and only change if the li(n) is different from li(n)</li> <li>a problem happens if a list adds a li to the beginning of the list, then React none of the li(n) will be equivalent to each other any longer and React will re-render the entire list, which may not be noticeable with a small list, but as that list grows the cost would become more noticeable</li> </ul> </li> <li> <p>to avoid unnecessarily rendering any DOM elements, we can give each element a key so React compares items by it's key instead of text content</p> </li> <li> <p>do not make component keys the list index: </p> <ul> <li>if a list is reversed in the app, React will think every component changed and re-render the entire list</li> <li>another situation is the list items content change but the index of it does not so React does not change them</li> <li>if do not have a unique id for your data, use something like lodash which will create a UUID for each item in your data</li> </ul> </li> </ul>"},{"location":"software/react/software-architecture/","title":"Software Architecture","text":""},{"location":"software/react/software-architecture/#basics","title":"basics","text":"<ul> <li>what is software architecture? </li> <li> <p>the word architecture is normally applied to a building, referring to the overall structure and large scale design of that building, compared to interior design, which would be more of the details inside the building</p> </li> <li> <p>when talking software architecture, it is the study of the broader structure, organization, and patterns of a development project - primarily the ones that impact developer productivity overtime (the latter part is where normal architecture and software architecture may diverge a little bit)</p> </li> </ul>"},{"location":"software/react/software-architecture/#normal-architecture","title":"normal architecture","text":"<ul> <li>design a building that fits constrained and required uses</li> <li>constraints include things like budget and zoning restrictions</li> <li>required uses is what the people using the building need it to do </li> <li>once finished the build will remain static over time</li> <li>it may be renovated every once in a while and there will be ongoing maintenance with the plumbing and electrical, but for the most part we are not going to make any drastic changes to it</li> </ul>"},{"location":"software/react/software-architecture/#software-architecture_1","title":"software architecture","text":"<ul> <li>design software that fits the constraints and required uses</li> <li>just like with regular architecture, the restraints can be things like budget </li> <li>the required uses are what people are designing that software to do in the first place </li> <li>will be constantly changing throughout its lifetime </li> <li>you are never going to get to the point where everybody is happy with it and no one wants to add anymore features </li> <li>managers and other stakeholders are always going to want to add other features </li> <li>this means we have to design our software in a way that will be easily changed over time </li> </ul>"},{"location":"software/react/software-architecture/#software-theory","title":"software theory","text":"<ul> <li>in theory software architecture is meant to be technology independent</li> <li>this means we design our programs without saying things like we have to use a certain database with it, or a certain front end framework with it </li> <li>this allows for more flexibility incase you want to change your technologies down the road </li> </ul>"},{"location":"software/react/state-management/","title":"Managing State in React","text":"<ul> <li> <p>immutability = not modifying a variable after it is created</p> <ul> <li>in Redux specifically, it means not mutating states directly</li> </ul> </li> </ul>"},{"location":"software/react/state-management/#most-popular-state-management-solutions","title":"most popular state management solutions:","text":"<ul> <li> <p>React:</p> <ul> <li>built in state management solutions</li> </ul> </li> <li> <p>Redux:</p> <ul> <li> <p>most popular option, emphasizes one-way data flow and immutability </p> </li> <li> <p>which means every time you change state, such as changing information on a user profile, what is returned to React is a copy of the old state with just the new thing changed, not simply the modification </p> </li> <li> <p>that might sound redundant or wasteful, but there are some great benefits that include undo and redo functionality and better debuggability</p> </li> </ul> </li> <li> <p>MobX:</p> <ul> <li> <p>appeals to those with knowledge and background in object-oriented programming </p> </li> <li> <p>uses the observer pattern which allows the system to build a dependency tree among different parts of state</p> </li> <li> <p>produces free rendering of components by just keeping track of what needs mutated</p> </li> </ul> </li> <li> <p>Apollo and GraphQL</p> </li> </ul>"},{"location":"software/react/state-management/#existing-solutions-in-react","title":"existing solutions in React","text":""},{"location":"software/react/state-management/#avoid-prematurely-adding-state-management-packages","title":"avoid prematurely adding state management packages","text":"<ul> <li> <p>as soon as you extend beyond basically functionality there is typically some need for a state management solution</p> </li> <li> <p>the main reason to use a state management solution, is that it manages business logic</p> </li> <li> <p>presentation logic:</p> <ul> <li> <p>logic that is associated with how components appear on a page </p> </li> <li> <p>when should a modal pop up? </p> </li> <li> <p>when should the color of a button change?</p> </li> <li> <p>does not have to do with the purpose of the application </p> </li> <li> <p>think of logic that is agnostic towards the applications purpose</p> </li> </ul> </li> <li> <p>business logic:</p> <ul> <li> <p>handling, manipulating, and storing business objects</p> </li> <li> <p>for example like in a todo app where a user needs to login, it could mean things like user accounts or items in a todo list </p> </li> <li> <p>unlike presentation logic, this is logic that is application-specific</p> </li> </ul> </li> <li> <p>handling business logic is the most common use case for introducing a state management library</p> </li> <li> <p>figuring out where to connect presentation and business logic can be pretty tricky: </p> <ul> <li> <p>we can run into all kinds of problems to solve</p> </li> <li> <p>how do we persist state for users between sessions?  </p> </li> <li> <p>how does React know that our data has changed and that we need to re-render the component</p> </li> </ul> </li> <li> <p>state management makes opinionated decisions for us, that allow us to work in a consistent system</p> </li> <li> <p>if you do not use a state management system, this would mean you store every part of your business logic in a React state</p> <ul> <li>this is not best practice </li> </ul> </li> </ul>"},{"location":"software/react/state-management/#the-power-of-setstate","title":"the power of setState()","text":""},{"location":"software/react/state-management/#data-fetching-using-only-react","title":"data fetching using only React","text":""},{"location":"software/react/state-management/#avoid-the-pitfall-of-prop-drilling","title":"avoid the pitfall of prop drilling","text":""},{"location":"software/react/state-management/#defining-context","title":"defining context","text":""},{"location":"software/react/state-management/#using-the-context-api","title":"using the context API","text":""},{"location":"software/react/state-management/#react-hooks-refactoring","title":"React Hooks: Refactoring","text":""},{"location":"software/react/state-management/#evolution-of-state-management","title":"Evolution of State Management","text":""},{"location":"software/react/state-management/#flux-wars-beginnings-of-redux","title":"Flux wars: beginnings of Redux","text":""},{"location":"software/react/state-management/#you-dont-need-redux","title":"you don't need Redux","text":""},{"location":"software/react/state-management/#redux-feature","title":"Redux feature","text":""},{"location":"software/react/state-management/#redux-feature-container","title":"Redux feature container","text":""},{"location":"software/react/state-management/#benefits-of-redux","title":"benefits of Redux","text":""},{"location":"software/react/state-management/#immutability-out-of-the-box","title":"immutability out of the box","text":""},{"location":"software/react/state-management/#benefits-of-redux-middleware","title":"benefits of Redux middleware","text":""},{"location":"software/react/state-management/#where-state-should-live-in-your-components","title":"where state should live in your components","text":""},{"location":"software/react/state-management/#debugging-with-redux","title":"debugging with Redux","text":""},{"location":"software/react/state-management/#react-and-redux-alternatives","title":"React and Redux Alternatives","text":""},{"location":"software/react/state-management/#mobx-ooj-statement-approach","title":"MobX: OOJ statement approach","text":""},{"location":"software/react/state-management/#apollo-link-state-state-management-with-graphql","title":"Apollo Link State: state management with GraphQL","text":""},{"location":"software/typescript/","title":"TypeScript ( TS )","text":"<p>static typing for JavaScript ( JS )</p> <ul> <li>npm install -g typescript</li> <li>tsc hello.ts </li> </ul>"},{"location":"software/typescript/#about","title":"about","text":"<ul> <li>the goal of TS is to be a static type checker for JS</li> <li>JS has been around for over 20 years</li> <li>JS has some peculiar runtime semantics and quirks</li> <li>managing large code bases in JS gets difficult to manage at scale</li> <li>the most common type of error that programmers write can be described as type errors</li> <li>a type error is when a certain type of value was used where a different type was expected ( 10 = 5 + '5' )</li> <li>TS is a tool that runs before JS code runs ( static ) and ensures that the types in the program are correct ( typechecked )</li> <li>when JS code is ran, the runtime knows what to do by figuring out the types of the values in the code</li> <li>the type of a value tells our code what behaviors and capabilities a binding has</li> <li>TS will also add massive editor support for auto completion and code hints</li> </ul>"},{"location":"software/typescript/#benefits","title":"benefits","text":"<p>reduce mental overhead and mistakes</p> <pre><code>// Accessing the property 'toLowerCase'\n// on 'message' and then calling it\nmessage.toLowerCase();\n// Calling 'message' which is a silly mistake, which TS help avoid without thinking about it\nmessage();\n</code></pre> <ul> <li>we have to remember alot of mental notes for the above code </li> <li>is message callable?</li> <li>does it have property lowercase on it?</li> <li>is toLowerCase callable?</li> <li>what does lowerCase return?</li> <li>the above questions might be a super simple block but what about a project with hundreds of lines of code and multiple files of it?</li> </ul>"},{"location":"software/typescript/#ts-vs-js-errors","title":"TS vs JS errors","text":"<ul> <li>TS can catch spelling errors much easier</li> <li>TS can catch uncalled functions from forgetting the closing parenthesis</li> </ul> <p><pre><code>const user = {\nname: \"Daniel\",\nage: 26,\n};\nuser.location;\n</code></pre> - in JS the above code would not throw an undefined error - in TS the above code would throw a specific property \"location\" does not exist error</p>"},{"location":"software/typescript/essentials/","title":"TypeScript Essentials","text":"<ul> <li> <p>designed to be fully compatible with JS</p> </li> <li> <p>TS tooling is fully cross-platform</p> </li> <li> <p>TS is a superset of JS, which means it is an extension of JS, adding new features and syntax on top of the core language</p> </li> </ul>"},{"location":"software/typescript/essentials/#introducing-ts","title":"introducing TS","text":"<ul> <li>TS is a super set of the JS programming language that adds the concept of static typing to the core features of JS</li> <li>JS is and always has been a dynamically typed language</li> <li>both static and dynamic languages rely on types (definitions of data structures and behaviors to ensure their programs are correct)</li> <li>the different kinds of typed languages validate types in different ways</li> <li>dynamic languages:</li> <li>aim to be much more forgiving at development time, relying on the concept of duck typing to validate that a particular object can be used a certain way</li> <li>duck typing refers to the idea that if it looks like a duck, walks like a duck, and quacks like a duck, it must be a duck</li> <li> <p>the net result of this approach is that tools do not have enough information to catch errors before the application runs</p> </li> <li> <p>statically typed languages:</p> </li> <li>more rigid than dynamic</li> <li>aim to catch errors before the code is executed</li> <li>they do this by imposing restrictions on how you can interact with objects forcing you to clearly specify everything about the object that you are going to interact with</li> <li> <p>in the static world you cannot just call a \"quack\" method on any object, you must first explicitly define a type that has that \"quack\" method as well as any parameters that need to be passed into that method, not to mention the value that the \"quack\" method will return to its callers</p> </li> <li> <p>tsconfig.json</p> </li> <li> <p>a configuration object with config values</p> </li> <li>typescript compiler automatically looks for this file when it starts and if it does it treats the whole folder and any subfolders as one project</li> <li>with this file we no longer have to tell typescript which files to watch when running <code>tsc -w</code></li> </ul> <pre><code>{\n\"compilerOptions\": {\n\"target\": \"es5\",\n\"module\": \"system\"\n}\n}\n</code></pre>"},{"location":"software/typescript/essentials/#es6-language-features","title":"ES6 language features","text":""},{"location":"software/typescript/essentials/#reviewing-es6-language-features","title":"reviewing ES6 language features","text":"<ul> <li>TS provides the ability to leverage a handful of ECMAScript 6 and ES7 features that aren't yet widely supported and compile them down to ES5 compatible JS</li> </ul>"},{"location":"software/typescript/essentials/#default-optional-parameters","title":"default / optional parameters","text":"<ul> <li>allows you to specify a default value for a given a parameter</li> </ul>"},{"location":"software/typescript/essentials/#template-strings","title":"template strings","text":"<ul> <li>allows inserting variables directly into strings, gives ability to more easily programmatically render HTML to the DOM</li> </ul>"},{"location":"software/typescript/essentials/#let-and-const","title":"let and const","text":"<ul> <li>the var keyword has sometimes undesirable behavior, it is accessible outside of scopes that other languages would never make possible</li> <li>using the let keyword changes variable assignment to behave more like other programming language</li> <li>const means to create a variable and not let it change</li> </ul>"},{"location":"software/typescript/essentials/#forof-loops","title":"for...of loops","text":"<ul> <li>used to loop over an array with smoother syntax</li> </ul> <pre><code>var array = [\n\"learn typescript\",\n\"learn typescript more\",\n\"practice typescript\"\n]\n\nfor (var index in array ) {\nvar value = array[index];\nconsole.log(`${index}: ${value}`);\n}\n\nfor (var value of array) {\nconsole.log(`${value}`)\n\n}\n</code></pre>"},{"location":"software/typescript/essentials/#lambdas","title":"lambdas","text":"<ul> <li>the this keyword has strange behavior compared to most programming languages</li> <li>arrow functions allow us to get around the this keyword with cleaner syntax</li> </ul> <pre><code>var container = document.getElementById('container');\nvar container2 = document.getElementById('container2');\n\nfunction Counter(el){\nthis.count = 0;\n\nel.innerHTML = this.count;\n\nlet _this = this;\n\nel.addEventListener(\"click\", function () {\n_this.count += 1\nel.innerHTML = _this.count;\n\n}\n)\n}\n\nnew Counter(container)\n\nfunction Counter2(el) {\nthis.count = 0;\n\nel.innerHTML = this.count;\n\nel.addEventListener('click', () =&gt; {\nthis.count += 1;\nel.innerHTML = this.count;\n})\n}\n\nnew Counter2(container2)\n\nconst filtered = [-1, 1,2,3].filter(x =&gt; x &gt; 0)\n\nconsole.log(filtered)\n</code></pre> <ul> <li>arrow \"lambda\" functions / anonymous functions return their output automatically</li> </ul>"},{"location":"software/typescript/essentials/#destructuring","title":"destructuring","text":"<ul> <li>the ability to assign values to multiple variable from a single object with a single statement</li> <li>think of destructuring as the reverse of creating a bunch of variables and combining them into an array</li> <li>swapping values also becomes easier, instead of having to use a temporary value to hold the first value we swap</li> </ul> <pre><code>var array = [123, \"learn typescript more\", false]\n\nvar [id, chore, completed] = array;\n\nconsole.log(array)\nconsole.log(id, chore, completed)\n\nlet a = \"yes\";\nlet b = \"no\";\nconsole.log(a,b)\n\nvar temp = a;\na = b;\nb = temp;\nconsole.log(a,b);\n\nvar c = \"yes\";\nvar d = \"no\";\nconsole.log(c ,d );\n\n[ c, d ] = [ d, c ];\n\nconsole.log( c , d );\n\nvar todo = {\nid: 123,\nchore: \"learn more ts\",\ncompleted: false\n};\n\nvar {id, chore, completed} = todo;\n\nconsole.log(id,chore,completed)\n</code></pre> <ul> <li>can use to destructure parameters as well</li> </ul>"},{"location":"software/typescript/essentials/#spread-operator","title":"spread operator","text":"<ul> <li>can use in a function to accept any number of arguments</li> <li>used for cleaner array syntax, such as adding and removing items, or adding 2 arrays together</li> </ul>"},{"location":"software/typescript/essentials/#computed-properties","title":"computed properties","text":"<ul> <li>allows you to define a property on an object with a name that is computed dynamically at runtime</li> <li>this allows to create dynamic variable names, which can be helpful when scraping users data and you want to use each users username as its variable name, however you do not know what all the usernames are going to be yet</li> </ul>"},{"location":"software/typescript/essentials/#type-fundamentals","title":"type fundamentals","text":""},{"location":"software/typescript/essentials/#js-types","title":"JS types","text":"<ul> <li>primitive values (immutable) = boolean, number, string</li> <li>null / undefined</li> <li>object (many thought of types are actually just different kinds of objects)</li> <li>as an object oriented lang, JS offers the ability to share properties and behaviors between different types through inheritance, called prototypical inheritance</li> <li>prototypical inheritance means that an object is defined that contains the base properties and behavior to be shared and when new instances of that type are created, JS links those new instances to the properties and behaviors of the base class</li> <li>not all JS objects must be created from a constructor that has a prototype</li> <li>an object literal is a simple way to define a JS object</li> <li>an object literal is nothing more than a way to define an instantiate an object all at the same time</li> </ul>"},{"location":"software/typescript/essentials/#understanding-type-inference","title":"understanding type inference","text":"<ul> <li>static analysis means that regardless of whether you explicitly define types or not, TS looks through your code doing its best to guess / infer what type any given object could be</li> <li>TS will automatically enforce inferred types</li> <li>TS will infer the type of function return values as well</li> <li>when TS cannot infer what a type might be, then it just calls it the any type, which is the most dynamic and nonrestrictive type available</li> <li>the any type is basically the default dynamic type of JS</li> <li>you can use any type to reassign variables to values of different types</li> <li>you lose any and all help that TS provides when using an any type, TS would not even catch things like misspellings so the any type should only be used when absolutely necessary</li> </ul>"},{"location":"software/typescript/essentials/#specifying-js-types","title":"specifying JS types","text":"<ul> <li>the more specific you are in your intent, the better the type system can help you find mistakes</li> </ul> <pre><code>function arrayPlusString(x: any[], y: string): number {\nvar total:number = x.length + y.length;\nreturn total\n}\n</code></pre>"},{"location":"software/typescript/essentials/#specifying-function-parameter-types","title":"specifying function parameter types","text":"<ul> <li> <p>union types allow arguments to accept multiple types with the pipe operator (|)</p> </li> <li> <p>TS will limit methods on union types, use instanceof operator first if needed</p> </li> <li>this is known as the type-guard syntax</li> </ul> <pre><code>function totalLength(x: string, y: string): number\nfunction totalLength(x:  any[], y:  any[]): number\nfunction totalLength(x: (string | any[]), y: (string | any[])): number {\nvar total:number = x.length + y.length;\n\nx.slice(0);\n\nif ( x instanceof Array ) {\nx.push('abc')\n}\n\nif ( x instanceof String ) {\nx.substr(1);\n}\n\n\nreturn total;\n}\n\nconsole.log(totalLength(\"hello \", \"there\"))\n</code></pre> <ul> <li>function overloads allow us to define possible function parameter values before it is created</li> </ul>"},{"location":"software/typescript/essentials/#custom-types","title":"custom types","text":"<ul> <li> <p>you can define custom types that describe the data structures and behavior that your application uses</p> </li> <li> <p>TS defines 3 ways to define a custom type, interfaces, classes and enums</p> </li> </ul>"},{"location":"software/typescript/essentials/#defining-custom-types-with-interfaces","title":"defining custom types with interfaces","text":"<ul> <li> <p>an interface acts as a contract that describes the data and the behaviors that the object exposes for others to interact with</p> </li> <li> <p>interfaces are strictly used for compile-time checks only and have no effect on the code at runtime</p> </li> <li> <p>consider interfaces as a way to tell TS more information about objects to help you check more errors at build time, but do not ever rely on them being there at runtime</p> </li> <li> <p>the first thing that typescript does when it compiles the final JS output is to strip out all of the interface definitions</p> </li> <li> <p>normal syntax: <code>var todo:Todo = {};</code></p> </li> <li> <p>casting syntax: <code>var todo = &lt;Todo&gt;{};</code></p> </li> </ul> <pre><code>function totalLength(x: string, y: string): number\nfunction totalLength(x:  any[], y:  any[]): number\nfunction totalLength(x: (string | any[]), y: (string | any[])): number {\nvar total:number = x.length + y.length;\n\nx.slice(0);\n\nif ( x instanceof Array ) {\nx.push('abc')\n}\n\nif ( x instanceof String ) {\nx.substr(1);\n}\n\n\nreturn total;\n}\n\nconsole.log(totalLength(\"hello \", \"there\"))\n</code></pre>"},{"location":"software/typescript/essentials/#using-interfaces-to-describe-functions","title":"using interfaces to describe functions","text":"<ul> <li>JS are there own objects that can have their own properties and methods as well</li> </ul>"},{"location":"software/typescript/essentials/#extending-interface-definitions","title":"extending interface definitions","text":"<ul> <li>you can extend definitions of 3rd party libraries when needed, such as adding a new method to an already existing interface</li> </ul>"},{"location":"software/typescript/essentials/#defining-constant-values-with-enums","title":"defining constant values with enums","text":"<ul> <li> <p>enums in TS act pretty much the same as other languages such as java and c#</p> </li> <li> <p>enums are a way to define a set of meaningful and constant values that you can use to replace the magic strings and numbers that you would otherwise use</p> </li> <li> <p>a magic value a number or string in our code that means something, such as:</p> </li> <li>1 means stop</li> <li>2 means slow down</li> <li>3 means go</li> <li>4 means broken</li> <li>these values might mean something to the developer writing it, but mean nothing to future developers working on the project unless there is some good comments explaining it, or they can infer meanings by studying the code</li> <li>enums give us a way to describe these values so they are more efficient to use for ourselves and others down the road</li> </ul> <pre><code>enum TodoState { New = 1, Active, Complete, Deleted };\n\ninterface Todo {\nname: string;\nstate: TodoState;\n}\n\n\n\nvar todo: Todo = {\nname: \"practice typescript\",\nstate: TodoState.New\n};\n\nfunction deleteTodo (todo: Todo) {\nif (todo.state != TodoState.Complete) {\nthrow \"Can't delete incomplete task!\"\n}\n}\n</code></pre> <ul> <li>you can declare interfaces right inline anywhere that accepts a type, which is called an anonymous type</li> </ul>"},{"location":"software/typescript/essentials/#classes","title":"classes","text":""},{"location":"software/typescript/essentials/#understanding-prototypical-inheritance","title":"understanding prototypical inheritance","text":"<ul> <li> <p>object-oriented functionality includes inheritance, abstraction, and encapsulation</p> </li> <li> <p>TS does not introduce the concept of a class, ECMAScript 6 did</p> </li> <li> <p>it is crucial to understand that although JS does have the class keyword syntax, it is all just syntactic sugar, and does not change the fact that JS is based on objects and prototypical inheritance</p> </li> <li> <p>JS is prototype-based programming</p> </li> <li> <p>prototype-based programming all starts with a special object called the prototype</p> </li> <li> <p>if you want to share behavior between object instances, you define that behavior on the prototype object</p> <ul> <li>you then link other instances to that object</li> </ul> </li> <li> <p>in JS objects are just bags of dynamic properties, which means accessing a member of an object is not as simple as testing whether or not that member exists</p> <ul> <li> <p>whenever you attempt to access any member of an object, regardless of whether it is a method or a value field, JS tries as hard as it can to find the member that you are looking for </p> </li> <li> <p>first, JS looks for the member on the object itself, just like you asked it to </p> </li> <li> <p>if it finds a member with that name on the object you reference, then great. It acccess that member and its done </p> </li> <li> <p>however if JS does not find a matching member on that object, it will not give up there </p> </li> <li> <p>JS will then look at the object's prototype object to see if the member exists on that object </p> </li> <li> <p>if a member of that name exists on the prototype, then JS refers to that member and it is done</p> </li> <li> <p>Otherwise it accesses the prototype's prototype, and the cycle continues all the way up the chain until reaches the root of everything, the object prototype</p> </li> <li> <p>Object.prototype is actually an object that you can see and interact with </p> </li> <li> <p>if you type Object.prototype in the console, everything that you see will be available to all other JS objects </p> </li> </ul> </li> <li> <p>where does this special prototype object come from, and how and when is it assigned to my objects? </p> <ul> <li> <p>most of the time the prototype is assigned to your objects for you </p> </li> <li> <p>the more complex answer is that there are actually quite a few ways that prototype objects get assigned </p> </li> <li> <p>when JS creates any object, even an object literal, it automatically links its prototype object to the Object.prototype, the same is true about the other 2 special types of objects, functions and arrays</p> </li> <li> <p>when JS creates objects with functions and arrays, it links them to the Function.prototype and Array.prototype objects (respectively)</p> </li> <li> <p>this allows all functions and arrays to share common behavior, such as all arrays having the slice method and all functions having the bind method </p> </li> </ul> </li> <li> <p>the most common way JS assigns a prototype to an object is with a constructor, which is really just a function that is called with the new keyword </p> </li> <li> <p>whem you initialize an object with a new keyword, JS does 3 things:</p> <ol> <li> <p>creates a new object </p> </li> <li> <p>sets the new object's prototype to the constructor functions prototype</p> </li> <li> <p>executes the function that you called with the new keyword, referring to the new object as this within that method </p> </li> </ol> </li> </ul>"},{"location":"software/typescript/essentials/#defining-a-class","title":"defining a class","text":"<ul> <li> <p>classes allow you to define prototypical behavior in a much simpler way </p> </li> <li> <p>original prototyping way: </p> </li> </ul> <pre><code>function TodoService() {\nthis.todos = [];\n}\n\nTodoService.prototype.getAll = function () {\nreturn this.todos;\n}\n\nvar service = new TodoService();\n\nservice.getAll()\n</code></pre> <ul> <li> <p>you can use use all TS features to extend ECMAScript6 class syntax with additional static type information </p> </li> <li> <p>in the prototype based syntax, the constructor function is simply the function that you attach all of the prototype behavior to </p> </li> <li> <p>in order to define a constructor function using the class syntax, you simply define a method with the name constructor </p> </li> <li> <p>at somepoint you may need to maintain a single same value across multiple components, ot many instances of 1 type of component </p> </li> <li> <p>in other languages you would refer to these kinds of variables at static members </p> </li> <li> <p>for years the easiest and most common way to implement static variables was to simply create a variable in the global namespace </p> </li> <li> <p>global variables are now generally considered to be considered bad practice, and avoided at all costs</p> </li> <li> <p>modern JS the more accepted common practice of defining a static variable is to attach it to an object, especially the function that is going to use it the most </p> </li> <li> <p>prior to the ECMAScript6 syntax when creating a constructor function and attaching behavior to it via its prototype, the lastId variable would be attached directly onto the constructor function itself</p> </li> <li> <p>new class way with TS:</p> </li> </ul> <pre><code>interface Todo {\nname: string;\nstate: boolean;\n}\n\n\nclass TodoService {\n\nstatic lastId: number = 0;\n\nconstructor(private todos: Todo[]) { }\n\nadd(todo: Todo) {\nvar newId = TodoService.getNextId();\n}\n\ngetAll() {\nreturn this.todos;\n}\n\nstatic getNextId() {\nreturn TodoService.lastId += 1;\n}\n}\n</code></pre>"},{"location":"software/typescript/essentials/#making-properties-smarter-with-accessors","title":"making properties smarter with accessors","text":"<ul> <li>getters and setters make it easier to apply logic when changing properties inside classes / objects </li> </ul>"},{"location":"software/typescript/essentials/#inheriting-behavior","title":"inheriting behavior","text":"<ul> <li> <p>a statemachine is a design pattern for managing state</p> </li> <li> <p>use the extend keyword to extend a class</p> </li> <li> <p>the reason for inheriting from a base class is to extend and / or override its behavior</p> </li> <li> <p>you do not have to call constructor on the derived class, BUT if you do, you have to call it on the base class </p> </li> <li> <p>use the super keyword to call constructor on the base class </p> </li> <li> <p>make changes to methods by calling super inside of the method definition</p> </li> </ul>"},{"location":"software/typescript/essentials/#implementing-an-abstract-class","title":"implementing an abstract class","text":"<ul> <li> <p>an abstract class is a class that is only created to be a base class for future classes </p> </li> <li> <p>use the abstract keyword to implement an abstract class </p> </li> <li> <p>use the abstract keyword before methods to define that any future derived classes need to implement their own version of that method </p> </li> <li> <p>TS supports abstract classes, JS does not </p> </li> </ul>"},{"location":"software/typescript/essentials/#controlling-visibility-with-access-modifiers","title":"controlling visibility with access modifiers","text":"<ul> <li> <p>the private keyword is an access modifier, used to hide members of a classfrom being accessed outside of that class</p> </li> <li> <p>you can apply access modifiers to any member of a Typescript class, including constructor parameters, methods, properties, static properties, getters, setters</p> </li> <li> <p>both the getter and the setter must be either private or public</p> </li> <li> <p>TS offers 3 access modifiers to describe how much you want to protect the members of your classes</p> </li> <li> <p>the access modifiers are private, protected, and public</p> </li> <li> <p>the private modifier is the most restrictive modifier of the 3 </p> <ul> <li> <p>placing a private modifier on a member means that only methods defined directly on the same class definition may access that member </p> </li> <li> <p>TS will complain if any other type, including types that inherit or extend from that class, attempt access the member </p> </li> </ul> </li> <li> <p>the protected modifier is smiliar to the private modifier in that only methods defined on the same class may access the member, but it expands this definition to any classes that inherit or extend from this class </p> </li> <li> <p>the public modifier is the least restrictive of all</p> <ul> <li> <p>a member with public access may be accessed from any other type </p> </li> <li> <p>the public modifier basically just decribes the default behavior of JS </p> </li> <li> <p>public is the default access modifier so you probably will not see it much </p> </li> <li> <p>the 1 case you might see the public modifier more often is applying it to a constructor parameter</p> </li> </ul> </li> <li> <p>JS does not actually support access modifiers</p> </li> <li> <p>TS is a superset of JS, which means that it does not change how JS works</p> </li> <li> <p>TS is able to let us use access modifiers just for development, to ensure better practices and less bugs in our code, express our intent and work with other developers and our code better in the future</p> </li> </ul>"},{"location":"software/typescript/essentials/#implementing-interfaces","title":"implementing interfaces","text":"<ul> <li> <p>the primary reason that interfaces exist in a statically typed langauge is to attach them to classes </p> </li> <li> <p>because TS understands and implements JS native duck typing behavior, you do not actually have to do anything in order to make use of an interface </p> <ul> <li> <p>by simply applying the interface to the variables and the return values in which you expect to adhere to that interface, TS will automatically inspect every object that you attempt to assign to that variable or attempt to return as a return value </p> </li> <li> <p>when the object structure matches the interface you've defined, then it really does not matter what the type of the object is, everything is fine </p> </li> <li> <p>if the object structure does not match the interface, such as missing properties or methods that the interface expects, or the type of properties do not match, TS will yell at you, that you have attempted to use an object that does not match the interface </p> </li> </ul> </li> <li> <p>even though you don't always have to apply type information for TS to work, the more explicit you are, the better</p> </li> <li> <p>a class can implement multiple interfaces at once </p> </li> </ul>"},{"location":"software/typescript/essentials/#generics","title":"generics","text":""},{"location":"software/typescript/essentials/#introducing-generics","title":"introducing generics","text":"<ul> <li> <p>TS offers generics, which C# and Java offer as well</p> </li> <li> <p>generics are a way to create functions and classes that define a behavior that can be reused across many different types, while retaining the full information about that type</p> </li> <li> <p>create a generic by using <code>&lt;$name&gt;</code> after the function name but before the parameter parenthesis, this tells TS that you will be referring to a generic type in this function and you will be referring to that type by $name </p> </li> <li> <p>many people use <code>&lt;T&gt;</code> by covention, but any variable name is acceptable </p> </li> <li> <p>with a generic type defined, it can be used throughout the method any place that a regular type would be used, like on the methods parameter</p> </li> <li> <p>a generic type is good for telling TS that the input type and return type of a function will always be the same </p> </li> <li> <p>a generic type is not a specific type but is determined by TS each time it is used in a function to do things like ensure matching types of a parameter value and return value in a function where it could accept any time (such as a JSON.stringify function) </p> </li> <li> <p>whenever you see a place in your application where you seem to be copying the same code over and over, and all you are doing differently in each version is simply changing which type you are using, then that might be a great oppurtunity to reduce that duplicated code into a single generic function </p> </li> </ul> <pre><code>function clone&lt;T&gt;(value: T): T {\nlet serialized = JSON.stringify(value);\nreturn JSON.parse(serialized);\n}\n</code></pre>"},{"location":"software/typescript/essentials/#creating-generic-classes","title":"creating generic classes","text":"<ul> <li> <p>generics can be applied to classes as well </p> </li> <li> <p>TS treats the JS builtin Array type as a generic class </p> </li> <li> <p>below is just 2 different syntax for exactly the same thing</p> </li> </ul> <pre><code>var syntax1: number[] = [ 1, 2, 3 ]\n\nvar syntax2: Array&lt;number&gt; = [ 1, 2, 3 ]\n</code></pre> <ul> <li>generic classes are good for key value pair classes</li> </ul> <pre><code>class KeyValuePair&lt;Tkey, Tvalue&gt; {\n\nconstructor( public key: Tkey, public value: Tvalue ){}\n\n}\n\nlet pair01 = new KeyValuePair('id', 1);\nlet pair02 = new KeyValuePair('joined', Date.now());\nlet pair03 = new KeyValuePair('name', 'jack');\n\nlet pair1 = new KeyValuePair&lt;string, 1&gt;('id', 1);\nlet pair2 = new KeyValuePair&lt;number, Date&gt;('joined', new Date(Date.now()));\nlet pair3 = new KeyValuePair&lt;string, string&gt;('name', 'jack');\n\nclass KeyValuePairPrinte&lt;T, U&gt; {\nconstructor(private pairs: KeyValuePair&lt;T, U&gt;[]) {}\n\nprint() {\nfor (let p of this.pairs) {\nconsole.log(`${p.key}: ${p.value}`)\n}\n}\n}\n</code></pre> <ul> <li>a great way to group generic methods that all operate on the same types of objects</li> </ul>"},{"location":"software/typescript/essentials/#applying-generic-constraints","title":"applying generic constraints","text":"<ul> <li> <p>TS offers the concept of generic restraints that you can apply to your generic type parameters, to dissallow certain types of values</p> </li> <li> <p>apply generic constraints with the extends keyword</p> </li> <li> <p>you can place restraints on your generic types to limit the type parameters that consumers of your generic functions or classes can apply</p> </li> <li> <p>you cannot refer to generic parameters that you defined in the same type list</p> </li> </ul>"},{"location":"software/typescript/essentials/#modules","title":"modules","text":""},{"location":"software/typescript/essentials/#understanding-the-need-for-modules-in-js","title":"understanding the need for modules in JS","text":"<ul> <li> <p>JS has been around for over 20 years  </p> </li> <li> <p>only recently has the industry started to really take JS seriously and started to apply patterns, practices, and development standards for working in the browser </p> </li> <li> <p>a big problem that exists is putting all of your code in the global namespace</p> </li> <li> <p>putting all of your code in the global namespace encourages you to create all sorts of dependencies between components simply because you can</p> </li> <li> <p>global namespace is bad because:</p> <ul> <li> <p>encourages implicit sharing between components</p> </li> <li> <p>difficult to determine component boundaries</p> </li> <li> <p>difficult to determine component dependencies</p> </li> </ul> </li> <li> <p>global namespace can create what is known as spaghetti code, where your entire application just becomes 1 giant ball of intertwined threads, without anyway of telling where one component begins and another ends</p> </li> <li> <p>to avoid spaghetti code, many first class languages have some kind of mechanism to modularize code, to keep components seperate from one another and distinguish between 2 components that may share the same name but are otherwise completely different</p> </li> <li> <p>learning JS design patterns is an awesome free book</p> </li> <li> <p>JS encapsulattion methods: </p> <ul> <li> <p>module pattern / revealing module pattern </p> </li> <li> <p>namespaces</p> </li> <li> <p>ECMAScript 2015 modules / module loaders</p> </li> </ul> </li> </ul>"},{"location":"software/typescript/essentials/#organizing-your-code-with-namespaces","title":"organizing your code with namespaces","text":"<ul> <li> <p>TS offers a few ways to better encapsulate and organize your code</p> </li> <li> <p>namespaces is the simplest way to organize your code better </p> </li> <li> <p>putting variables inside of a namespace will hide that variable from code outside of the namespace </p> </li> </ul>"},{"location":"software/typescript/essentials/#using-namespaces-to-encapsulate-private-members","title":"using namespaces to encapsulate private members","text":"<ul> <li> <p>seperate classes into different files and place variables inside namespace to make completely private from any other code in the project</p> </li> <li> <p>the namepspace approach is also referred to as the \"internal module approach\"</p> </li> </ul>"},{"location":"software/typescript/essentials/#understanding-the-difference-between-internal-and-external-modules","title":"understanding the difference between internal and external modules","text":"<ul> <li> <p>internal vs external modules approach:</p> <ul> <li> <p>both encourage encapsulation and organization</p> </li> <li> <p>internal uses namespaces to scope variables </p> </li> <li> <p>external uses the file itself to scope variables</p> </li> <li> <p>all modules are only available within the namespace by default and must be exported to be available to other modules </p> </li> </ul> </li> <li> <p>TS supports CommonJS syntax and ECMAScript 2015 syntax</p> </li> </ul>"},{"location":"software/typescript/essentials/#using-modules","title":"using modules","text":"<ul> <li> <p>add module option to tsconfig</p> </li> <li> <p>CommonJS = <code>import Model = require('./model');</code></p> </li> <li> <p>ECMAScript 2015 = <code>import * as Model from './model';</code> or <code>import { Todo, User } from './model'</code></p> </li> </ul>"},{"location":"software/typescript/essentials/#extras","title":"extras","text":""},{"location":"software/typescript/essentials/#debugging-ts-with-source-maps","title":"debugging TS with source maps","text":"<ul> <li> <p>an emerging browser feature </p> </li> <li> <p>allows language compilers to tell browsers where exactly a particular variable or expression lives in the original source code, regardless what that source code is </p> </li> <li> <p>setting the sourceMap complier option to true creates an additional map file along with every JS file </p> </li> </ul>"},{"location":"software/typescript/essentials/#decorators","title":"decorators","text":"<ul> <li> <p>a proposed ECMAScript syntax that allow you to implement the decorator design pattern to modify the behavior of a class, method, property, or parameter in a declarative fashion </p> </li> <li> <p>this powerful approach allows you to define common behavior in a central place and then easily apply it across your application to reduce duplicate code and make your code more readable and maintable, all at the same time </p> </li> <li> <p>a decorator is just a function with a special signature</p> </li> <li> <p>decorators support 4 different targets, classes, methods, properties, parameters</p> </li> </ul>"},{"location":"software/vim/","title":"Vim Text Editor","text":"<p>Vi IMproved</p> <p>non-exhaustive documentation</p>"},{"location":"software/vim/#about-vim","title":"about Vim","text":"<ul> <li>acronym for Vi IMproved</li> <li>free and open source text editor written by Bram Moolenaar </li> <li>was first released in 1991 for UNIX variants</li> <li>main goal was to provide enhancement to the Vi editor</li> <li>Vi editor was released 1976, by Bill Joy</li> <li>modal editor, which means it has different modes or ways to edit text</li> <li>command centric editor that is available everywhere</li> <li>Vim traditionally does not have GUI but now there is separate installer called gVim which provides GUI</li> </ul>"},{"location":"software/vim/#modes-and-features","title":"modes and features","text":"<ul> <li>command mode is the default mode Vim starts in when first opened </li> <li>insert mode is used to enter text, press i to start this mode</li> <li>command line mode is used to type commands, press : to start this mode</li> <li>visual mode is used to visually select text and run commands on selected lines or sections</li> </ul>"},{"location":"software/vim/#features","title":"features","text":"<ul> <li>memory footprint is very low</li> <li>command centric so performing complex text manipulations is quick and easy</li> <li>highly configurable and uses simple text files to store its configuration</li> <li>there are many plug-in available for Vim</li> <li>functionality can be extended in greatly using plug-ins</li> <li>supports multiple windows and can be split into multiple windows</li> <li>supports multiple buffers</li> <li>supports multiple tabs </li> <li>supports recording features which allows to record and play Vim commands in repeated manner</li> </ul>"},{"location":"software/vim/#general-commands","title":"general commands","text":"<p>Vim supports h l  j  k as well as arrow keys for moving cursor</p> <ul> <li>i ( change to insert mode )</li> <li>esc ( change to command mode, default when opening Vim )</li> <li>: ( change to command line mode )</li> <li>v ( change to visual line mode )</li> <li> <p>ZZ ( save and quit )</p> </li> <li> <p>h ( move cursor left )</p> </li> <li>l ( move cursor right )</li> <li>k ( move cursor up a line )</li> <li>j ( move cursor down a line )</li> <li>0 ( move cursor to beginning of current line )</li> <li> <p>$ ( move cursor to end of current line )</p> </li> <li> <p>i ( insert, cursor starts at beginning of current character )</p> </li> <li>I ( insert at beginning of line, cursor starts at beginning of current line )</li> <li>a ( insert / append, cursor starts after current character )</li> <li>A ( insert / append to end line, cursor starts at end of line )</li> <li>o ( insert / open, cursor starts on new line below )</li> <li>O ( insert / open, cursor starts on new line above )</li> <li>s ( substitute current character then enter insert mode )</li> <li>S ( substitute current line then enter insert mode )</li> <li>cc ( change line, delete current line then enter insert mode )</li> <li>r MYCHAR ( replaces the character under the cursor with MYCHAR )</li> </ul>"},{"location":"software/vim/#command-line-mode","title":"command-line mode","text":"<ul> <li>:e Load new file in buffer for editing</li> <li>:edit Same as :e</li> <li>:e  List the files for editing from current directory <li>:edit  Same as :e  <li>:edit  ( loads or creates new file with name ) <li>:view  ( loads or creates new file with name  in read-only mode ) <li>:w ( save file )</li> <li>:w  ( save file with name ) <li>:q ( quit )</li> <li>:q! ( quit without saving ) </li> <li>:wq ( saves and quits )</li> <li>:help ( opens the help menu )</li>"},{"location":"software/vim/#tabs","title":"tabs","text":"<ul> <li>:tabnew  ( open  in new tab ) <li>:tabclose ( close current tab )</li> <li>:tabnext ( move to the next tab )</li> <li>:tabprevious ( move to the previous tab )</li> <li>:tabfirst ( move to the first tab )</li> <li>:tablast ( move to the last tab )</li>"},{"location":"software/vim/#buffers","title":"buffers","text":"<ul> <li>:badd  add  into new buffer ) <li>:bN ( switch to Nth buffer )</li> <li>:bnext ( move to the next buffer in buffer list )</li> <li>:bprevious ( move to the previous buffer in buffer list )</li> <li>:buffers ( list all buffers )</li> <li>:bfirst ( move to the first buffer )</li> <li>:blast ( move to the last buffer )</li> <li>:ball ( load all buffers )</li>"},{"location":"software/vim/#windows","title":"windows","text":"<ul> <li>:new ( open new window )</li> <li>:new  ( open file in new window )"},{"location":"software/vim/learning-vim/","title":"Learning Vim","text":""},{"location":"software/vim/learning-vim/#lindy-effect","title":"Lindy Effect","text":"<ul> <li>the longer a technology has been around, the more likely it is to remain in use</li> </ul>"},{"location":"software/vim/learning-vim/#buffers-tabs-windows","title":"buffers tabs windows","text":"<ul> <li>a buffer is a file which is loaded into memory </li> <li>a buffer in vim is like a tab in other text editors</li> <li>use :vsplit to open a new window, which is a window into the same buffer you split from </li> <li>making a change in one buffer window will change the other buffer window as well (since they are the same buffer )</li> <li>:tabnew % will open a new tab with the current buffer</li> <li>:tabnew will open a new tab with an empty file</li> <li>buffers are how we track all of the files we currently have opened in vim</li> <li>tabs are more of a way of organizing how we navigate the buffers, or maybe have one 2 projects open at 1 time, which all the files we are editing from all the tabs will be included in our list of buffers</li> <li>gt switches between tabs </li> <li>opening a new tab and a new buffer, and then closing that tab, will still keep that buffer in vims memory for us to continue editing</li> <li>people want to think of tabs as collections of buffers (but they are not, unfortunately)</li> </ul>"},{"location":"software/vim/learning-vim/#abbreviations","title":"abbreviations","text":"<ul> <li>:abb mygmail justinaawd@gmail.com = auto expands mygmail to justinaawd@gmail.com</li> <li>use ctrl+v+ space to stop the abbreviation from expanding</li> <li>use abbreviations to autocorrect commonly misspelled words</li> <li>:abb succes success </li> <li>:abb sucess success </li> </ul>"},{"location":"software/vim/learning-vim/#commands-from-vim","title":"commands from vim","text":"<ul> <li>:! ls = runs ls and displays the output</li> <li>:! touch testing.txt = creates new file named testing.txt</li> <li>:! rm testing.txt = removes testing.txt</li> <li>:com! PY3 ! python3 % = :PY3 runs current file with python3</li> <li>:comm! WC ! wc % = :WC counts words in current file</li> </ul>"},{"location":"software/vim/learning-vim/#basics","title":"basics","text":"<ul> <li>ctrl + g to see current file you are editing</li> <li>{ = move backward a paragraph</li> <li>} = move forward a paragraph </li> <li>( = move backward a sentence</li> <li>) = move forward a sentence</li> <li>ctrl + f  = move page forward</li> <li>ctrl + b = move page backward</li> <li> <ul> <li>= search forward for current word</li> </ul> </li> <li> </li> <li>8 j = jump down 8 lines</li> <li>8 k = kick up 8 lines</li> <li> <p>8G = move to line 8 </p> </li> <li> <p>ctrl o  jump back through history </p> </li> <li> <p>ctrl i jump forward </p> </li> <li> <p>.  go to location of last change you made</p> </li> <li>split opens new window into same buffer</li> <li>trl w switch windows</li> <li>trl w c close window</li> <li>e! reopen current file in its initial state</li> <li> <p>r my-snippet.txt pastes my-snippet.txt into current file </p> </li> <li> <p>-1 \"\" inserts file at line 1</p> </li> <li> <p>noremap   scroll down"},{"location":"software/vim/learning-vim/#search-backward-for-current-word","title":"= search backward for current word","text":""},{"location":"software/vim/learning-vim/#commands","title":": commands","text":"<ul> <li>:8 = go to line 8 </li> </ul>"},{"location":"software/vim/learning-vim/#regular-expressions","title":"regular expressions","text":"<ul> <li>/ = search forward from cursor position </li> <li>? = search backward from cursor position</li> <li>get to text by searching </li> <li>/my-text = any word containing my-text</li> <li>/te.h = any word containing tech</li> </ul>"},{"location":"software/vim/learning-vim/#visual-mode","title":"visual mode","text":"<ul> <li>v = enters visual mode</li> <li>v + 3k + d = delete 3 highlighted lines</li> </ul>"},{"location":"software/vim/learning-vim/#visual-line-mode","title":"visual line mode","text":"<ul> <li>shift+v =  creates visual line</li> <li>shift+v+2j = highlight 2 lines</li> <li>shift+d = delete highlighted lines</li> </ul>"},{"location":"software/vim/learning-vim/#visual-block-mode","title":"visual block mode","text":"<ul> <li>ctrl+v  = creates visual block</li> <li>l+4j+d= deletes the 8 highlighted blocks</li> <li>l+4j+x= deletes the 8 highlighted blocks</li> <li>l+4j+c+-+esc = inserts - at 4 lines</li> </ul>"},{"location":"software/vim/learning-vim/#registers","title":"registers","text":"<ul> <li>\"+a+yy = yank current line into register a </li> <li>\"+a+p = paste line in register a</li> </ul>"},{"location":"software/vim/learning-vim/#search-and-replace","title":"search and replace","text":"<ul> <li>:%s/replace-this/with-this/gc = confirm before replacing</li> </ul>"},{"location":"software/vim/learning-vim/#marks","title":"marks","text":"<ul> <li>create a mark using m+LETTER</li> <li>jump back to that mark using '+LETTER</li> </ul>"},{"location":"software/vim/nvim-config/","title":"Nvim","text":"<p>Vi =&gt; Vim =&gt; Nvim</p>"},{"location":"software/vim/nvim-config/#confignviminitvim","title":"~/.config/nvim/init.vim","text":"<pre><code>\" type :h and keyword for help about that topic\n\" type :options for every available option\n\nset tabstop=4 softtabstop=4\nset expandtab\nset smartindent\nset exrc \" vim will read config files from current directory\nset nu\nset relativenumber\nset nohlsearch \"gets rid of annoying consistent search highlighting\nset noerrorbells\nset hidden\nset guicursor=\nset nowrap\nset smartcase\nset noswapfile\nset nobackup\nset undodir=~/.vim/undodir\nset undofile\nset incsearch\nset termguicolors\nset scrolloff=8\nset noshowmode\nset completeopt=menuone,noinsert,noselect\nset signcolumn=yes\nset cmdheight=2 \" more space to display messages\nset updatetime=50 \"Having a longer update time leads to noticable delays and poor user experience ( default is 4000 ms / 4 seconds)\nset  shortmess+=c \" no pass messages to |ins-completion-menu|\nset clipboard+=unnamedplus\n\n\n\" The default plugin directory will be as follows:\n\"   - Vim (Linux/macOS): '~/.vim/plugged'\n\"   - Vim (Windows): '~/vimfiles/plugged'\n\"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'\n\n\" You can specify a custom plugin directory by passing it as the argument\n\"   - e.g. `call plug#begin('~/.vim/plugged')`\n\"   - Avoid using standard Vim directory names like 'plugin'\n\n\" Make sure you use single quotes\n\n\" PLUG INFO AT 'https://github.com/junegunn/vim-plug\n\n\" Initialize plugin system\ncall plug#begin()\n\n\"Plug 'https://github.com/junegunn/vim-github-dashboard.git' Any valid git URL is allowed\n\nPlug 'neovim/nvim-lspconfig'\n\nPlug 'junegunn/vim-easy-align' \" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align\n\nPlug 'SirVer/ultisnips' | Plug 'honza/vim-snippets' \" Multiple Plug commands can be written in a single line using | separators\n\n\"Plug 'neoclide/coc.nvim' \n\nPlug 'nvim-telescope/telescope.nvim'\n\nPlug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } \" On-demand loading\n\n\"Plug '~/my-prototype-plugin' Unmanaged plugin (manually installed and updated)\n\ncall plug#end()\n\n\n\" HOW TO REMAP\n\n\"mode+options KEY(s)-TO-PRESS THE-ACTION(S)-TO-EXECUTE\n\"nnoremap Y y$\n\n\" set key to start many shortcut actions\nlet mapleader = \" \"\n\n\"nnoremap = n(normal mode) no(no recursive) remap(re assign this key(s) to this actions(s))\nnnoremap Y y$\n\" yank to end of line like D natural behavior\n\" nnoremap D d$ \n\n\n\" more friendly undos \ninoremap , , &lt;c-g&gt;u\n\"inoremap = i(insert mode) no(no recursive) remap(re assign this key(s) to this actions(s))\ninoremap . . &lt;c-g&gt;u\ninoremap ! ! &lt;c-g&gt;u\ninoremap ? ? &lt;c-g&gt;u\n\n\" move text more efficiently \n\" implement later \n\" vnoremap \n\" vnoremap\n\" inoremap\n\" inoremap\n\" nnoremap\n\" nnoremap\n</code></pre>"},{"location":"software/vim/snips/","title":"Vim Snips","text":""},{"location":"software/vim/snips/#delete-blank-lines","title":"delete blank lines","text":"<pre><code>:g/^\\s*$/d \n</code></pre>"},{"location":"software/vim/spacevim-config/","title":"SpaceVim","text":"<p>quick and easy vim / nvim configuration</p>"},{"location":"software/vim/spacevim-config/#my-configuration-file","title":"my configuration file","text":"<p>$HOME/.SpaceVim.d/init.toml</p> <pre><code>[options]\nautocomplete_method = \"coc\"\nautocomplete_parens = false\nautomatic_update = true\ncolorscheme = \"molokai\" # gruvbox hybrid molokai material nord one onedark palenight jellybeans srcery NeoSolarized OceanicNext SpaceVim\ndefault_indent = 4\nenable_guicolors = true\nenable_vimfiler_welcome = true\nexpand_tab = true\nfilemanager = \"nerdtree\" # defx vimfiler\nfiletree_direction = 'left'\nsearch_highlight_persist = false\nproject_rooter_outermost = false\nrelativenumber = true\nsnippet_engine = \"ultisnips\"\nstatusline_separator = 'arrow'\nvimcompatible = false\nwindows_leader = \"s\"\nwrap_line = true\n[[layers]]\nname = \"default\"\n[[layers]]\nname = 'autocomplete'\nauto_completion_return_key_behavior = \"complete\"\nauto_completion_tab_key_behavior = \"smart\"\n[[layers]]\nname = \"colorscheme\"\n#    random_theme = true\n#frequency = \"1h\"\n[[layers]]\nname = 'shell'\ndefault_position = 'top'\ndefault_height = 30\n[[layers]]\nname = 'lang#javascript'\n#    auto_fix = true\n#    enable_flow_syntax = true\n#    format_on_save = true\n[[layers]]\nname = 'lang#python'\npython_interpreter = '/bin/python3'\npython_file_head = [\n'#!/bin/python3',\n]\n[[layers]]\nname = 'lsp'\nfiletypes = [\n\"css\",\n#        \"html\",\n\"javascript\",\n\"javascriptreact\",\n\"python\",\n\"sh\",\n\"typescript\",\n\"typescriptreact\",\n#       \"vim\",\n\"vue\",\n#\"rust\",\n]\n#   [layers.override_cmd]\n#       rust = [\"rls\"]\n[[layers]]\nname = \"format\"\nformat_on_save = true\nformat_method = \"codefmt\"\n[[layers]]\nname = \"fzf\"\n[[layers]]\nname = \"lang#typescript\"\n[[layers]]\nname = \"lang#vue\"\n[[layers]]\nname = \"lang#html\"\nemmet_leader_key = \"&lt;C-e&gt;\"\nemmet_filetyps = ['html']\n[[layers]]\nname = \"lang#css\"\n[[layers]]\nname = \"lang#rust\"\n[[layers]]\nname = \"lang#vim\"\n[[layers]]\nname = \"lang#toml\"\n[[layers]]\nname = \"lang#sh\"\n[[layers]]\nname = \"lang#markdown\"\n[[layers]]\nname = \"edit\"\n[[layers]]\nname = \"tools\"\n[[layers]]\nname = \"ssh\"\n[[layers]]\nname = \"sudo\"\n[[layers]]\nname = \"treesitter\"\n[[layers]]\nname = \"ui\"\nenable_sidebar = false\nenable_scrollbar =  false\nenable_indentline = false\nenable_cursorword  = false\nindentline_char = ''\nconceallevel = 0\nconcealcursor = ''\ncursorword_delay = 50\ncursorword_exclude_filetype = []\nindentline_exclude_filetyps = []\n[[layers]]\nname = 'VersionControl'\n[[custom_plugins]]\nrepo = \"mhartington/oceanic-next\"\n[[custom_plugins]]\nrepo = 'ryanoasis/vim-devicons'\n[[custom_plugins]]\nrepo = 'maxmellon/vim-jsx-pretty'\n[[custom_plugins]]\nrepo = \"lilydjwg/colorizer\"\n[[custom_plugins]]\nrepo = 'PhilRunninger/nerdtree-visual-selection'\n[[custom_plugins]]\nrepo = 'PhilRunninger/nerdtree-buffer-ops'\n[[custom_plugins]]\nrepo = 'tiagofumo/vim-nerdtree-syntax-highlight'\n[[custom_plugins]]\nrepo = 'Xuyuanp/nerdtree-git-plugin'\n</code></pre>"}]}