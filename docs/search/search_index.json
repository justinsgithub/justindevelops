{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":"<p>This site hosts the notes that outline the majority of my videos.</p> <p>Note</p> <p>This site was created 07 / 23 / 2023, so any notes for videos posted before this date will not be found here.</p> <p>Channel: https://youtube.com/@JustinDevelops</p>"},{"location":"languages/lua/","title":"Lua Lang","text":"<p>lua.org</p>"},{"location":"languages/lua/#who","title":"Who","text":"<ul> <li> <p>designed, implemented, and maintained by a team at the Pontifical Catholic University of Rio de Janeiro in Brazil (PUC-Rio)</p> </li> <li> <p>\"Lua\" means \"Moon\" in Portuguese, please respect the capitalization, \"LUA\" is incorrect</p> </li> </ul>"},{"location":"languages/lua/#what","title":"What","text":"<ul> <li> <p>dynamically typed scripting language, similar to python and ruby</p> </li> <li> <p>much faster than the majority of scripting languages, partly because it is a very small language</p> </li> <li> <p>made to be used with other languages or gluing languages and systems together (neovim, games... such as WOW and Angry Birds)</p> </li> <li> <p>supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description</p> </li> </ul>"},{"location":"languages/lua/#when","title":"When","text":"<ul> <li>Created in 1993</li> <li>latest release in 2020, 5.4</li> <li>5.1, neovim version, in 2006</li> </ul>"},{"location":"languages/lua/#where","title":"Where","text":"<ul> <li>Runs every where C runs, which is almost all platforms used today</li> </ul>"},{"location":"languages/lua/#why","title":"Why","text":"<ul> <li> <p>great for embedded systems and integrating with other languages or inside applications, such as neovim</p> </li> <li> <p>proven to be the fastest scripting language and even faster with LuaJIT \"Just In Time\" compiler</p> </li> <li> <p>Lua 5.4 tarball is 355K compressed and 1.4MB uncompressed</p> </li> <li> <p>MIT license</p> </li> </ul>"},{"location":"languages/lua/#install","title":"Install","text":"<ul> <li> <p>use neovim builtin interpreter <code>nvim -l my-script.lua</code> (my preference)</p> </li> <li> <p>example script for linux to build from source</p> </li> </ul> <pre><code>curl -R -O http://www.lua.org/ftp/lua-5.4.6.tar.gz\ntar zxf lua-5.4.6.tar.gz\ncd lua-5.4.6\nmake all test\n</code></pre> <ul> <li>instructions to build from source on windows  http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies </li> <li>install with package manager</li> </ul> <p><code>sudo apt install lua5.1</code></p> <ul> <li>use the live demo online https://www.lua.org/cgi-bin/demo</li> </ul>"},{"location":"languages/lua/#learn","title":"Learn","text":"<ul> <li> <p>reference manual https://www.lua.org/manual/5.1</p> </li> <li> <p>progamming in Lua book, 1st edition, is free online https://www.lua.org/pil/contents.html , it covers Lua 5.0</p> </li> </ul>"},{"location":"languages/lua/#basics","title":"Basics","text":"<p>You can Lua code with the Lua interpreter after installing Lua, or by using nvim with the <code>-l</code> option</p> <pre><code>lua my-script.lua\n\n# or\n\nnvim -l my-script.lua\n\n# can also run interpreter after running script with -i (must have Lua installed)\nlua -i my-script.lua\n</code></pre> <p>When running interactive interpreter, you can can rerun a file after making changes to it</p> <pre><code>dofile('my-script.lua')\n</code></pre> <ul> <li> <p>each piece of code Lua runs is known as a \"chunk\", which is basically any file that is loaded or ran in the interpreter</p> </li> <li> <p>reserved words</p> </li> </ul> <pre><code>and break do else elseif end false for function if in local nil not or repeat return then true until while\n</code></pre> <ul> <li>identifiers in Lua can be any string of letters, digits, and underscores, not beginning with a digit</li> </ul> <pre><code>local i10 = \"i10\"\nlocal _ij = \"_ij\"\nlocal aSomewhatLongName = \"a verbose variable name\"\n\n-- stylua: ignore\nlocal i = \"i\" local j = \"j\" -- legal, lua doesn't care about line breaks (\\n)\n\n-- BAD, underscore followed by 1 or more capital letters are reserved for Lua\nlocal _BADVARNAME = \"don't use this format\"\n\nprint(i, j, i10, _ij, aSomewhatLongName, a, b, c, _BADVARNAME)\n\n-- use _ for dummy var\nlocal dummyvar = function(_, autoparams)\n    print(autoparams)\n    Global_variable = \"start globals with capital letter\"\nend\n\nprint(Global_variable) -- nil\n\ndummyvar(\"ignoring this\", \"using this\")\n\nprint(Global_variable)\n\n--[[ multiline comment\nprint(\"comment trick\")\n--]]\n\nlocal page = [[\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;An HTML Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;a href=\"http://www.lua.org\"&gt;Lua&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n]]\n\nprint(page)\n\n-- add equal signs to change delimiter\nlocal page_with_brackets = [===[\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;An HTML Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nDOESNT END ]]\n&lt;a href=\"http://www.lua.org\"&gt;Lua&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n]===]\n\nprint(page_with_brackets)\n</code></pre>"},{"location":"languages/lua/#types","title":"Types","text":"<pre><code>-- thread and userdata are also types\nprint(type(\"Hello world\")) --&gt; string\nprint(type(10.4 * 3)) --&gt; number\nprint(type(print)) --&gt; function\nprint(type(type)) --&gt; function\nprint(type(true)) --&gt; boolean\nprint(type(nil)) --&gt; nil\nprint(type(type(\"Hello World\"))) --&gt; string\nprint(type({}))\n\nfunction Myfunc(param)\n    print(\"your arg is \" .. param)\nend\n</code></pre>"},{"location":"languages/lua/#tables","title":"Tables","text":"<ul> <li> <p>the only data-structuring machanism in Lua</p> </li> <li> <p>used to represent other data-structures like lists, dicts, objs, modules, packages</p> </li> <li> <p>avoid using lists with empty indices</p> </li> </ul> <pre><code>local mytable = {}\n\nmytable[\"a\"] = 'this'\nmytable.b = 'that'\n\nprint(mytable)\n\nlocal mylist = {}\n\nfor i=1,10 do\n  mylist[i] = tostring(i)\nend\n\nlocal mylist_length = #mylist\nprint(mylist_length) --&gt; 10\n\nlocal table_len = {}\ntable_len[10] = \"ten\"\ntable_len[11] = \"ten\"\nprint(#table_len) -- returns 0 because assumes any nil index indicates end of array\n\n-- not 0 indexed\nlocal array_constructor = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"}\nprint(array_constructor)\n\nlocal record_table = {a = \"a\", b=\"b\"}\nrecord_table[1] = \"one\"\n\nprint(record_table[1])\n</code></pre>"},{"location":"languages/lua/#common-examples","title":"Common Examples","text":"<pre><code>-- arithmetic operators\n-- + - (minus and negation) * / ^(exponent) % (modulo)\n-- relational operators\n-- &lt; &gt; &lt;= &gt;= == ~=\n-- logical operators\n-- not and or\n\nprint(not nil) --&gt; true\nprint(not false) --&gt; true\nprint(not 0) --&gt; false\nprint(not not nil) --&gt; false\n\nprint(false ==  nil) --&gt; false\nprint(false ==  0) --&gt; false\n\n-- precedence\n--[[\n^\nnot # - (unary)\n* / %\n+ -\n..\n&lt; &gt; &lt;= &gt;= ~= ==\nand\nor\n--]]\n\n\na, b, c = 0, 1\nprint(a, b, c) --&gt; 0 1 nil\n\nx = 10\n\nlocal i = 1 -- local to the chunk\nwhile i &lt;= x do\n  local x = i*2 -- local to the while body\n  print(x) --&gt; 2, 4, 6, 8, ...\n  i = i + 1\nend\n\nif i &gt; 20 then\n  local x -- local to the \"then\" body\n  x = 20\n  print(x + 2) -- (would print 22 if test succeeded)\nelse\n  print(x) --&gt; 10 (the global one)\nend\n\nprint(x) --&gt; 10 (the global one)\n\ndo\n  local a = 2\n  local d = 5\n  X1 = a - d -- assigned globally\nend -- scope of \u2019a\u2019 and \u2019d\u2019 ends here\n\nprint(X1)\n</code></pre>"},{"location":"software/github/pages/","title":"GitHub Pages","text":"<p>Domain Verification Video: https://www.youtube.com/watch?v=qleBf7HxPPM</p> <p>Host your own website for free, with custom domain using GitHub Pages</p>"},{"location":"software/github/pages/#create-website-repo","title":"Create Website Repo","text":"<ol> <li> <p>Create a new repo</p> <ul> <li>if this is a user site for your GitHub, repo name must be {username}.github.io</li> </ul> </li> <li> <p>Decide if you want to publish website in / (root) or /docs</p> </li> <li> <p>Place website files in chosen destination</p> <ul> <li>for example create file <code>docs/index.html</code> with the following content</li> </ul> </li> </ol> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;My GitHub Pages Site&lt;/title&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My GitHub Pages Site&lt;h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"software/github/pages/#publishing","title":"Publishing","text":"<ol> <li> <p>Go to repo settings and go to pages</p> </li> <li> <p>Select branch and folder to publish from</p> <ul> <li>folder must be / (root) or /docs</li> </ul> </li> </ol>"},{"location":"software/github/pages/#setting-custom-domain","title":"Setting Custom Domain","text":"<ol> <li> <p>Go to repo settings, go to pages, go to custom domain, enter desired domain (which you own)</p> </li> <li> <p>Make sure a <code>CNAME</code> file is in the publishing folder that contains the domain name you have chosen</p> </li> <li> <p>go to DNS provider (such as google domains) and edit DNS settings so that CNAME points to your GitHub pages url (such as {username}.github.io)</p> <ul> <li> <p>such as docs.justin-develops.com points to justinsgithub.github.io</p> </li> <li> <p>if using root domain (such as justin-develops.com), must point A record to GitHub IP addresses</p> </li> </ul> <pre><code>  185.199.108.153\n  185.199.109.153\n  185.199.110.153\n  185.199.111.153\n</code></pre> <ul> <li> <p>you should configure WWW subdomain as well if using root domain</p> </li> <li> <p>use this command to check DNS configuration</p> </li> </ul> <pre><code>  dig www.example.com +nostats +nocomments +nocmd\n</code></pre> </li> </ol> <p>Warning</p> <ul> <li>may take a long time for changes with DNS provider to take effect (up to 24 hours)</li> <li>github pages will show an \"improperly configured\" error until the changes take effect</li> <li>will also take time for github to provision certs after domain check is successful</li> </ul>"},{"location":"software/github/pages/#verify-custom-domain","title":"Verify Custom Domain","text":"<p>Verify your domain with GitHub for extra security and to prevent a domain takeover whenever your custom domain has any changes taking effect.</p> <ol> <li> <p>click profile in top right and click on settings</p> </li> <li> <p>click on \"pages\" and click \"add a domain\"</p> </li> <li> <p>enter domain you would like to add and click \"Add domain\"</p> </li> <li> <p>create a TXT record and enter the host name that GitHub gives you</p> <ul> <li>it should look something like below:</li> </ul> </li> </ol> <pre><code>_github-pages-challenge-{github_username}\n</code></pre> <ol> <li> <p>enter the data for the TXT record that GitHub gives you</p> <ul> <li>it should be random numbers and letters similar to below:</li> </ul> </li> </ol> <pre><code>bbfb463f444445452f4411558f84z6\n</code></pre> <ol> <li> <p>give time for you DNS provider changes to take effect, then hit verify</p> <ul> <li> <p>can take up to 24 hours, but 30 minutes to 1 hour has been my experience</p> </li> <li> <p>you can run this command to check if your DNS configuration has taken effect</p> </li> </ul> <pre><code>dig _github-pages-challenge-USERNAME.example.com +nostats +nocomments +nocmd TXT\n\n# you should see your new TXT record in the output if changes, or some other random information if not\n# _github-pages-challenge-USERNAME.example.com. 600 IN TXT \"bbfb463f444445452f4411558f84z6\"\n</code></pre> </li> </ol>"},{"location":"software/prisma/nextjs-api/","title":"Next.js Prisma API","text":"<p>How to create Next.js API routes using Prisma ORM</p>"},{"location":"software/prisma/nextjs-api/#set-up","title":"Set Up","text":""}]}